import { events } from './events.js';
import { userStates } from './state.js';
import { processPayment } from './payment/paykeeper.js';
import { bot } from './index.js';

export const showEventsList = async (chatId) => {
    try {
        if (!events?.length) {
            await bot.sendMessage(
                chatId,
                'üé≠ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.\n\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!'
            );
            return;
        }

        await bot.sendMessage(chatId, 'üéüÔ∏è <b>–ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:</b>', { parse_mode: 'HTML' });

        for (const event of events) {
            try {
                await bot.sendPhoto(
                    chatId,
                    event.image,
                    {
                        caption: `üé≠ <b>${event.title}</b>\n\n` +
                            `üìÖ ${event.date} –≤ ${event.time}\n` +
                            `üìç ${event.location}\n` +
                            `üí∞ ${event.price} —Ä—É–±.\n\n` +
                            `${event.description}\n\n` +
                            `üëá –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –±–∏–ª–µ—Ç`,
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: '–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç', callback_data: `buy_ticket_${event.id}` }]
                            ]
                        }
                    }
                );
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è ${event.id}:`, error);
                await bot.sendMessage(
                    chatId,
                    `üé≠ <b>${event.title}</b>\n\n` +
                    `üìÖ ${event.date} –≤ ${event.time}\n` +
                    `üí∞ ${event.price} —Ä—É–±.\n\n` +
                    `üëá –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –±–∏–ª–µ—Ç`,
                    {
                        parse_mode: 'HTML',
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: '–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç', callback_data: `buy_ticket_${event.id}` }]
                            ]
                        }
                    }
                );
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:', error);
        await bot.sendMessage(chatId, '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
};

export const startTicketPurchase = async (chatId, eventId) => {
    try {
        const event = events.find(e => e.id === eventId);
        if (!event) {
            await bot.sendMessage(chatId, '‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.');
            return;
        }

        userStates[chatId] = {
            eventId: event.id,
            step: 'name',
            eventData: {
                title: event.title,
                date: event.date,
                time: event.time,
                location: event.location,
                price: event.price
            },
            createdAt: Date.now()
        };

        await bot.sendMessage(
            chatId,
            `üéüÔ∏è <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –±–∏–ª–µ—Ç–∞:</b>\n\n` +
            `üé≠ ${event.title}\n` +
            `üìÖ ${event.date} –≤ ${event.time}\n` +
            `üí∞ ${event.price} —Ä—É–±.\n\n` +
            `üëá –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ <b>–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é</b>:`,
            { parse_mode: 'HTML', reply_markup: { force_reply: true } }
        );

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:', error);
        await bot.sendMessage(chatId, '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
};

export const handleTicketSteps = async (chatId, text) => {
    if (!text || text.startsWith('/')) return;

    const userState = userStates[chatId];
    if (!userState) return;

    try {
        switch (userState.step) {
            case 'name': await processNameStep(chatId, text, userState); break;
            case 'phone': await processPhoneStep(chatId, text, userState); break;
            case 'email': await processEmailStep(chatId, text, userState); break;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à–∞–≥–∞:', error);
        await bot.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.');
        delete userStates[chatId];
    }
};

async function processNameStep(chatId, text, userState) {
    const name = text.trim();
    if (name.length < 2) {
        await bot.sendMessage(
            chatId,
            '‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ.\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:',
            { reply_markup: { force_reply: true } }
        );
        return;
    }

    userState.name = name;
    userState.step = 'phone';

    await bot.sendMessage(
        chatId,
        'üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>:\n\n–ü—Ä–∏–º–µ—Ä: <code>+79161234567</code>',
        { parse_mode: 'HTML', reply_markup: { force_reply: true } }
    );
}

async function processPhoneStep(chatId, text, userState) {
    const phone = text.replace(/[^\d+]/g, '');
    if (phone.length < 10 || !phone.match(/^(\+?\d{10,15})$/)) {
        await bot.sendMessage(
            chatId,
            '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä:\n\n–ü—Ä–∏–º–µ—Ä: <code>+79161234567</code>',
            { parse_mode: 'HTML', reply_markup: { force_reply: true } }
        );
        return;
    }

    userState.phone = phone;
    userState.step = 'email';

    await bot.sendMessage(
        chatId,
        'üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>email</b> (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):',
        { parse_mode: 'HTML', reply_markup: { force_reply: true } }
    );
}

async function processEmailStep(chatId, text, userState) {
    const email = text.trim();
    if (email && !email.match(/^[^\s@]+@[^\s@]+\.[^\s@]+$/)) {
        await bot.sendMessage(
            chatId,
            '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email.\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥:',
            { reply_markup: { force_reply: true } }
        );
        return;
    }

    userState.email = email || '';
    await completeTicketPurchase(chatId, userState);
}

async function completeTicketPurchase(chatId, userState) {
    try {
        const ticketNumber = generateTicketNumber();
        const ticketData = {
            number: ticketNumber,
            event: userState.eventData,
            customer: {
                name: userState.name,
                phone: userState.phone,
                email: userState.email || `${ticketNumber}@ticket.frantsuz`
            },
            price: userState.eventData.price
        };

        await bot.sendMessage(chatId, 'üîÑ –°–æ–∑–¥–∞–µ–º –≤–∞—à –±–∏–ª–µ—Ç...', { parse_mode: 'HTML' });
        const paymentSuccess = await processPayment(bot, chatId, ticketData);

        if (!paymentSuccess) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂');
        console.log(`–£—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω –±–∏–ª–µ—Ç ${ticketNumber} –¥–ª—è ${chatId}`);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:', error);
        await bot.sendMessage(
            chatId,
            '‚ùå <b>–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –±–∏–ª–µ—Ç–∞</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
            { parse_mode: 'HTML' }
        );
    } finally {
        delete userStates[chatId];
    }
}

function generateTicketNumber() {
    const datePart = new Date().toISOString().slice(2, 10).replace(/-/g, '');
    const randomPart = Math.floor(Math.random() * 10000).toString().padStart(4, '0');
    return `FR-${datePart}-${randomPart}`;
}