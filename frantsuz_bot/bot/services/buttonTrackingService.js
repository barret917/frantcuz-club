import { ButtonClick } from '../models/ButtonClick.js';

class ButtonTrackingService {
    async trackButtonClick(buttonId) {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ incrementClick, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –≤ –º–æ–¥–µ–ª–∏
            const result = await ButtonClick.incrementClick(buttonId);
            console.log(`–ö–Ω–æ–ø–∫–∞ ${buttonId} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞`);
            return {
                success: true,
                count: result.count,
                buttonId: result.button_id
            };
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–Ω–æ–ø–∫–∏ ${buttonId}:`, error);
            throw error;
        }
    }

    async getButtonStats(buttonId) {
        try {
            const stats = await ButtonClick.findOne({
                where: { button_id: buttonId },
                attributes: ['count', 'updated_at']
            });

            return stats ? {
                count: stats.count,
                lastClick: stats.updated_at
            } : null;
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ ${buttonId}:`, error);
            throw error;
        }
    }

    async getTopButtons(limit = 10) {
        try {
            const topButtons = await ButtonClick.findAll({
                attributes: ['button_id', 'count'],
                order: [['count', 'DESC']],
                limit
            });

            return topButtons.map(button => ({
                buttonId: button.button_id,
                count: button.count
            }));
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞ –∫–Ω–æ–ø–æ–∫:', error);
            throw error;
        }
    }

    async getAllButtons() {
        try {
            const buttons = await ButtonClick.findAll({
                attributes: ['button_id', 'count'],
                order: [['count', 'DESC']]
            });

            return buttons.map(button => ({
                buttonId: button.button_id,
                count: button.count
            }));
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫:', error);
            throw error;
        }
    }

    async getFormattedStats(buttonId) {
        try {
            const stats = await this.getButtonStats(buttonId);

            if (!stats) {
                return `–ö–Ω–æ–ø–∫–∞ "${buttonId}" –µ—â–µ –Ω–µ –Ω–∞–∂–∏–º–∞–ª–∞—Å—å.`;
            }

            const lastClickDate = new Date(stats.lastClick);
            const formattedDate = lastClickDate.toLocaleString('ru-RU');

            return `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–Ω–æ–ø–∫–∏ "${buttonId}":\n` +
                `üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∂–∞—Ç–∏–π: ${stats.count}\n` +
                `‚è± –ü–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞–∂–∞—Ç–∏–µ: ${formattedDate}`;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            return '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É';
        }
    }

    async getFormattedTopButtons(limit = 10) {
        try {
            const topButtons = await this.getTopButtons(limit);

            if (topButtons.length === 0) {
                return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞–∂–∞—Ç–∏—è—Ö –∫–Ω–æ–ø–æ–∫.';
            }

            let message = 'üèÜ –¢–æ–ø —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫:\n\n';
            topButtons.forEach((button, index) => {
                message += `${index + 1}. ${button.buttonId} - ${button.count} –Ω–∞–∂–∞—Ç–∏–π\n`;
            });

            return message;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–ø–∞ –∫–Ω–æ–ø–æ–∫:', error);
            return '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –∫–Ω–æ–ø–æ–∫';
        }
    }
}

export { ButtonTrackingService };