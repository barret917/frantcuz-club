export class AdminEventManager {
    constructor(bot, EventService, userStates) {
        this.bot = bot;
        this.eventService = EventService;
        this.userStates = userStates;
        this.editSteps = {
            TITLE: 'edit_title',
            DESCRIPTION: 'edit_description',
            DATE: 'edit_date',
            LOCATION: 'edit_location',
            PRICE: 'edit_price',
            IMAGE: 'edit_image',
            CONFIRM: 'edit_confirm'
        };
    }

    async showMenu(chatId) {
        await this.bot.sendMessage(chatId, 'üéõÔ∏è <b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏</b>', {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '‚ú® –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', callback_data: 'admin_create_ticket' },
                        { text: 'üìú –°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π', callback_data: 'admin_list_tickets' }
                    ],
                    [
                        { text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data: 'admin_edit_ticket_select' },
                        { text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', callback_data: 'admin_delete_ticket_select' }
                    ],
                    [
                        { text: 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data: 'back_to_command_menu' }
                    ]
                ]
            }
        });
    }

    async listTickets(chatId) {
        try {
            const tickets = await this.eventService.getAllTickets();

            if (!tickets || tickets.length === 0) {
                return await this.bot.sendMessage(
                    chatId,
                    'üì≠ <b>–°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø—É—Å—Ç</b>\n\n' +
                    '–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.',
                    { parse_mode: 'HTML' }
                );
            }

            await this.bot.sendMessage(
                chatId,
                'üìã <b>–°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:</b>\n' +
                `–í—Å–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: <b>${tickets.length}</b>`,
                { parse_mode: 'HTML' }
            );

            for (const ticket of tickets) {
                try {
                    const eventDate = new Date(ticket.event_date);
                    const formattedDate = eventDate.toLocaleDateString('ru-RU', {
                        day: 'numeric',
                        month: 'long',
                        year: 'numeric',
                        weekday: 'long'
                    });
                    const formattedTime = eventDate.toLocaleTimeString('ru-RU', {
                        hour: '2-digit',
                        minute: '2-digit'
                    });

                    const message =
                        `üé≠ <b>${ticket.title}</b>\n\n` +
                        `üìÖ <b>–î–∞—Ç–∞:</b> ${formattedDate} –≤ ${formattedTime}\n` +
                        `üìç <b>–ú–µ—Å—Ç–æ:</b> ${ticket.event_location}\n` +
                        `üí∞ <b>–¶–µ–Ω–∞:</b> ${ticket.price} —Ä—É–±.\n\n` +
                        `üÜî ID: <code>${ticket.id}</code>\n` +
                        `üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n${ticket.description || '–Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n` +
                        `üî¢ –ù–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞: <code>${ticket.ticket_number}</code>`;

                    if (ticket.image_url && ticket.image_url.startsWith('http')) {
                        await this.bot.sendPhoto(chatId, ticket.image_url, {
                            caption: message,
                            parse_mode: 'HTML'
                        });
                    } else {
                        await this.bot.sendMessage(chatId, message, {
                            parse_mode: 'HTML',
                            disable_web_page_preview: true
                        });
                    }
                } catch (error) {
                    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–∏–ª–µ—Ç–∞ ID ${ticket.id}:`, error);
                    await this.bot.sendMessage(
                        chatId,
                        `‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∏–ª–µ—Ç–∞ ID: ${ticket.id}</b>\n` +
                        `–ù–∞–∑–≤–∞–Ω–∏–µ: ${ticket.title}\n` +
                        `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ —á–µ—Ä–µ–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ`,
                        { parse_mode: 'HTML' }
                    );
                }
            }

            await this.showMenu(chatId);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±–∏–ª–µ—Ç–æ–≤:', error);
            await this.bot.sendMessage(
                chatId,
                '‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π</b>\n' +
                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É',
                { parse_mode: 'HTML' }
            );
        }
    }

    async sendTicketDetails(chatId, ticket) {
        try {
            const eventDate = new Date(ticket.event_date);
            const formattedDate = eventDate.toLocaleDateString('ru-RU', {
                day: 'numeric',
                month: 'long',
                year: 'numeric',
                weekday: 'long'
            });
            const formattedTime = eventDate.toLocaleTimeString('ru-RU', {
                hour: '2-digit',
                minute: '2-digit'
            });

            const message =
                `üéüÔ∏è <b>${ticket.title}</b>\n\n` +
                `üìÖ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b>\n${formattedDate} –≤ ${formattedTime}\n\n` +
                `üìç <b>–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:</b>\n${ticket.event_location}\n\n` +
                `üí∞ <b>–¶–µ–Ω–∞ –±–∏–ª–µ—Ç–∞:</b> ${ticket.price} —Ä—É–±.\n\n` +
                `üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n${ticket.description || '–Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n` +
                `üÜî ID: <code>${ticket.id}</code>\n` +
                `üî¢ –ù–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞: <code>${ticket.ticket_number}</code>`;

            if (ticket.image_url && ticket.image_url.startsWith('http')) {
                await this.bot.sendPhoto(chatId, ticket.image_url, {
                    caption: message,
                    parse_mode: 'HTML'
                });
            } else {
                await this.bot.sendMessage(chatId, message, {
                    parse_mode: 'HTML',
                    disable_web_page_preview: true
                });
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–µ—Ç–∞–ª–µ–π –±–∏–ª–µ—Ç–∞:', error);
            throw error;
        }
    }

    async startEditTicket(chatId) {
        await this.bot.sendMessage(
            chatId,
            '‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</b>\n\n' +
            '–í–≤–µ–¥–∏—Ç–µ ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:\n' +
            '–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã',
            { parse_mode: 'HTML' }
        );
        this.userStates[chatId] = {
            isAdminAction: true,
            step: 'selecting_ticket_for_edit'
        };
    }

    async processEditTicketSelection(chatId, ticketId) {
        try {
            const ticket = await this.eventService.getTicketById(ticketId);
            if (!ticket) {
                return await this.bot.sendMessage(
                    chatId,
                    '‚ùå <b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>\n\n' +
                    '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ ID',
                    { parse_mode: 'HTML' }
                );
            }

            this.userStates[chatId] = {
                isAdminAction: true,
                step: this.editSteps.TITLE,
                ticketId: ticket.id,
                originalTicket: ticket,
                editedTicket: { ...ticket.dataValues }
            };

            await this.showEditFieldMenu(chatId, 'title');

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∏–ª–µ—Ç–∞:', error);
            await this.bot.sendMessage(
                chatId,
                '‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</b>\n' +
                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É',
                { parse_mode: 'HTML' }
            );
        }
    }

    async showEditFieldMenu(chatId, field) {
        const state = this.userStates[chatId];
        const ticket = state.editedTicket;

        let message = `‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</b>\n\n`;
        message += `üÜî ID: <code>${ticket.id}</code>\n\n`;
        message += `üìå <b>${this.getFieldName(field)}:</b>\n`;
        message += `<i>${ticket[field] || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}</i>\n\n`;
        message += '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';

        const keyboard = [
            [{ text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: `edit_skip_${field}` }],
            [
                { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'edit_cancel' },
                { text: '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å', callback_data: 'edit_finish' }
            ]
        ];

        await this.bot.sendMessage(chatId, message, {
            parse_mode: 'HTML',
            reply_markup: { inline_keyboard: keyboard }
        });
    }

    async processEditStep(chatId, text) {
        const state = this.userStates[chatId];
        if (!state) return;

        try {
            switch (state.step) {
                case this.editSteps.TITLE:
                    if (text.length < 3) {
                        await this.bot.sendMessage(
                            chatId,
                            '‚ùå <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ</b>\n' +
                            '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 3 —Å–∏–º–≤–æ–ª–∞',
                            { parse_mode: 'HTML' }
                        );
                        return;
                    }
                    state.editedTicket.title = text;
                    state.step = this.editSteps.DESCRIPTION;
                    await this.showEditFieldMenu(chatId, 'description');
                    break;

                case this.editSteps.DESCRIPTION:
                    state.editedTicket.description = text;
                    state.step = this.editSteps.DATE;
                    await this.showEditFieldMenu(chatId, 'event_date');
                    break;

                case this.editSteps.DATE:
                    if (!this.validateDate(text)) {
                        await this.bot.sendMessage(
                            chatId,
                            '‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã</b>\n' +
                            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <code>–ì–ì–ì–ì-–ú–ú-–î–î</code>',
                            { parse_mode: 'HTML' }
                        );
                        return;
                    }
                    state.editedTicket.event_date = text;
                    state.step = this.editSteps.LOCATION;
                    await this.showEditFieldMenu(chatId, 'event_location');
                    break;

                case this.editSteps.LOCATION:
                    if (text.length < 5) {
                        await this.bot.sendMessage(
                            chatId,
                            '‚ùå <b>–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ</b>\n' +
                            '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 5 —Å–∏–º–≤–æ–ª–æ–≤',
                            { parse_mode: 'HTML' }
                        );
                        return;
                    }
                    state.editedTicket.event_location = text;
                    state.step = this.editSteps.PRICE;
                    await this.showEditFieldMenu(chatId, 'price');
                    break;

                case this.editSteps.PRICE:
                    const price = parseFloat(text);
                    if (isNaN(price) || price <= 0) {
                        await this.bot.sendMessage(
                            chatId,
                            '‚ùå <b>–ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞</b>\n' +
                            '–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ',
                            { parse_mode: 'HTML' }
                        );
                        return;
                    }
                    state.editedTicket.price = price;
                    state.step = this.editSteps.IMAGE;
                    await this.showEditFieldMenu(chatId, 'image_url');
                    break;

                case this.editSteps.IMAGE:
                    state.editedTicket.image_url = text;
                    state.step = this.editSteps.CONFIRM;
                    await this.showEditConfirmation(chatId);
                    break;

                default:
                    await this.bot.sendMessage(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
                    delete this.userStates[chatId];
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —à–∞–≥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
            await this.bot.sendMessage(
                chatId,
                '‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö</b>\n' +
                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑',
                { parse_mode: 'HTML' }
            );
            delete this.userStates[chatId];
        }
    }

    async handleEditCallback(chatId, data) {
        const state = this.userStates[chatId];
        if (!state) return;

        try {
            if (data === 'edit_cancel') {
                delete this.userStates[chatId];
                await this.bot.sendMessage(
                    chatId,
                    '‚ùå <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>',
                    { parse_mode: 'HTML' }
                );
                await this.showMenu(chatId);
                return;
            }
            if (data.startsWith('edit_skip_')) {
                —á
                const field = data.replace('edit_skip_', '');
                const nextField = this.getNextField(field);

                if (nextField) {
                    state.step = this.editSteps[nextField.toUpperCase()];
                    await this.showEditFieldMenu(chatId, nextField);
                } else {
                    state.step = this.editSteps.CONFIRM;
                    await this.showEditConfirmation(chatId);
                }
                return;
            }

            if (data === 'edit_finish') {
                await this.showEditConfirmation(chatId);
                return;
            }

            if (data === 'edit_confirm') {
                const { ticketId, editedTicket } = state;
                const updatedTicket = await this.eventService.updateTicket(ticketId, editedTicket);
                delete this.userStates[chatId];

                await this.bot.sendMessage(
                    chatId,
                    `‚úÖ <b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!</b>\n\n` +
                    `üé≠ <b>${updatedTicket.title}</b>\n` +
                    `üÜî ID: <code>${updatedTicket.id}</code>`,
                    { parse_mode: 'HTML' }
                );
                await this.showMenu(chatId);
                return;
            }

            if (data === 'edit_continue') {
                state.step = this.editSteps.TITLE;
                await this.showEditFieldMenu(chatId, 'title');
                return;
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback:', error);
            await this.bot.sendMessage(
                chatId,
                '‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã</b>',
                { parse_mode: 'HTML' }
            );
            delete this.userStates[chatId];
        }
    }

    getFieldName(field) {
        const names = {
            title: '–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
            description: '–û–ø–∏—Å–∞–Ω–∏–µ',
            event_date: '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è',
            event_location: '–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è',
            price: '–¶–µ–Ω–∞ –±–∏–ª–µ—Ç–∞',
            image_url: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
        };
        return names[field] || field;
    }

    validateDate(dateString) {
        const regex = /^\d{4}-\d{2}-\d{2}$/;
        if (!regex.test(dateString)) return false;
        const date = new Date(dateString);
        return date instanceof Date && !isNaN(date);
    }

    getNextField(currentField) {
        const fieldsOrder = ['title', 'description', 'event_date', 'event_location', 'price', 'image_url'];
        const currentIndex = fieldsOrder.indexOf(currentField);
        return currentIndex < fieldsOrder.length - 1 ? fieldsOrder[currentIndex + 1] : null;
    }

    async showEditConfirmation(chatId) {
        const state = this.userStates[chatId];
        const original = state.originalTicket;
        const edited = state.editedTicket;

        let message = '‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:</b>\n\n';
        message += `üÜî <b>ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:</b> <code>${original.id}</code>\n\n`;

        const fields = ['title', 'description', 'event_date', 'event_location', 'price', 'image_url'];
        let hasChanges = false;

        fields.forEach(field => {
            if (original[field] !== edited[field]) {
                hasChanges = true;
                message += `üîπ <b>${this.getFieldName(field)}:</b>\n` +
                    `‚ñ´Ô∏è <i>–ë—ã–ª–æ:</i> ${original[field] || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
                    `‚ñ´Ô∏è <i>–°—Ç–∞–ª–æ:</i> ${edited[field] || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n`;
            }
        });

        if (!hasChanges) {
            message += '‚ö†Ô∏è <b>–í—ã –Ω–µ –≤–Ω–µ—Å–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π</b>';
        }

        const keyboard = [
            [
                { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: 'edit_confirm' },
                { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'edit_cancel' }
            ]
        ];

        if (hasChanges) {
            keyboard.push([
                { text: '‚úèÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', callback_data: 'edit_continue' }
            ]);
        }

        await this.bot.sendMessage(chatId, message, {
            parse_mode: 'HTML',
            reply_markup: { inline_keyboard: keyboard }
        });
    }

    async startDeleteTicket(chatId) {
        await this.bot.sendMessage(
            chatId,
            'üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</b>\n\n' +
            '–í–≤–µ–¥–∏—Ç–µ ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:',
            { parse_mode: 'HTML' }
        );
        this.userStates[chatId] = {
            isAdminAction: true,
            step: 'selecting_ticket_for_delete'
        };
    }

    async processDeleteTicket(chatId, ticketId) {
        try {
            const result = await this.eventService.deleteTicket(ticketId);
            if (result) {
                await this.bot.sendMessage(
                    chatId,
                    `‚úÖ <b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ</b>\n\n` +
                    `ID: <code>${ticketId}</code>`,
                    { parse_mode: 'HTML' }
                );
                await this.showMenu(chatId);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–∏–ª–µ—Ç–∞:', error);
            await this.bot.sendMessage(
                chatId,
                `‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ</b>\n\n` +
                `ID: <code>${ticketId}</code>`,
                { parse_mode: 'HTML' }
            );
        }
    }
}