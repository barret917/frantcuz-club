// AdminRefundHandler.js
import { bot } from '../../botInstance.js';
import { Ticket } from '../../../models/Event.js';
import { UserTicket } from '../../../models/UserTicket.js';
import RefundService from '../../../services/RefundService.js';

const refundService = new RefundService();

export class AdminRefundHandler {
    constructor() {
        this.setupHandlers();
    }

    setupHandlers() {
        bot.on('callback_query', async (callbackQuery) => {
            const data = callbackQuery.data;
            const chatId = callbackQuery.message.chat.id;
            
            if (data === 'admin_refund') {
                await this.showAllEventsForRefund(chatId);
            } else if (data.startsWith('full_refund_event_')) {
                const eventId = data.split('_')[3];
                await this.confirmFullRefund(chatId, eventId, callbackQuery.message.message_id);
            } else if (data.startsWith('confirm_full_refund_')) {
                const eventId = data.split('_')[3];
                await this.processFullRefund(chatId, eventId, callbackQuery.message.message_id);
            } else if (data === 'cancel_full_refund') {
                await bot.deleteMessage(chatId, callbackQuery.message.message_id);
            }
        });
    }

    async showAllEventsForRefund(chatId) {
        try {
            const events = await Ticket.findAll({
                include: [{
                    model: UserTicket,
                    as: 'user_tickets',
                    where: { 
                        payment_status: 'paid'
                    },
                    required: true
                }],
                order: [['event_date', 'DESC']]
            });

            if (!events.length) {
                return await bot.sendMessage(chatId, '‚ùå –ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Å –æ–ø–ª–∞—á–µ–Ω–Ω—ã–º–∏ –±–∏–ª–µ—Ç–∞–º–∏', {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_command_menu' }]
                        ]
                    }
                });
            }

            const eventButtons = events.map(event => [
                {
                    text: `${event.title} (${event.user_tickets.length} –±–∏–ª–µ—Ç–æ–≤)`,
                    callback_data: `full_refund_event_${event.id}`
                }
            ]);

            eventButtons.push([{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_command_menu' }]);

            await bot.sendMessage(
                chatId,
                'üé™ *–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤*:\n\n' +
                '‚ÑπÔ∏è –ë—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã —Å—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞ –≤—Å–µ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –±–∏–ª–µ—Ç—ã —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
                {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: eventButtons
                    }
                }
            );

        } catch (error) {
            console.error('Error showing events for refund:', error);
            await bot.sendMessage(chatId, '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π');
        }
    }

    async confirmFullRefund(chatId, eventId, messageId) {
        try {
            const event = await Ticket.findByPk(eventId, {
                include: [{
                    model: UserTicket,
                    as: 'user_tickets',
                    where: { 
                        payment_status: 'paid'
                    }
                }]
            });

            if (!event) {
                return await bot.sendMessage(chatId, '‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            }

            const ticketPrice = parseFloat(event.price).toFixed(2);
            const totalAmount = (parseFloat(event.price) * event.user_tickets.length).toFixed(2);
            
            const eventDate = new Date(event.event_date);
            const isPastEvent = eventDate < new Date();

            await bot.editMessageText(
                `‚ö†Ô∏è *–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ü–û–õ–ù–û–ì–û –í–û–ó–í–†–ê–¢–ê* ‚ö†Ô∏è\n\n` +
                `üìå *${event.title}*\n` +
                `üìÖ –î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ${eventDate.toLocaleString()}\n` +
                `üé´ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤: ${event.user_tickets.length}\n` +
                `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞: ${ticketPrice} ‚ÇΩ\n` +
                `üí∞ –û–±—â–∞—è —Å—É–º–º–∞: ${totalAmount} ‚ÇΩ\n` +
                `üìå –°—Ç–∞—Ç—É—Å: ${isPastEvent ? 'üî¥ –ü—Ä–æ—à–µ–¥—à–µ–µ' : 'üü¢ –ë—É–¥—É—â–µ–µ'}\n\n` +
                `*–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å! –í—Å–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º.*`,
                {
                    chat_id: chatId,
                    message_id: messageId,
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { 
                                    text: '‚úÖ –ü–û–î–¢–í–ï–†–î–ò–¢–¨ –í–û–ó–í–†–ê–¢', 
                                    callback_data: `confirm_full_refund_${eventId}`
                                }
                            ],
                            [
                                { 
                                    text: '‚ùå –û–¢–ú–ï–ù–ê', 
                                    callback_data: 'cancel_full_refund'
                                }
                            ]
                        ]
                    }
                }
            );

        } catch (error) {
            console.error('Confirm refund error:', error);
            await bot.sendMessage(chatId, '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞');
        }
    }

    async processFullRefund(chatId, eventId, messageId) {
        try {
            await bot.editMessageText('üîÑ *–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–ª–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤...*', {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                reply_markup: { inline_keyboard: [] }
            });

            const refundResult = await refundService.refundEventTickets(eventId);

            if (!refundResult.success) {
                const errors = refundResult.errors || [];
                return await bot.editMessageText(
                    `‚ùå *–û–®–ò–ë–ö–ê –í–û–ó–í–†–ê–¢–ê*\n\n` +
                    `–£—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ: ${refundResult.refundedTickets || 0} –±–∏–ª–µ—Ç–æ–≤\n` +
                    `–ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å: ${errors.length} –ø–ª–∞—Ç–µ–∂–µ–π\n\n` +
                    `–ü–µ—Ä–≤–∞—è –æ—à–∏–±–∫–∞: ${errors[0]?.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
                    {
                        chat_id: chatId,
                        message_id: messageId,
                        parse_mode: 'Markdown',
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: 'üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É', callback_data: `full_refund_event_${eventId}` }],
                                [{ text: '‚óÄÔ∏è –í –º–µ–Ω—é –≤–æ–∑–≤—Ä–∞—Ç–æ–≤', callback_data: 'admin_refund' }]
                            ]
                        }
                    }
                );
            }

            const event = await Ticket.findByPk(eventId);

            await bot.editMessageText(
                `‚úÖ *–ü–û–õ–ù–´–ô –í–û–ó–í–†–ê–¢ –£–°–ü–ï–®–ù–û –í–´–ü–û–õ–ù–ï–ù*\n\n` +
                `üìå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: ${event.title}\n` +
                `üí≥ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ –ø–ª–∞—Ç–µ–∂–µ–π: ${refundResult.refundedPayments}\n` +
                `üé´ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ –±–∏–ª–µ—Ç–æ–≤: ${refundResult.refundedTickets}\n` +
                `üí∞ –û–±—â–∞—è —Å—É–º–º–∞: ${refundResult.totalAmount} ‚ÇΩ\n\n` +
                `üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º.`,
                {
                    chat_id: chatId,
                    message_id: messageId,
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚óÄÔ∏è –í –º–µ–Ω—é –≤–æ–∑–≤—Ä–∞—Ç–æ–≤', callback_data: 'admin_refund' }]
                        ]
                    }
                }
            );

        } catch (error) {
            console.error('Process refund error:', error);
            await bot.editMessageText(
                '‚ö†Ô∏è *–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê*\n\n' +
                '–ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã.\n\n' +
                `–û—à–∏–±–∫–∞: ${error.message}`,
                {
                    chat_id: chatId,
                    message_id: messageId,
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚óÄÔ∏è –í –º–µ–Ω—é –≤–æ–∑–≤—Ä–∞—Ç–æ–≤', callback_data: 'admin_refund' }]
                        ]
                    }
                }
            );
        }
    }
}

export const adminRefundHandler = new AdminRefundHandler();