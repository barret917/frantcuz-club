import { bot } from '../botInstance.js';
import { UserTicket } from '../../models/UserTicket.js';
import { Ticket } from '../../models/Event.js';
import { Order } from '../../models/Orders.js';
import { OrderItem } from '../../models/OrderItem.js';
import { User } from '../../models/User.js';
import { formatDate } from '../../services/dateFormatters.js';

export const setupQRScanner = () => {
    console.log('üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫–∞–Ω–µ—Ä–∞ QR-–∫–æ–¥–æ–≤...');

    bot.on('callback_query', async (callbackQuery) => {
        const data = callbackQuery.data;
        const chatId = callbackQuery.message.chat.id;

        if (data.startsWith('mark_used_')) {
            await handleMarkUsed(callbackQuery, chatId, data);
        }
    });
};

export async function processTicket(chatId, ticketNumber) {
    try {
        const userTicket = await UserTicket.findOne({
            where: { ticket_number: ticketNumber },
            include: [
                {
                    model: Ticket,
                    as: 'ticket',
                    attributes: ['title', 'description', 'image_url', 'event_date', 'event_location', 'price']
                },
                {
                    model: OrderItem,
                    as: 'order_item',
                    required: false, // –†–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–≤—è–∑–∏
                    include: [{
                        model: Order,
                        as: 'order',
                        required: false, // –†–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–≤—è–∑–∏
                        attributes: ['first_name', 'last_name', 'email', 'phone', 'status']
                    }]
                }
            ]
        });

        if (!userTicket) {
            return bot.sendMessage(chatId, '‚ùå –ë–∏–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞.');
        }

        const user = await User.findOne({ where: { telegram_id: chatId } });
        const isAdmin = user?.is_admin || false;

        const message = buildTicketMessage(userTicket);
        const options = { parse_mode: 'Markdown' };

        if (isAdmin && !userTicket.is_used) {
            options.reply_markup = {
                inline_keyboard: [
                    [{
                        text: '‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π',
                        callback_data: `mark_used_${userTicket.id}`
                    }]
                ]
            };
        }

        if (userTicket.ticket.image_url) {
            await bot.sendPhoto(chatId, userTicket.ticket.image_url, {
                caption: message,
                ...options
            });
        } else {
            await bot.sendMessage(chatId, message, options);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∏–ª–µ—Ç–∞:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∏–ª–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

function buildTicketMessage(userTicket) {
    let buyerInfo = '';
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ
    if (userTicket.order_item && userTicket.order_item.order) {
        const order = userTicket.order_item.order;
        buyerInfo = `üë§ *–î–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:*\n` +
                   `‚Ä¢ –ò–º—è: ${order.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} ${order.last_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
                   `‚Ä¢ Email: ${order.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
                   `‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: ${order.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n`;
    } else {
        buyerInfo = '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n\n';
    }

    return `üéüÔ∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–ª–µ—Ç–µ* üéüÔ∏è\n\n` +
           `üìå *–ù–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞:* ${userTicket.ticket_number}\n` +
           `üìå *–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:* ${userTicket.ticket.title}\n` +
           `üìÖ *–î–∞—Ç–∞:* ${formatDate(userTicket.ticket.event_date)}\n` +
           `üìç *–ú–µ—Å—Ç–æ:* ${userTicket.ticket.event_location}\n` +
           `üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* ${userTicket.ticket.price} —Ä—É–±.\n\n` +
           buyerInfo +
           `üîÑ *–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã:* ${userTicket.payment_status === 'paid' ? '‚úÖ –û–ø–ª–∞—á–µ–Ω' : '‚ùå –ù–µ –æ–ø–ª–∞—á–µ–Ω'}\n` +
           `üé≠ *–°—Ç–∞—Ç—É—Å –±–∏–ª–µ—Ç–∞:* ${userTicket.is_used ? '‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω' : '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω'}`;
}

async function handleMarkUsed(callbackQuery, chatId, data) {
    try {
        const ticketId = data.split('_')[2];
        const userTicket = await UserTicket.findByPk(ticketId);

        if (!userTicket) {
            return bot.answerCallbackQuery(callbackQuery.id, { text: '–ë–∏–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        const user = await User.findOne({ where: { telegram_id: chatId } });
        if (!user?.is_admin) {
            return bot.answerCallbackQuery(callbackQuery.id, { text: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' });
        }

        await userTicket.update({ is_used: true, used_at: new Date() });

        await bot.editMessageReplyMarkup(
            { inline_keyboard: [] },
            { chat_id: chatId, message_id: callbackQuery.message.message_id }
        );

        await bot.answerCallbackQuery(callbackQuery.id, { text: '–ë–∏–ª–µ—Ç –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π' });
        await bot.sendMessage(chatId, '‚úÖ –ë–∏–ª–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π.');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –±–∏–ª–µ—Ç–∞:', error);
        await bot.answerCallbackQuery(callbackQuery.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' });
    }
}