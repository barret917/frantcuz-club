import { bot } from '../../botInstance.js';
import { UserTicket } from '../../../models/UserTicket.js';
import { Ticket } from '../../../models/Event.js';
import { RefundTicket } from '../../../models/Refund.js';
import { ensureUserRegistered } from '../mainMenu.js';
import RefundClientService from '../../../services/RefundClientService.js';
import { userStates } from '../../../state.js';
import { formatDate } from '../../../services/dateFormatters.js';

const refundSteps = [
    'start',
    'last_name',
    'first_name',
    'middle_name',
    'phone',
    'email',
    'account_number',
    'bank_name',
    'bik',
    'correspondent_account',
    'inn',
    'kpp',
    'refund_reason',
    'confirm'
];

const REFUND_RULES = {
    CANCELLED: { percent: 100, message: '100% –≤–æ–∑–≤—Ä–∞—Ç (–æ—Ç–º–µ–Ω–∞/–ø–µ—Ä–µ–Ω–æ—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è)' },
    MORE_7_DAYS: { percent: 90, message: '90% –≤–æ–∑–≤—Ä–∞—Ç (–æ—Ç 7 –¥–Ω–µ–π –¥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è)' },
    BETWEEN_3_7_DAYS: { percent: 50, message: '50% –≤–æ–∑–≤—Ä–∞—Ç (3-7 –¥–Ω–µ–π –¥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è)' },
    LESS_3_DAYS: { percent: 0, message: '–í–æ–∑–≤—Ä–∞—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω (–º–µ–Ω–µ–µ 3 –¥–Ω–µ–π –¥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è)' },
    AFTER_EVENT: { percent: 0, message: '–í–æ–∑–≤—Ä–∞—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω (–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–∂–µ –ø—Ä–æ—à–ª–æ)' }
};

const refundService = new RefundClientService();

export async function handleRefundTicket(callbackQuery) {
    try {
        const chatId = callbackQuery.message.chat.id;
        const ticketId = callbackQuery.data.split('_')[2];
        
        if (!ticketId) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –±–∏–ª–µ—Ç–∞');
        }

        const existingRefund = await RefundTicket.findOne({
            where: { user_ticket_id: ticketId }
        });

        if (existingRefund) {
            return await bot.sendMessage(
                chatId,
                '‚ö†Ô∏è –ù–∞ —ç—Ç–æ—Ç –±–∏–ª–µ—Ç —É–∂–µ –ø–æ–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç',
                { reply_to_message_id: callbackQuery.message.message_id }
            );
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–ª–µ—Ç–µ
        const userTicket = await UserTicket.findByPk(ticketId, {
            include: [{
                model: Ticket,
                as: 'ticket',
                required: true
            }]
        });

        if (!userTicket) {
            throw new Error('–ë–∏–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—Ç–∞
        const refundInfo = calculateRefundAmount(userTicket.ticket.event_date);
        
        if (refundInfo.percent === 0) {
            return await bot.sendMessage(chatId, 
                `‚ùå –í–æ–∑–≤—Ä–∞—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω:\n${refundInfo.message}\n\n` +
                `–î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ${formatDate(userTicket.ticket.event_date)}\n` +
                `–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: ${refundInfo.daysLeft || '0'}`
            );
        }

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        const refundAmount = (userTicket.ticket.price * refundInfo.percent / 100).toFixed(2);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        userStates[chatId] = {
            refund: {
                step: 'start',
                userTicketId: ticketId,
                ticketNumber: userTicket.ticket_number,
                originalAmount: userTicket.ticket.price,
                refundAmount: parseFloat(refundAmount),
                refundPercent: refundInfo.percent,
                refundReason: '',
                eventDate: userTicket.ticket.event_date,
                data: {}
            }
        };

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Å —É—Å–ª–æ–≤–∏—è–º–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
        await bot.sendMessage(chatId, 
            `‚ú® <b>–£—Å–ª–æ–≤–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–ª–µ—Ç–∞:</b>\n` +
            `‚ñ∏ ${refundInfo.message}\n` +
            `‚ñ∏ –°—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: ${refundAmount} —Ä—É–±. (–∏–∑ ${userTicket.ticket.price} —Ä—É–±.)\n` +
            `‚ñ∏ –î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ${formatDate(userTicket.ticket.event_date)}\n\n` +
            `üìù –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n\n` +
            `1. –§–∞–º–∏–ª–∏—è\n` +
            `2. –ò–º—è\n` +
            `3. –û—Ç—á–µ—Å—Ç–≤–æ\n` +
            `4. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+7XXXXXXXXXX)\n` +
            `5. Email\n` +
            `6. –ù–æ–º–µ—Ä —Å—á–µ—Ç–∞\n` +
            `7. –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞\n` +
            `8. –ë–ò–ö –±–∞–Ω–∫–∞\n` +
            `9. –ö–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—Å–∫–∏–π —Å—á–µ—Ç\n` +
            `10. –ò–ù–ù\n` +
            `11. –ö–ü–ü (–µ—Å–ª–∏ –µ—Å—Ç—å)\n\n` +
            `12. –ü—Ä–∏—á–∏–Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞\n\n` +
            `–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–¥–Ω–æ–º—É –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.\n\n` +
            `–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é:`,
            { parse_mode: 'HTML' }
        );

        await bot.answerCallbackQuery(callbackQuery.id);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –±–∏–ª–µ—Ç–∞:', error);
        if (callbackQuery?.id) {
            await bot.answerCallbackQuery(callbackQuery.id, {
                text: '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–∑–≤—Ä–∞—Ç–∞',
                show_alert: true
            });
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Å—É–º–º—ã –≤–æ–∑–≤—Ä–∞—Ç–∞
function calculateRefundAmount(eventDate) {
    const now = new Date();
    const eventDateTime = new Date(eventDate);
    const timeDiff = eventDateTime - now;
    const daysLeft = Math.ceil(timeDiff / (1000 * 60 * 60 * 24));

    if (timeDiff < 0) {
        return { ...REFUND_RULES.AFTER_EVENT, daysLeft: 0 };
    }

    if (daysLeft < 3) {
        return { ...REFUND_RULES.LESS_3_DAYS, daysLeft };
    }

    if (daysLeft >= 3 && daysLeft <= 7) {
        return { ...REFUND_RULES.BETWEEN_3_7_DAYS, daysLeft };
    }

    return { ...REFUND_RULES.MORE_7_DAYS, daysLeft };
}

export async function processRefundStep(msg) {
    try {
        const chatId = msg.chat.id;
        const text = msg.text;
        const userState = userStates[chatId]?.refund;

        if (!userState) return;

        const currentStep = userState.step;
        const stepIndex = refundSteps.indexOf(currentStep);

        if (stepIndex === -1) return;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        switch (currentStep) {
            case 'start':
                userState.data.last_name = text;
                userState.step = 'last_name';
                await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è:');
                break;
            case 'last_name':
                userState.data.first_name = text;
                userState.step = 'first_name';
                await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ:');
                break;
            case 'first_name':
                userState.data.middle_name = text;
                userState.step = 'middle_name';
                await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+7XXXXXXXXXX):');
                break;
            case 'middle_name':
                if (!/^(\+7|8)[0-9]{10}$/.test(text)) {
                    await bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:');
                    return;
                }
                userState.data.phone = text;
                userState.step = 'phone';
                await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ email:');
                break;
            case 'phone':
                if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(text)) {
                    await bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email:');
                    return;
                }
                userState.data.email = text;
                userState.step = 'email';
                await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞:');
                break;
            case 'email':
                userState.data.account_number = text;
                userState.step = 'account_number';
                await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:');
                break;
            case 'account_number':
                userState.data.bank_name = text;
                userState.step = 'bank_name';
                await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –ë–ò–ö –±–∞–Ω–∫–∞:');
                break;
            case 'bank_name':
                userState.data.bik = text;
                userState.step = 'bik';
                await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—Å–∫–∏–π —Å—á–µ—Ç:');
                break;
            case 'bik':
                userState.data.correspondent_account = text;
                userState.step = 'correspondent_account';
                await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù:');
                break;
            case 'correspondent_account':
                userState.data.inn = text;
                userState.step = 'inn';
                await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –ö–ü–ü (–µ—Å–ª–∏ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-"):');
                break;
            case 'inn':
                userState.data.kpp = text === '-' ? null : text;
                userState.step = 'refund_reason';
                await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –≤–æ–∑–≤—Ä–∞—Ç–∞: ');
                break
            case 'refund_reason':
                userState.data.refund_reason = text;
                userState.refundReason = text;
                userState.step = 'confirm';              
                // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –¥–∞–Ω–Ω—ã—Ö
                const summary = `
                ‚ú® <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>

                üé´ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–ª–µ—Ç–µ:</b>
                ‚ñ∏ –ù–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞: ${userState.ticketNumber}
                ‚ñ∏ –î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ${formatDate(userState.eventDate)}
                ‚ñ∏ –°—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: ${userState.refundAmount} —Ä—É–±. (${userState.refundPercent}% –æ—Ç ${userState.originalAmount} —Ä—É–±.)
                ‚ñ∏ –ü—Ä–∏—á–∏–Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: ${userState.refundReason}

                üë§ <b>–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>
                ‚ñ∏ –§–ò–û: ${userState.data.last_name} ${userState.data.first_name} ${userState.data.middle_name}
                ‚ñ∏ –¢–µ–ª–µ—Ñ–æ–Ω: ${userState.data.phone}
                ‚ñ∏ Email: ${userState.data.email}

                üè¶ <b>–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:</b>
                ‚ñ∏ –°—á–µ—Ç: ${userState.data.account_number}
                ‚ñ∏ –ë–∞–Ω–∫: ${userState.data.bank_name}
                ‚ñ∏ –ë–ò–ö: ${userState.data.bik}
                ‚ñ∏ –ö–æ—Ä—Ä. —Å—á–µ—Ç: ${userState.data.correspondent_account}
                ‚ñ∏ –ò–ù–ù: ${userState.data.inn}
                ‚ñ∏ –ö–ü–ü: ${userState.data.kpp || '–Ω–µ —É–∫–∞–∑–∞–Ω'}

                <i>–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É. –°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π.</i>
                `;

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –∏ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                await bot.sendMessage(chatId, summary, {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç', callback_data: `confirm_refund_${userState.userTicketId}` }],
                            [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel_refund' }]
                        ]
                    }
                });
                break;
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —à–∞–≥–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞:', error);
        await bot.sendMessage(msg.chat.id, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
}

export async function confirmRefundRequest(callbackQuery) {
    try {
        const chatId = callbackQuery.message.chat.id;
        const userState = userStates[chatId]?.refund;

        if (!userState) {
            throw new Error('–°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }

        const user = await ensureUserRegistered({
            from: callbackQuery.from,
            message: callbackQuery.message
        });

        if (!user?.telegram_id) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        }

        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        const refundData = {
            ...userState.data,
            full_name: `${userState.data.last_name} ${userState.data.first_name} ${userState.data.middle_name}`,
            refund_reason: userState.refundReason,
            refund_amount: userState.refundAmount,
            okpo: null,
            ogrn: null
        };

        console.log(refundData, 'refund')

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
        const result = await refundService.createRefundRequest(
            user.telegram_id,
            [userState.userTicketId],
            refundData
        );

        if (result.success) {
            await bot.sendMessage(chatId, 
                `‚úÖ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç ‚Ññ${result.refundId} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n` +
                `‚ñ∏ –ù–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞: ${userState.ticketNumber}\n` +
                `‚ñ∏ –°—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: ${userState.refundAmount} —Ä—É–±.\n` +
                `‚ñ∏ –û—Å–Ω–æ–≤–∞–Ω–∏–µ: ${userState.refundReason}\n\n` +
                `<i>–ù–∞ –≤–∞—à email ${refundData.email} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ. ` +
                `–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –±–∏–ª–µ—Ç—ã". ` +
                `–°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π.</i>`,
                { parse_mode: 'HTML' }
            );
        } else {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç');
        }

        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        delete userStates[chatId].refund;

        await bot.answerCallbackQuery(callbackQuery.id);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞:', error);
        if (callbackQuery?.id) {
            await bot.answerCallbackQuery(callbackQuery.id, {
                text: '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏',
                show_alert: true
            });
        }
    }
}

export async function cancelRefundRequest(callbackQuery) {
    try {
        const chatId = callbackQuery.message.chat.id;
        
        if (userStates[chatId]?.refund) {
            delete userStates[chatId].refund;
        }

        await bot.sendMessage(chatId, '‚ùå –ó–∞—è–≤–∫–∞ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –æ—Ç–º–µ–Ω–µ–Ω–∞.');
        await bot.answerCallbackQuery(callbackQuery.id);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –≤–æ–∑–≤—Ä–∞—Ç–∞:', error);
        if (callbackQuery?.id) {
            await bot.answerCallbackQuery(callbackQuery.id, {
                text: '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ',
                show_alert: true
            });
        }
    }
}

export async function getUserRefundsList(telegramId) {
    try {
        if (!refundService) {
            throw new Error('Refund service not initialized');
        }
        return await refundService.getUserRefunds(telegramId);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤:', error);
        throw error;
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –≤–æ–∑–≤—Ä–∞—Ç–∞
export async function getRefundDetailsForUser(refundId, telegramId) {
    try {
        if (!refundService) {
            throw new Error('Refund service not initialized');
        }
        return await refundService.getRefundDetails(refundId, telegramId);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –≤–æ–∑–≤—Ä–∞—Ç–∞:', error);
        throw error;
    }
}

export function setupRefundHandlers() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ñ–æ—Ä–º–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç" –≤ –±–∏–ª–µ—Ç–µ
    bot.on('callback_query', async (callbackQuery) => {
        if (callbackQuery.data.startsWith('refund_ticket_')) {
            await handleRefundTicket(callbackQuery);
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    bot.on('callback_query', async (callbackQuery) => {
        if (callbackQuery.data.startsWith('confirm_refund_')) {
            await confirmRefundRequest(callbackQuery);
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤–æ–∑–≤—Ä–∞—Ç–∞
    bot.on('callback_query', async (callbackQuery) => {
        if (callbackQuery.data === 'cancel_refund') {
            await cancelRefundRequest(callbackQuery);
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —à–∞–≥–æ–≤ –≤–æ–∑–≤—Ä–∞—Ç–∞
    bot.on('message', async (msg) => {
        if (msg.text && userStates[msg.chat.id]?.refund) {
            await processRefundStep(msg);
        }
    });
}