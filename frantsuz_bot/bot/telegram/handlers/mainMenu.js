import { bot } from '../botInstance.js';
import { User } from '../../models/User.js';

// –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–Ω—é
const menuShown = new Set();

// –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function ensureUserRegistered(msgOrCallback) {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback_query
    const chatId = msgOrCallback.chat?.id || msgOrCallback.message?.chat?.id;
    const user = msgOrCallback.from || msgOrCallback;
    
    if (!chatId || !user?.id) {
        console.error('Invalid message structure:', msgOrCallback);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è');
    }

    const result = await User.findOrCreateFromTelegram(user);
    if (!result?.user) throw new Error('User creation failed');

    console.log(result.user, 'result')
    return result.user;
}

const menuController = {
    showMainMenu: async (chatId, isAdmin = false) => {
        if (menuShown.has(chatId)) return;
        menuShown.add(chatId);

        try {
            const menuButtons = [
                [
                    { text: 'üçΩÔ∏è –ú–µ–Ω—é', web_app: { url: process.env.WEB_APP_URL_MENU } },
                    { text: 'üéØ –ë–∏–ª—å—è—Ä–¥', web_app: { url: process.env.WEB_APP_URL_BILLARD } },
                ],
                [
                    { text: 'üíø –î–∏—Å–∫–æ-–±–∞—Ä', web_app: { url: process.env.WEB_APP_URL_dISCO } },
                    { text: 'üé§ –ö–∞—Ä–∞–æ–∫–µ', web_app: { url: process.env.WEB_APP_URL_CARAOKE } }
                ],
                [
                    { text: 'üõãÔ∏è –õ–∞—É–Ω–∂ –∑–æ–Ω–∞', web_app: { url: process.env.WEB_APP_URL_LAUNZH } },
                    { text: 'üéÆ Playstation', web_app: { url: process.env.WEB_APP_URL_PLAYSTATIONS } }
                ],
                [
                    { text: 'üé≤ –ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã', web_app: { url: process.env.WEB_APP_URL_TABLEPLAY } },
                    { text: 'üìÖ –ê—Ñ–∏—à–∞', web_app: { url: process.env.WEB_APP_URL_AFISHA } },
                ],
                [
                    { text: 'üõéÔ∏è –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', web_app: { url: process.env.WEB_APP_URL_RESERVE } },
                    { text: 'üéüÔ∏è –ë–∏–ª–µ—Ç—ã', callback_data: 'show_tickets' }
                ],
                [
                    { text: 'üé≠ –°–æ–±—ã—Ç–∏—è —Å —Å–∞–π—Ç–∞', callback_data: 'website_events_list' },
                    { text: 'üí≥ –û–ø–ª–∞—Ç–∞', callback_data: 'pay' }
                ],
                [
                    { text: 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã', callback_data: 'contacts' },
                    { text: 'üìù –ü—Ä–∞–≤–∏–ª–∞ –æ–ø–ª–∞—Ç—ã', callback_data: 'pay_rules' }
                ],
                [
                    { text: 'üìù –ü—Ä–∞–≤–∏–ª–∞ –æ–ø–ª–∞—Ç—ã', callback_data: 'pay_rules' },
                    { text: '‚Ü©Ô∏è –ü—Ä–∞–≤–∏–ª–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞', callback_data: 'refund' }
                ],
                [
                    { text: 'üîÑ –û—Ñ–æ—Ä–º–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç', callback_data: 'create_refund' },
                    { text: 'üéüÔ∏è –ú–æ–∏ –±–∏–ª–µ—Ç—ã', callback_data: 'my_tickets'}
                ]
            ];

            if (isAdmin) {
                menuButtons.push([
                    { text: 'üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–ª–µ—Ç–∞–º–∏', callback_data: 'admin_tickets' },
                    { text: '‚öôÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_panel' },
                    { text: 'üîô –í–æ–∑–≤—Ä–∞—Ç—ã', callback_data: 'admin_refund' }
                ]);
            }

            await bot.sendMessage(chatId, 'üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:', {
                reply_markup: { inline_keyboard: menuButtons }
            });

            setTimeout(() => menuShown.delete(chatId), 5000);
        } catch (error) {
            console.error('Menu display error:', error);
            menuShown.delete(chatId);
        }
    },

    handleStartCommand: async (msg) => {
        const chatId = msg.chat?.id;
        
        try {
            const dbUser = await ensureUserRegistered(msg);
            
            const welcomeText = `
            üé≠ ${dbUser.created_at.getTime() > Date.now() - 60000 ? '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å' : '–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º'}, ${dbUser.first_name} –≤ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å "–§—Ä–∞–Ω—Ü—É–∑"!

            ‚ú® ${dbUser.created_at.getTime() > Date.now() - 60000 ? '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!' : '–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞!'}

            üéâ –í–∞—à –∏–¥–µ–∞–ª—å–Ω—ã–π –≤–µ—á–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–¥–µ—Å—å:
            ‚Ä¢ üéØ –ë–∏–ª—å—è—Ä–¥ –¥–ª—è –∏—Å—Ç–∏–Ω–Ω—ã—Ö —Ü–µ–Ω–∏—Ç–µ–ª–µ–π
            ‚Ä¢ üé§ –ö–∞—Ä–∞–æ–∫–µ —Å –æ–±—à–∏—Ä–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π –ø–µ—Å–µ–Ω
            ‚Ä¢ üéÆ –ò–≥—Ä–æ–≤—ã–µ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏ –¥–ª—è –¥—Ä—É–∂–µ—Å–∫–∏—Ö –±–∞—Ç–∞–ª–∏–π
            ‚Ä¢ üé≤ –ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ –ª—é–±–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            ‚Ä¢ üíø –î–∏—Å–∫–æ-–±–∞—Ä —Å –ª—É—á—à–∏–º–∏ DJ
            ‚Ä¢ üõãÔ∏è –õ–∞—É–Ω–∂ –∑–æ–Ω–∞ –¥–ª—è —É—é—Ç–Ω—ã—Ö –ø–æ—Å–∏–¥–µ–ª–æ–∫
            ‚Ä¢ üçΩÔ∏è –ë–∞—Ä –∏ –∫—É—Ö–Ω—è —Å –∏–∑—ã—Å–∫–∞–Ω–Ω—ã–º–∏ –±–ª—é–¥–∞–º–∏

            üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:
            `;

            await bot.sendMessage(chatId, welcomeText);
            await menuController.showMainMenu(chatId, dbUser.is_admin);

        } catch (error) {
            console.error('Start command error:', error);
            await bot.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    },

    setupBotCommands: async () => {
        const commands = [
            { command: '/start', description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' },
            { command: '/menu', description: '–ú–µ–Ω—é –±–∞—Ä–∞ –∏ –∫—É—Ö–Ω–∏' },
            { command: '/billiard', description: '–ë–∏–ª—å—è—Ä–¥' },
            { command: '/karaoke', description: '–ö–∞—Ä–∞–æ–∫–µ' },
            { command: '/disco', description: '–î–∏—Å–∫–æ-–±–∞—Ä' },
            { command: '/lounge', description: '–õ–∞—É–Ω–∂ –∑–æ–Ω–∞' },
            { command: '/playstation', description: '–ò–≥—Ä–æ–≤—ã–µ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏' },
            { command: '/games', description: '–ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã' },
            { command: '/show_tickets', description: '–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã' },
            { command: '/events', description: '–ê—Ñ–∏—à–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π' },
            { command: '/pay', description: '–û–ø–ª–∞—Ç–∞' },
            { command: '/pay_rules', description: '–ü—Ä–∞–≤–∏–ª–∞ –æ–ø–ª–∞—Ç—ã' },
            { command: '/refund', description: '–ü—Ä–∞–≤–∏–ª–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞' },
            { command: '/create_refund', description: '–û—Ñ–æ—Ä–º–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç' },
            { command: '/my_tickets', description: '–ú–æ–∏ –±–∏–ª–µ—Ç—ã' },
            { command: '/reserve', description: '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ' },
            { command: '/contacts', description: '–ö–æ–Ω—Ç–∞–∫—Ç—ã' }
        ];

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
        commands.forEach(cmd => {
            if (cmd.command !== '/start') {
                bot.onText(new RegExp(`^${cmd.command}$`), async (msg) => {
                    try {
                        const dbUser = await ensureUserRegistered(msg);
                        await menuController.showMainMenu(msg.chat.id, dbUser.is_admin);
                    } catch (error) {
                        console.error(`Command ${cmd.command} error:`, error);
                        await bot.sendMessage(msg.chat.id, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                    }
                });
            }
        });

        try {
            await bot.setMyCommands(commands);
            return console.log('–ö–æ–º–∞–Ω–¥–Ω–æ–µ –º–µ–Ω—é —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ');
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥:', err);
            throw err;
        }
    },

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫
    setupInlineHandlers: () => {
        const callbackQueries = [
            'show_tickets', 'pay', 'contacts', 'pay_rules', 'refund', 'create_refund',
            'admin_tickets', 'my_tickets', 'admin_panel'
        ];

        callbackQueries.forEach(query => {
            bot.on('callback_query', async (callbackQuery) => {
                if (callbackQuery.data === query) {
                    try {
                        const dbUser = await ensureUserRegistered({
                            from: callbackQuery.from,
                            chat: callbackQuery.message.chat
                        });
                        await menuController.showMainMenu(callbackQuery.message.chat.id, dbUser.is_admin);
                    } catch (error) {
                        console.error(`Callback ${query} error:`, error);
                        await bot.answerCallbackQuery(callbackQuery.id, {
                            text: '‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞',
                            show_alert: true
                        });
                    }
                }
            });
        });
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
menuController.setupBotCommands();
menuController.setupInlineHandlers();

export const { showMainMenu, handleStartCommand, setupBotCommands } = menuController;
export default menuController;