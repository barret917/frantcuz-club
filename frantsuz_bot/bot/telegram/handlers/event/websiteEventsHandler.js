import { bot } from '../../botInstance.js';
import WebsiteApiService from '../../../services/websiteApiService.js';
import WebsitePaykeeperService from '../../../services/websitePaykeeperService.js';
import { userStates } from '../../../state.js';

const websiteApiService = new WebsiteApiService();
const websitePaykeeperService = new WebsitePaykeeperService();

// –ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π —Å —Å–∞–π—Ç–∞
export const showWebsiteEventsList = async (chatId) => {
    try {
        const events = await websiteApiService.getEvents();
        
        if (!events || events.length === 0) {
            return await bot.sendMessage(
                chatId,
                'üì≠ <b>–°–æ–±—ã—Ç–∏–π –ø–æ–∫–∞ –Ω–µ—Ç</b>\n\n' +
                '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.',
                { parse_mode: 'HTML' }
            );
        }

        const message = 'üé≠ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:</b>\n\n' +
            `–í—Å–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: <b>${events.length}</b>`;

        const keyboard = events.map(event => [{
            text: `${event.name} - ${new Date(event.startsAt).toLocaleDateString('ru-RU')}`,
            callback_data: `website_event_${event.id}`
        }]);

        keyboard.push([{ text: 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data: 'back_to_main_menu' }]);

        await bot.sendMessage(chatId, message, {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: keyboard
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–æ–±—ã—Ç–∏–π:', error);
        await bot.sendMessage(
            chatId,
            '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        );
    }
};

// –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π —Å–æ–±—ã—Ç–∏—è
export const showWebsiteEventDetails = async (chatId, eventId) => {
    try {
        const events = await websiteApiService.getEvents();
        const event = events.find(e => e.id === parseInt(eventId));
        
        if (!event) {
            return await bot.sendMessage(chatId, '‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }

        const eventDate = new Date(event.startsAt);
        const formattedDate = eventDate.toLocaleDateString('ru-RU', {
            day: 'numeric',
            month: 'long',
            year: 'numeric',
            weekday: 'long'
        });
        const formattedTime = eventDate.toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit'
        });

        const message = 
            `üé≠ <b>${event.name}</b>\n\n` +
            `üìÖ <b>–î–∞—Ç–∞:</b> ${formattedDate} –≤ ${formattedTime}\n` +
            `üìç <b>–ú–µ—Å—Ç–æ:</b> ${event.hall.name}\n` +
            `üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n${event.description || '–Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n` +
            `üí∞ <b>–¶–µ–Ω—ã –ø–æ –∑–æ–Ω–∞–º:</b>\n` +
            event.eventZonePrices.map(price => 
                `‚Ä¢ ${price.zone.name}: ${price.pricePerSeat} ‚ÇΩ –∑–∞ –º–µ—Å—Ç–æ`
            ).join('\n');

        const keyboard = [
            [{ text: 'üé´ –ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã', callback_data: `website_buy_tickets_${event.id}` }],
            [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —Å–æ–±—ã—Ç–∏—è–º', callback_data: 'website_events_list' }],
            [{ text: 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data: 'back_to_main_menu' }]
        ];

        await bot.sendMessage(chatId, message, {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: keyboard
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π —Å–æ–±—ã—Ç–∏—è:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π —Å–æ–±—ã—Ç–∏—è');
    }
};

// –ü–æ–∫–∞–∑ –∑–æ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–æ–≤
export const showZonesForPurchase = async (chatId, eventId) => {
    try {
        const events = await websiteApiService.getEvents();
        const event = events.find(e => e.id === parseInt(eventId));
        
        if (!event) {
            return await bot.sendMessage(chatId, '‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }

        const message = `üé´ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∑–æ–Ω—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–æ–≤</b>\n\n` +
            `–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: <b>${event.name}</b>`;

        const keyboard = [];

        for (const zonePrice of event.eventZonePrices) {
            try {
                const availability = await websiteApiService.getZoneAvailability(eventId, zonePrice.zoneId);
                const zoneText = `${zonePrice.zone.name} - ${zonePrice.pricePerSeat} ‚ÇΩ (${availability.availableSeats} –º–µ—Å—Ç)`;
                const callbackData = `website_select_zone_${eventId}_${zonePrice.zoneId}`;
                
                keyboard.push([{ text: zoneText, callback_data: callbackData }]);
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∑–æ–Ω—ã ${zonePrice.zoneId}:`, error);
            }
        }

        keyboard.push(
            [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —Å–æ–±—ã—Ç–∏—é', callback_data: `website_event_${eventId}` }],
            [{ text: 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data: 'back_to_main_menu' }]
        );

        await bot.sendMessage(chatId, message, {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: keyboard
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∑–æ–Ω:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–æ–Ω');
    }
};

// –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–æ–≤
export const startTicketPurchase = async (chatId, eventId, zoneId) => {
    try {
        const events = await websiteApiService.getEvents();
        const event = events.find(e => e.id === parseInt(eventId));
        const zonePrice = event.eventZonePrices.find(zp => zp.zoneId === parseInt(zoneId));
        
        if (!event || !zonePrice) {
            return await bot.sendMessage(chatId, '‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }

        const availability = await websiteApiService.getZoneAvailability(eventId, zoneId);
        
        if (availability.availableSeats <= 0) {
            return await bot.sendMessage(
                chatId,
                '‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ —ç—Ç–æ–π –∑–æ–Ω–µ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç'
            );
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        userStates[chatId] = {
            ...userStates[chatId],
            purchasingTickets: {
                eventId: parseInt(eventId),
                zoneId: parseInt(zoneId),
                eventName: event.name,
                zoneName: zonePrice.zone.name,
                pricePerSeat: zonePrice.pricePerSeat,
                availableSeats: availability.availableSeats
            },
            currentStep: 'enter_customer_name'
        };

        const message = 
            `üé´ <b>–ü–æ–∫—É–ø–∫–∞ –±–∏–ª–µ—Ç–æ–≤</b>\n\n` +
            `–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: <b>${event.name}</b>\n` +
            `–ó–æ–Ω–∞: <b>${zonePrice.zone.name}</b>\n` +
            `–¶–µ–Ω–∞ –∑–∞ –º–µ—Å—Ç–æ: <b>${zonePrice.pricePerSeat} ‚ÇΩ</b>\n` +
            `–î–æ—Å—Ç—É–ø–Ω–æ –º–µ—Å—Ç: <b>${availability.availableSeats}</b>\n\n` +
            `–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:`;

        await bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–æ–≤:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–æ–≤');
    }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞
export const handleCustomerNameInput = async (chatId, name) => {
    try {
        const state = userStates[chatId];
        if (!state.purchasingTickets) {
            return await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∫—É–ø–∫–∏');
        }

        state.purchasingTickets.customerName = name;
        state.currentStep = 'enter_customer_phone';

        await bot.sendMessage(
            chatId,
            'üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:'
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–º–µ–Ω–∏:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–º–µ–Ω–∏');
    }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞
export const handleCustomerPhoneInput = async (chatId, phone) => {
    try {
        const state = userStates[chatId];
        if (!state.purchasingTickets) {
            return await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∫—É–ø–∫–∏');
        }

        state.purchasingTickets.customerPhone = phone;
        state.currentStep = 'enter_customer_email';

        const message = 
            `üìß <b>Email –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n` +
            `–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ QR-–∫–æ–¥–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ email, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email –∞–¥—Ä–µ—Å:\n\n` +
            `<i>–ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –Ω–∞–∂–∞–≤ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"</i>`;

        const keyboard = [
            [{ text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'website_skip_email' }]
        ];

        await bot.sendMessage(chatId, message, { 
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: keyboard
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
    }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ email –∫–ª–∏–µ–Ω—Ç–∞
export const handleCustomerEmailInput = async (chatId, email) => {
    try {
        const state = userStates[chatId];
        if (!state.purchasingTickets) {
            return await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∫—É–ø–∫–∏');
        }

        // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(email)) {
            return await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
        }

        state.purchasingTickets.customerEmail = email;
        state.currentStep = 'enter_seats_count';

        const message = 
            `üìä <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç</b>\n\n` +
            `–î–æ—Å—Ç—É–ø–Ω–æ: <b>${state.purchasingTickets.availableSeats}</b> –º–µ—Å—Ç\n` +
            `–¶–µ–Ω–∞ –∑–∞ –º–µ—Å—Ç–æ: <b>${state.purchasingTickets.pricePerSeat} ‚ÇΩ</b>\n\n` +
            `–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç (–æ—Ç 1 –¥–æ ${state.purchasingTickets.availableSeats}):`;

        await bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ email:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ email');
    }
};

// –ü—Ä–æ–ø—É—Å–∫ –≤–≤–æ–¥–∞ email
export const skipEmailInput = async (chatId) => {
    try {
        const state = userStates[chatId];
        if (!state.purchasingTickets) {
            return await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∫—É–ø–∫–∏');
        }

        state.currentStep = 'enter_seats_count';

        const message = 
            `üìä <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç</b>\n\n` +
            `–î–æ—Å—Ç—É–ø–Ω–æ: <b>${state.purchasingTickets.availableSeats}</b> –º–µ—Å—Ç\n` +
            `–¶–µ–Ω–∞ –∑–∞ –º–µ—Å—Ç–æ: <b>${state.purchasingTickets.pricePerSeat} ‚ÇΩ</b>\n\n` +
            `–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç (–æ—Ç 1 –¥–æ ${state.purchasingTickets.availableSeats}):`;

        await bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ email:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏');
    }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–µ—Å—Ç
export const handleSeatsCountInput = async (chatId, seatsCount) => {
    try {
        const state = userStates[chatId];
        if (!state.purchasingTickets) {
            return await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∫—É–ø–∫–∏');
        }

        const count = parseInt(seatsCount);
        if (count < 1 || count > state.purchasingTickets.availableSeats) {
            return await bot.sendMessage(
                chatId,
                `‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ ${state.purchasingTickets.availableSeats}`
            );
        }

        state.purchasingTickets.seatsCount = count;
        state.currentStep = 'confirm_purchase';

        const totalAmount = count * state.purchasingTickets.pricePerSeat;
        const message = 
            `üé´ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏</b>\n\n` +
            `–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: <b>${state.purchasingTickets.eventName}</b>\n` +
            `–ó–æ–Ω–∞: <b>${state.purchasingTickets.zoneName}</b>\n` +
            `–ò–º—è: <b>${state.purchasingTickets.customerName}</b>\n` +
            `–¢–µ–ª–µ—Ñ–æ–Ω: <b>${state.purchasingTickets.customerPhone}</b>\n` +
            `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç: <b>${count}</b>\n` +
            `–¶–µ–Ω–∞ –∑–∞ –º–µ—Å—Ç–æ: <b>${state.purchasingTickets.pricePerSeat} ‚ÇΩ</b>\n` +
            `–û–±—â–∞—è —Å—É–º–º–∞: <b>${totalAmount} ‚ÇΩ</b>\n\n` +
            `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É:`;

        const keyboard = [
            [
                { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: 'website_confirm_purchase' },
                { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'website_cancel_purchase' }
            ]
        ];

        await bot.sendMessage(chatId, message, {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: keyboard
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–µ—Å—Ç:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–µ—Å—Ç');
    }
};

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–æ–≤
export const confirmTicketPurchase = async (chatId) => {
    try {
        const state = userStates[chatId];
        if (!state.purchasingTickets) {
            return await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∫—É–ø–∫–∏');
        }

        const ticketData = {
            eventId: state.purchasingTickets.eventId,
            zoneId: state.purchasingTickets.zoneId,
            customerName: state.purchasingTickets.customerName,
            customerPhone: state.purchasingTickets.customerPhone,
            seatsCount: state.purchasingTickets.seatsCount,
            telegramUserId: chatId.toString(),
            customerEmail: state.purchasingTickets.customerEmail
        };

        const result = await websiteApiService.purchaseTickets(ticketData);

        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        delete userStates[chatId].purchasingTickets;
        delete userStates[chatId].currentStep;

        const message = 
            `üéâ <b>–ë–∏–ª–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω—ã!</b>\n\n` +
            `ID –ø–æ–∫—É–ø–∫–∏: <code>${result.ticketPurchase.id}</code>\n` +
            `–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: <b>${result.ticketPurchase.eventName}</b>\n` +
            `–ó–æ–Ω–∞: <b>${result.ticketPurchase.zoneName}</b>\n` +
            `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç: <b>${result.ticketPurchase.seatsCount}</b>\n` +
            `–°—É–º–º–∞: <b>${result.ticketPurchase.totalAmount} ‚ÇΩ</b>\n\n` +
            `–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É: <b>10 –º–∏–Ω—É—Ç</b>\n` +
            `–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.`;

        const keyboard = [
            [{ text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —Å–µ–π—á–∞—Å', callback_data: `website_pay_tickets_${result.ticketPurchase.id}` }],
            [{ text: 'üìã –ú–æ–∏ –±–∏–ª–µ—Ç—ã', callback_data: 'website_my_tickets' }],
            [{ text: 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data: 'back_to_main_menu' }]
        ];

        await bot.sendMessage(chatId, message, {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: keyboard
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏:', error);
        await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–æ–≤: ${error.message}`);
    }
};

// –û—Ç–º–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–æ–≤
export const cancelTicketPurchase = async (chatId) => {
    try {
        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        delete userStates[chatId].purchasingTickets;
        delete userStates[chatId].currentStep;

        await bot.sendMessage(
            chatId,
            '‚ùå –ü–æ–∫—É–ø–∫–∞ –±–∏–ª–µ—Ç–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞',
            {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data: 'back_to_main_menu' }]
                    ]
                }
            }
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏');
    }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã –±–∏–ª–µ—Ç–æ–≤
export const handleTicketPayment = async (chatId, ticketPurchaseId) => {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∫–µ –±–∏–ª–µ—Ç–æ–≤
        const ticketInfo = await websiteApiService.getTicketPurchase(ticketPurchaseId);
        
        if (!ticketInfo) {
            return await bot.sendMessage(chatId, '‚ùå –ü–æ–∫—É–ø–∫–∞ –±–∏–ª–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }

        if (ticketInfo.status === 'paid') {
            return await bot.sendMessage(
                chatId,
                '‚úÖ –ë–∏–ª–µ—Ç—ã —É–∂–µ –æ–ø–ª–∞—á–µ–Ω—ã!'
            );
        }

        // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ PayKeeper
        const payment = await websitePaykeeperService.createPaymentForTickets(ticketPurchaseId);
        
        if (!payment.success) {
            return await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞');
        }

        const message = 
            `üí≥ <b>–û–ø–ª–∞—Ç–∞ –±–∏–ª–µ—Ç–æ–≤</b>\n\n` +
            `–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: <b>${ticketInfo.eventName}</b>\n` +
            `–ó–æ–Ω–∞: <b>${ticketInfo.zoneName}</b>\n` +
            `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç: <b>${ticketInfo.seatsCount}</b>\n` +
            `–°—É–º–º–∞: <b>${ticketInfo.totalAmount} ‚ÇΩ</b>\n\n` +
            `–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ:`;

        const keyboard = [
            [{ text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', url: payment.paymentUrl }],
            [{ text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å', callback_data: `website_check_payment_${payment.paymentId}_${ticketPurchaseId}` }],
            [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'website_cancel_payment' }],
            [{ text: 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data: 'back_to_main_menu' }]
        ];

        await bot.sendMessage(chatId, message, {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: keyboard
            }
        });

        // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
        websitePaykeeperService.startPaymentMonitoring(
            payment.paymentId,
            ticketPurchaseId,
            async (successStatus) => {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
                const successMessage = 
                    `üéâ <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n` +
                    `–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: <b>${ticketInfo.eventName}</b>\n` +
                    `–ó–æ–Ω–∞: <b>${ticketInfo.zoneName}</b>\n` +
                    `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç: <b>${ticketInfo.seatsCount}</b>\n` +
                    `–°—É–º–º–∞: <b>${ticketInfo.totalAmount} ‚ÇΩ</b>\n\n` +
                    `–í–∞—à–∏ –±–∏–ª–µ—Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –∏ –æ–ø–ª–∞—á–µ–Ω—ã!`;

                const successKeyboard = [
                    [{ text: 'üìã –ú–æ–∏ –±–∏–ª–µ—Ç—ã', callback_data: 'website_my_tickets' }],
                    [{ text: 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data: 'back_to_main_menu' }]
                ];

                await bot.sendMessage(chatId, successMessage, {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: successKeyboard
                    }
                });

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥
                try {
                    const qrData = await websiteApiService.getTicketWithQR(ticketPurchaseId);
                    if (qrData.success && qrData.qrCode) {
                        const qrMessage = 
                            `üé´ <b>–í–∞—à QR-–∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞</b>\n\n` +
                            `–ü–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç QR-–∫–æ–¥ –Ω–∞ –≤—Ö–æ–¥–µ –≤ –∫–ª—É–±.\n` +
                            `ID –±–∏–ª–µ—Ç–∞: <code>${qrData.ticket.id}</code>`;

                        await bot.sendPhoto(chatId, qrData.qrCode, {
                            caption: qrMessage,
                            parse_mode: 'HTML'
                        });
                    }
                } catch (qrError) {
                    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ QR-–∫–æ–¥–∞:', qrError);
                    await bot.sendMessage(chatId, '‚ö†Ô∏è QR-–∫–æ–¥ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–∑–∂–µ');
                }
            },
            async (error) => {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –æ–ø–ª–∞—Ç—ã
                const errorMessage = 
                    `‚ùå <b>–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã</b>\n\n` +
                    `–ü–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω: ${error.message}\n\n` +
                    `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.`;

                const errorKeyboard = [
                    [{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: `website_pay_tickets_${ticketPurchaseId}` }],
                    [{ text: 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data: 'back_to_main_menu' }]
                ];

                await bot.sendMessage(chatId, errorMessage, {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: errorKeyboard
                    }
                });
            }
        );

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã:', error);
        await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã: ${error.message}`);
    }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
export const checkPaymentStatus = async (chatId, paymentId, ticketPurchaseId) => {
    try {
        const status = await websitePaykeeperService.checkPaymentStatus(paymentId);
        
        let message = '';
        let keyboard = [];

        switch (status.status) {
            case 'paid':
                message = '‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!';
                keyboard = [
                    [{ text: 'üìã –ú–æ–∏ –±–∏–ª–µ—Ç—ã', callback_data: 'website_my_tickets' }],
                    [{ text: 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data: 'back_to_main_menu' }]
                ];
                break;
            case 'created':
                message = '‚è≥ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω, –æ–∂–∏–¥–∞–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞...';
                keyboard = [
                    [{ text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞', callback_data: `website_check_payment_${paymentId}_${ticketPurchaseId}` }],
                    [{ text: 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data: 'back_to_main_menu' }]
                ];
                break;
            case 'canceled':
                message = '‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω';
                keyboard = [
                    [{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: `website_pay_tickets_${ticketPurchaseId}` }],
                    [{ text: 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data: 'back_to_main_menu' }]
                ];
                break;
            default:
                message = `üìä –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: ${status.status}`;
                keyboard = [
                    [{ text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞', callback_data: `website_check_payment_${paymentId}_${ticketPurchaseId}` }],
                    [{ text: 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data: 'back_to_main_menu' }]
                ];
        }

        await bot.sendMessage(chatId, message, {
            reply_markup: {
                inline_keyboard: keyboard
            }
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞:', error);
        await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: ${error.message}`);
    }
};

// –ü–æ–∫–∞–∑ –±–∏–ª–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const showUserTickets = async (chatId) => {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±–∏–ª–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userTickets = await websiteApiService.getUserTickets(chatId.toString());
        
        if (!userTickets || userTickets.length === 0) {
            return await bot.sendMessage(
                chatId,
                'üì≠ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±–∏–ª–µ—Ç–æ–≤</b>\n\n' +
                '–ö—É–ø–∏—Ç–µ –±–∏–ª–µ—Ç—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª "üé≠ –°–æ–±—ã—Ç–∏—è —Å —Å–∞–π—Ç–∞"',
                { 
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üé≠ –°–æ–±—ã—Ç–∏—è —Å —Å–∞–π—Ç–∞', callback_data: 'website_events_list' }],
                            [{ text: 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data: 'back_to_main_menu' }]
                        ]
                    }
                }
            );
        }

        const message = `üìã <b>–í–∞—à–∏ –±–∏–ª–µ—Ç—ã</b>\n\n` +
            `–í—Å–µ–≥–æ –±–∏–ª–µ—Ç–æ–≤: <b>${userTickets.length}</b>`;

        const keyboard = [];

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –±–∏–ª–µ—Ç—ã –ø–æ —Å–æ–±—ã—Ç–∏—è–º
        const ticketsByEvent = {};
        userTickets.forEach(ticket => {
            if (!ticketsByEvent[ticket.eventName]) {
                ticketsByEvent[ticket.eventName] = [];
            }
            ticketsByEvent[ticket.eventName].push(ticket);
        });

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
        Object.keys(ticketsByEvent).forEach(eventName => {
            const eventTickets = ticketsByEvent[eventName];
            const totalSeats = eventTickets.reduce((sum, ticket) => sum + ticket.seatsCount, 0);
            const totalAmount = eventTickets.reduce((sum, ticket) => sum + ticket.totalAmount, 0);
            const status = eventTickets[0].status; // –°—Ç–∞—Ç—É—Å –ø–µ—Ä–≤–æ–≥–æ –±–∏–ª–µ—Ç–∞ (–≤—Å–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏)
            
            const statusEmoji = status === 'paid' ? '‚úÖ' : status === 'reserved' ? '‚è≥' : '‚ùå';
            const buttonText = `${statusEmoji} ${eventName} (${totalSeats} –º–µ—Å—Ç, ${totalAmount} ‚ÇΩ)`;
            
            keyboard.push([{ 
                text: buttonText, 
                callback_data: `website_ticket_details_${eventTickets[0].id}` 
            }]);
        });

        keyboard.push(
            [{ text: 'üé≠ –°–æ–±—ã—Ç–∏—è —Å —Å–∞–π—Ç–∞', callback_data: 'website_events_list' }],
            [{ text: 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data: 'back_to_main_menu' }]
        );

        await bot.sendMessage(chatId, message, {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: keyboard
            }
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –±–∏–ª–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∏–ª–µ—Ç–æ–≤');
    }
};

// –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –±–∏–ª–µ—Ç–∞
export const showTicketDetails = async (chatId, ticketId) => {
    try {
        const ticketInfo = await websiteApiService.getTicketPurchase(ticketId);
        
        if (!ticketInfo) {
            return await bot.sendMessage(chatId, '‚ùå –ë–∏–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        const statusEmoji = ticketInfo.status === 'paid' ? '‚úÖ' : ticketInfo.status === 'reserved' ? '‚è≥' : '‚ùå';
        const statusText = ticketInfo.status === 'paid' ? '–û–ø–ª–∞—á–µ–Ω' : 
                          ticketInfo.status === 'reserved' ? '–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω' : '–û—Ç–º–µ–Ω–µ–Ω';

        const message = 
            `${statusEmoji} <b>–î–µ—Ç–∞–ª–∏ –±–∏–ª–µ—Ç–∞</b>\n\n` +
            `ID: <code>${ticketInfo.id}</code>\n` +
            `–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: <b>${ticketInfo.eventName}</b>\n` +
            `–ó–æ–Ω–∞: <b>${ticketInfo.zoneName}</b>\n` +
            `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç: <b>${ticketInfo.seatsCount}</b>\n` +
            `–°—É–º–º–∞: <b>${ticketInfo.totalAmount} ‚ÇΩ</b>\n` +
            `–°—Ç–∞—Ç—É—Å: <b>${statusText}</b>\n` +
            `–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: <b>${new Date(ticketInfo.createdAt).toLocaleDateString('ru-RU')}</b>`;

        const keyboard = [];

        if (ticketInfo.status === 'reserved') {
            keyboard.push([{ text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', callback_data: `website_pay_tickets_${ticketInfo.id}` }]);
        }

        keyboard.push(
            [{ text: 'üìã –ú–æ–∏ –±–∏–ª–µ—Ç—ã', callback_data: 'website_my_tickets' }],
            [{ text: 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data: 'back_to_main_menu' }]
        );

        await bot.sendMessage(chatId, message, {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: keyboard
            }
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥ –µ—Å–ª–∏ –±–∏–ª–µ—Ç –æ–ø–ª–∞—á–µ–Ω
        if (ticketInfo.status === 'paid') {
            try {
                const qrData = await websiteApiService.getTicketWithQR(ticketId);
                if (qrData.success && qrData.qrCode) {
                    const qrMessage = 
                        `üé´ <b>QR-–∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞</b>\n\n` +
                        `–ü–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç QR-–∫–æ–¥ –Ω–∞ –≤—Ö–æ–¥–µ –≤ –∫–ª—É–±.\n` +
                        `ID –±–∏–ª–µ—Ç–∞: <code>${qrData.ticket.id}</code>`;

                    await bot.sendPhoto(chatId, qrData.qrCode, {
                        caption: qrMessage,
                        parse_mode: 'HTML'
                    });
                }
            } catch (qrError) {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ QR-–∫–æ–¥–∞:', qrError);
                await bot.sendMessage(chatId, '‚ö†Ô∏è QR-–∫–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            }
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π –±–∏–ª–µ—Ç–∞:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –±–∏–ª–µ—Ç–∞');
    }
}; 