"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.zonesController = void 0;
const prisma_1 = require("../prisma");
exports.zonesController = {
    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–æ–Ω—ã
    async getZones(req, res) {
        try {
            const zones = await prisma_1.prisma.zone.findMany({
                orderBy: { id: 'asc' }
            });
            res.json({
                success: true,
                data: zones
            });
        }
        catch (error) {
            console.error('Error getting zones:', error);
            res.status(500).json({
                success: false,
                message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–æ–Ω'
            });
        }
    },
    // –ü–æ–ª—É—á–∏—Ç—å –∑–æ–Ω—É –ø–æ ID
    async getZoneById(req, res) {
        try {
            const { id } = req.params;
            const zone = await prisma_1.prisma.zone.findUnique({
                where: { id: Number(id) },
                include: {
                    items: {
                        where: { isActive: true },
                        orderBy: [
                            { floor: 'asc' },
                            { label: 'asc' }
                        ]
                    }
                }
            });
            if (!zone) {
                return res.status(404).json({
                    success: false,
                    message: '–ó–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
                });
            }
            res.json({
                success: true,
                data: zone
            });
        }
        catch (error) {
            console.error('Error getting zone by ID:', error);
            res.status(500).json({
                success: false,
                message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–æ–Ω—ã'
            });
        }
    },
    // –ü–æ–ª—É—á–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –∑–æ–Ω—ã –ø–æ —Ç–∏–ø—É
    async getZoneItemsByType(req, res) {
        try {
            const { zoneType } = req.params;
            const items = await prisma_1.prisma.zoneItem.findMany({
                where: {
                    zone: {
                        type: zoneType
                    },
                    isActive: true
                },
                include: {
                    zone: true
                },
                orderBy: [
                    { floor: 'asc' },
                    { label: 'asc' }
                ]
            });
            // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            const itemsWithStatus = items.map((item) => ({
                ...item,
                isAvailable: true,
                activeReservations: 0
            }));
            res.json({
                success: true,
                data: itemsWithStatus
            });
        }
        catch (error) {
            console.error('Error getting zone items by type:', error);
            res.status(500).json({
                success: false,
                message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–æ–Ω—ã'
            });
        }
    },
    // –ü–æ–ª—É—á–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–æ–Ω—ã –ø–æ ID
    async getZoneItems(req, res) {
        try {
            const { zoneId } = req.params;
            console.log('üîç –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∑–æ–Ω—ã ID:', zoneId);
            const items = await prisma_1.prisma.zoneItem.findMany({
                where: {
                    zoneId: Number(zoneId),
                    isActive: true
                },
                include: {
                    zone: true
                },
                orderBy: [
                    { floor: 'asc' },
                    { label: 'asc' }
                ]
            });
            console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', items.length);
            res.json({
                success: true,
                data: items
            });
        }
        catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–æ–Ω—ã:', error);
            res.status(500).json({
                success: false,
                message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–æ–Ω—ã'
            });
        }
    },
    // –û–±–Ω–æ–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –∑–æ–Ω—ã
    async updateZoneItem(req, res) {
        try {
            const { id } = req.params;
            const updateData = req.body;
            const zoneItem = await prisma_1.prisma.zoneItem.update({
                where: { id: Number(id) },
                data: updateData,
                include: {
                    zone: true
                }
            });
            res.json({
                success: true,
                data: zoneItem
            });
        }
        catch (error) {
            console.error('Error updating zone item:', error);
            res.status(500).json({
                success: false,
                message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –∑–æ–Ω—ã'
            });
        }
    },
    // –£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –∑–æ–Ω—ã
    async deleteZoneItem(req, res) {
        try {
            const { id } = req.params;
            await prisma_1.prisma.zoneItem.delete({
                where: { id: Number(id) }
            });
            res.json({
                success: true,
                message: '–≠–ª–µ–º–µ–Ω—Ç –∑–æ–Ω—ã —É–¥–∞–ª–µ–Ω'
            });
        }
        catch (error) {
            console.error('Error deleting zone item:', error);
            res.status(500).json({
                success: false,
                message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –∑–æ–Ω—ã'
            });
        }
    },
    // –°–æ–∑–¥–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    async createReservation(req, res) {
        try {
            const { zoneItemId, userName, phone, date, time, duration, guestsCount, seatsCount, comment } = req.body;
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if (!zoneItemId || !userName || !phone || !date || !time || !duration) {
                return res.status(400).json({
                    success: false,
                    message: '–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã'
                });
            }
            // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –∑–æ–Ω—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            const zoneItem = await prisma_1.prisma.zoneItem.findUnique({
                where: { id: Number(zoneItemId) },
                include: { zone: true }
            });
            if (!zoneItem) {
                return res.status(404).json({
                    success: false,
                    message: '–≠–ª–µ–º–µ–Ω—Ç –∑–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω'
                });
            }
            if (!zoneItem.isActive) {
                return res.status(400).json({
                    success: false,
                    message: '–≠–ª–µ–º–µ–Ω—Ç –∑–æ–Ω—ã –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'
                });
            }
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            const startTime = new Date(`${date}T${time}`);
            const endTime = new Date(startTime.getTime() + duration * 60 * 1000);
            const conflictingReservations = await prisma_1.prisma.reservation.findMany({
                where: {
                    zoneItemId: Number(zoneItemId),
                    status: {
                        in: ['booked', 'arrived']
                    },
                    OR: [
                        {
                            startsAt: { lt: endTime },
                            endsAt: { gt: startTime }
                        }
                    ]
                }
            });
            if (conflictingReservations.length > 0) {
                return res.status(400).json({
                    success: false,
                    message: '–í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ'
                });
            }
            // –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            const reservation = await prisma_1.prisma.reservation.create({
                data: {
                    zoneItemId: Number(zoneItemId),
                    type: 'seating',
                    userName,
                    phone,
                    startsAt: startTime,
                    endsAt: endTime,
                    deposit: 0,
                    seatsCount: seatsCount || guestsCount,
                    guestsCount,
                    duration,
                    comment
                }
            });
            res.json({
                success: true,
                message: '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ',
                data: reservation
            });
        }
        catch (error) {
            console.error('Error creating reservation:', error);
            res.status(500).json({
                success: false,
                message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è'
            });
        }
    },
    // –ü–æ–ª—É—á–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –∑–æ–Ω—ã
    async getZoneItemReservations(req, res) {
        try {
            const { zoneItemId } = req.params;
            const { date, status } = req.query;
            const where = {
                zoneItemId: Number(zoneItemId)
            };
            if (date) {
                const startDate = new Date(date);
                const endDate = new Date(startDate);
                endDate.setDate(endDate.getDate() + 1);
                where.startsAt = {
                    gte: startDate,
                    lt: endDate
                };
            }
            if (status) {
                where.status = status;
            }
            const reservations = await prisma_1.prisma.reservation.findMany({
                where,
                orderBy: { startsAt: 'desc' }
            });
            res.json({
                success: true,
                data: reservations
            });
        }
        catch (error) {
            console.error('Error getting zone item reservations:', error);
            res.status(500).json({
                success: false,
                message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π'
            });
        }
    },
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –∑–æ–Ω—ã
    validateZoneItem(type, data) {
        const errors = [];
        if (!data.label) {
            errors.push('–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
        }
        if (!data.x && data.x !== 0) {
            errors.push('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞');
        }
        if (!data.y && data.y !== 0) {
            errors.push('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞');
        }
        if (!data.width || data.width <= 0) {
            errors.push('–®–∏—Ä–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0');
        }
        if (!data.height || data.height <= 0) {
            errors.push('–í—ã—Å–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0');
        }
        if (type === 'table' && (!data.seats || data.seats <= 0)) {
            errors.push('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è —Å—Ç–æ–ª–∞');
        }
        return errors;
    },
    // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ –∑–æ–Ω—ã
    getReservationConfig(zoneItem, data) {
        const config = {
            type: 'seating',
            duration: 120, // 2 —á–∞—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            deposit: 0
        };
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        switch (zoneItem.type) {
            case 'table':
                config.type = 'seating';
                config.duration = data.duration || 120;
                config.deposit = data.deposit || 0;
                break;
            case 'booth':
                config.type = 'fullItem';
                config.duration = data.duration || 60;
                config.deposit = data.deposit || 0;
                break;
            case 'gameTable':
                config.type = 'fullItem';
                config.duration = data.duration || 60;
                config.deposit = data.deposit || 0;
                break;
            default:
                config.type = 'seating';
                config.duration = data.duration || 120;
                config.deposit = data.deposit || 0;
        }
        return config;
    },
    // –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    calculatePrice(zoneItem, config) {
        let price = 0;
        if (zoneItem.pricePerHour) {
            price = (zoneItem.pricePerHour * config.duration) / 60;
        }
        else if (zoneItem.pricePerSeat && config.seatsCount) {
            price = zoneItem.pricePerSeat * config.seatsCount;
        }
        else if (zoneItem.pricePerSlot) {
            price = zoneItem.pricePerSlot;
        }
        return Math.round(price * 100) / 100;
    }
};
//# sourceMappingURL=zones.controller.js.map