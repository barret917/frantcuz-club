import { prisma } from '../prisma';

async function seedMenu() {
  try {
    console.log('üå± –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–µ–Ω—é...');

    // –°–æ–∑–¥–∞–µ–º —Ç–∏–ø—ã –º–µ–Ω—é
    const mainMenu = await prisma.menuType.upsert({
      where: { slug: 'main' },
      update: {},
      create: {
        name: '–û—Å–Ω–æ–≤–Ω–æ–µ',
        slug: 'main',
        description: '–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞',
        sortOrder: 1
      }
    });

    const barMenu = await prisma.menuType.upsert({
      where: { slug: 'bar' },
      update: {},
      create: {
        name: '–ë–∞—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞',
        slug: 'bar',
        description: '–ù–∞–ø–∏—Ç–∫–∏ –∏ –∫–æ–∫—Ç–µ–π–ª–∏',
        sortOrder: 2
      }
    });

    const banquetMenu = await prisma.menuType.upsert({
      where: { slug: 'banquet' },
      update: {},
      create: {
        name: '–ë–∞–Ω–∫–µ—Ç–Ω–æ–µ –º–µ–Ω—é',
        slug: 'banquet',
        description: '–ë–∞–Ω–∫–µ—Ç–Ω—ã–µ –Ω–∞–±–æ—Ä—ã –∏ —Ñ—É—Ä—à–µ—Ç—ã',
        sortOrder: 3
      }
    });

    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    const mainCategories = [
      { name: '–•–æ–ª–æ–¥–Ω—ã–µ –∑–∞–∫—É—Å–∫–∏', slug: 'cold-appetizers', sortOrder: 1 },
      { name: '–°–∞–ª–∞—Ç—ã', slug: 'salads', sortOrder: 2 },
      { name: '–ì–æ—Ä—è—á–∏–µ –∑–∞–∫—É—Å–∫–∏', slug: 'hot-appetizers', sortOrder: 3 },
      { name: '–ü–µ—Ä–≤—ã–µ –±–ª—é–¥–∞', slug: 'soups', sortOrder: 4 },
      { name: '–ì–æ—Ä—è—á–∏–µ –±–ª—é–¥–∞', slug: 'main-courses', sortOrder: 5 },
      { name: '–ì–∞—Ä–Ω–∏—Ä', slug: 'side-dishes', sortOrder: 6 },
      { name: '–ü–∏—Ü—Ü–∞', slug: 'pizza', sortOrder: 7 },
      { name: '–•–∞—á–∞–ø—É—Ä–∏', slug: 'khachapuri', sortOrder: 8 },
      { name: '–ó–∞–∫—É—Å–∫–∏ –∫ –ø–∏–≤—É', slug: 'beer-snacks', sortOrder: 9 },
      { name: '–ë–ª—é–¥–∞ –¥–ª—è –±–æ–ª—å—à–æ–π –∫–æ–º–ø–∞–Ω–∏–∏', slug: 'group-dishes', sortOrder: 10 },
      { name: '–ë–ª—é–¥–∞ –Ω–∞ –º–∞–Ω–≥–∞–ª–µ', slug: 'grill-dishes', sortOrder: 11 },
      { name: '–°–æ—É—Å—ã', slug: 'sauces', sortOrder: 12 },
      { name: '–•–ª–µ–±', slug: 'bread', sortOrder: 13 },
      { name: '–î–µ—Å–µ—Ä—Ç—ã', slug: 'desserts', sortOrder: 14 }
    ];

    for (const category of mainCategories) {
      await prisma.menuCategory.upsert({
        where: { slug: category.slug },
        update: {},
        create: {
          ...category,
          menuTypeId: mainMenu.id
        }
      });
    }

    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –±–∞—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã
    const barCategories = [
      { name: '–ö–æ–∫—Ç–µ–π–ª–∏', slug: 'cocktails', sortOrder: 1 },
      { name: '–í–∏–Ω–æ', slug: 'wine', sortOrder: 2 },
      { name: '–ü–∏–≤–æ', slug: 'beer', sortOrder: 3 },
      { name: '–ö—Ä–µ–ø–∫–∏–µ –Ω–∞–ø–∏—Ç–∫–∏', slug: 'spirits', sortOrder: 4 },
      { name: '–ë–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ', slug: 'non-alcoholic', sortOrder: 5 },
      { name: '–ö–æ—Ñ–µ', slug: 'coffee', sortOrder: 6 },
      { name: '–ß–∞–π', slug: 'tea', sortOrder: 7 },
      { name: '–°–æ–∫–∏', slug: 'juices', sortOrder: 8 },
      { name: '–õ–∏–º–æ–Ω–∞–¥—ã', slug: 'lemonades', sortOrder: 9 }
    ];

    for (const category of barCategories) {
      await prisma.menuCategory.upsert({
        where: { slug: category.slug },
        update: {},
        create: {
          ...category,
          menuTypeId: barMenu.id
        }
      });
    }

    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –±–∞–Ω–∫–µ—Ç–Ω–æ–≥–æ –º–µ–Ω—é
    const banquetCategories = [
      { name: '–ë–∞–Ω–∫–µ—Ç–Ω—ã–µ –Ω–∞–±–æ—Ä—ã', slug: 'banquet-sets', sortOrder: 1 },
      { name: '–§—É—Ä—à–µ—Ç–Ω—ã–µ –±–ª—é–¥–∞', slug: 'buffet-dishes', sortOrder: 2 },
      { name: '–ì–æ—Ä—è—á–∏–µ –±–ª—é–¥–∞', slug: 'hot-dishes', sortOrder: 3 },
      { name: '–•–æ–ª–æ–¥–Ω—ã–µ –∑–∞–∫—É—Å–∫–∏', slug: 'cold-appetizers', sortOrder: 4 },
      { name: '–°–∞–ª–∞—Ç—ã', slug: 'salads', sortOrder: 5 },
      { name: '–î–µ—Å–µ—Ä—Ç—ã', slug: 'desserts', sortOrder: 6 },
      { name: '–ù–∞–ø–∏—Ç–∫–∏', slug: 'beverages', sortOrder: 7 }
    ];

    for (const category of banquetCategories) {
      await prisma.menuCategory.upsert({
        where: { slug: category.slug },
        update: {},
        create: {
          ...category,
          menuTypeId: banquetMenu.id
        }
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–ª—é–¥
    const coldAppetizers = await prisma.menuCategory.findUnique({ where: { slug: 'cold-appetizers' } });
    const salads = await prisma.menuCategory.findUnique({ where: { slug: 'salads' } });
    const cocktails = await prisma.menuCategory.findUnique({ where: { slug: 'cocktails' } });
    const beer = await prisma.menuCategory.findUnique({ where: { slug: 'beer' } });
    const banquetSets = await prisma.menuCategory.findUnique({ where: { slug: 'banquet-sets' } });

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –±–ª—é–¥
    if (coldAppetizers) {
      await prisma.menuItem.upsert({
        where: { id: 1 },
        update: {},
        create: {
          name: '–ö–∞—Ä–ø–∞—á—á–æ –∏–∑ –≥–æ–≤—è–¥–∏–Ω—ã',
          description: '–¢–æ–Ω–∫–æ –Ω–∞—Ä–µ–∑–∞–Ω–Ω–∞—è –≥–æ–≤—è–¥–∏–Ω–∞ —Å –æ–ª–∏–≤–∫–æ–≤—ã–º –º–∞—Å–ª–æ–º, –ø–∞—Ä–º–µ–∑–∞–Ω–æ–º –∏ —Ä—É–∫–∫–æ–ª–æ–π',
          price: 650.00,
          currency: '‚ÇΩ',
          imageUrl: 'https://via.placeholder.com/300x200/ffd700/000?text=–ö–∞—Ä–ø–∞—á—á–æ',
          categoryId: coldAppetizers.id,
          allergens: ['–º–æ–ª–æ–∫–æ'],
          weight: '150–≥',
          calories: 280,
          preparation: '10 –º–∏–Ω',
          isPopular: true,
          sortOrder: 1
        }
      });
    }

    if (salads) {
      await prisma.menuItem.upsert({
        where: { id: 2 },
        update: {},
        create: {
          name: '–¶–µ–∑–∞—Ä—å —Å –∫—É—Ä–∏—Ü–µ–π',
          description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Å–∞–ª–∞—Ç —Å –∫—É—Ä–∏–Ω—ã–º —Ñ–∏–ª–µ, —Å—É—Ö–∞—Ä–∏–∫–∞–º–∏ –∏ —Å–æ—É—Å–æ–º —Ü–µ–∑–∞—Ä—å',
          price: 450.00,
          currency: '‚ÇΩ',
          imageUrl: 'https://via.placeholder.com/300x200/ffd700/000?text=–¶–µ–∑–∞—Ä—å',
          categoryId: salads.id,
          allergens: ['–≥–ª—é—Ç–µ–Ω', '–º–æ–ª–æ–∫–æ', '—è–π—Ü–∞'],
          weight: '250–≥',
          calories: 320,
          preparation: '15 –º–∏–Ω',
          isPopular: true,
          sortOrder: 1
        }
      });
    }

    if (cocktails) {
      await prisma.menuItem.upsert({
        where: { id: 3 },
        update: {},
        create: {
          name: '–ú–æ—Ö–∏—Ç–æ',
          description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∫–æ–∫—Ç–µ–π–ª—å —Å —Ä–æ–º–æ–º, –ª–∞–π–º–æ–º, –º—è—Ç–æ–π –∏ —Å–æ–¥–æ–≤–æ–π',
          price: 350.00,
          currency: '‚ÇΩ',
          imageUrl: 'https://via.placeholder.com/300x200/ffd700/000?text=–ú–æ—Ö–∏—Ç–æ',
          categoryId: cocktails.id,
          weight: '0.3–ª',
          calories: 120,
          preparation: '5 –º–∏–Ω',
          isPopular: true,
          sortOrder: 1
        }
      });
    }

    if (beer) {
      await prisma.menuItem.upsert({
        where: { id: 4 },
        update: {},
        create: {
          name: 'Heineken',
          description: '–°–≤–µ—Ç–ª–æ–µ –ø–∏–≤–æ, 0.5–ª',
          price: 250.00,
          currency: '‚ÇΩ',
          imageUrl: 'https://via.placeholder.com/300x200/ffd700/000?text=Heineken',
          categoryId: beer.id,
          allergens: ['–≥–ª—é—Ç–µ–Ω'],
          weight: '0.5–ª',
          calories: 150,
          preparation: '–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ',
          sortOrder: 1
        }
      });
    }

    if (banquetSets) {
      await prisma.menuItem.upsert({
        where: { id: 5 },
        update: {},
        create: {
          name: '–ë–∞–Ω–∫–µ—Ç–Ω—ã–π –Ω–∞–±–æ—Ä "–°—Ç–∞–Ω–¥–∞—Ä—Ç"',
          description: '–•–æ–ª–æ–¥–Ω—ã–µ –∑–∞–∫—É—Å–∫–∏, –≥–æ—Ä—è—á–∏–µ –±–ª—é–¥–∞, —Å–∞–ª–∞—Ç—ã, –¥–µ—Å–µ—Ä—Ç—ã –Ω–∞ 10 —á–µ–ª–æ–≤–µ–∫',
          price: 25000.00,
          currency: '‚ÇΩ',
          imageUrl: 'https://via.placeholder.com/300x200/ffd700/000?text=–ë–∞–Ω–∫–µ—Ç',
          categoryId: banquetSets.id,
          weight: '–ù–∞ 10 —á–µ–ª',
          preparation: '–ü–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏',
          isPopular: false,
          sortOrder: 1
        }
      });
    }

    console.log('‚úÖ –ú–µ–Ω—é —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –º–µ–Ω—é:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  seedMenu();
}

export { seedMenu }; 