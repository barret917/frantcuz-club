import { Router } from 'express'
import { PrismaClient } from '@prisma/client'

const router = Router()
const prisma = new PrismaClient()

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
router.get('/', async (req, res) => {
  try {
    const { filter } = req.query
    
    let whereClause: any = { isActive: true }
    
    if (filter === 'upcoming') {
      whereClause.isUpcoming = true
    } else if (filter === 'past') {
      whereClause.isUpcoming = false
    }
    
    const events = await prisma.event.findMany({
      where: whereClause,
      orderBy: [
        { isUpcoming: 'desc' },
        { date: 'asc' },
        { sortOrder: 'asc' }
      ]
    })
    
    // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç, –¥–∞–∂–µ –µ—Å–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç
    res.json({
      success: true,
      data: events || [],
      message: events.length === 0 ? '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' : undefined
    })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:', error)
    
    // –í —Å–ª—É—á–∞–µ –ª—é–±–æ–π –æ—à–∏–±–∫–∏ Prisma –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    // –≠—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ, —á–µ–º –ø—ã—Ç–∞—Ç—å—Å—è –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–æ–¥—ã –æ—à–∏–±–æ–∫
    return res.json({
      success: true,
      data: [],
      message: '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
    })
  }
})

// –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–æ ID
router.get('/:id', async (req, res) => {
  try {
    const { id } = req.params
    const event = await prisma.event.findUnique({
      where: { id: parseInt(id) }
    })
    
    if (!event) {
      return res.status(404).json({
        success: false,
        error: '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
      })
    }
    
    res.json({
      success: true,
      data: event
    })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', error)
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'
    })
  }
})

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
router.post('/', async (req, res) => {
  try {
    console.log('üöÄ Backend: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', req.body)
    
    const {
      title,
      description,
      date,
      time,
      price,
      category,
      isUpcoming,
      imageUrl,
      maxGuests,
      location,
      organizer,
      contactInfo,
      tags
    } = req.body
    
    console.log('üñºÔ∏è Backend: URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', imageUrl)
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!title || !description || !date || !time || !category) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã'
      })
    }
    
    const eventData = {
      title,
      description,
      date: new Date(date),
      time,
      price: price || null,
      category,
      isUpcoming: isUpcoming !== undefined ? isUpcoming : true,
      imageUrl: imageUrl || null,
      maxGuests: maxGuests ? parseInt(maxGuests) : null,
      location: location || null,
      organizer: organizer || null,
      contactInfo: contactInfo || null,
      tags: tags || []
    }
    
    console.log('üíæ Backend: –°–æ–∑–¥–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤ –ë–î:', eventData)
    
    const event = await prisma.event.create({
      data: eventData
    })
    
    console.log('‚úÖ Backend: –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ –≤ –ë–î:', event)
    
    res.status(201).json({
      success: true,
      data: event,
      message: '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ'
    })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', error)
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'
    })
  }
})

// –û–±–Ω–æ–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
router.put('/:id', async (req, res) => {
  try {
    const { id } = req.params
    const updateData = req.body
    
    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –¥–∞—Ç–∞, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –µ—ë
    if (updateData.date) {
      updateData.date = new Date(updateData.date)
    }
    
    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Å–ª–æ
    if (updateData.maxGuests) {
      updateData.maxGuests = parseInt(updateData.maxGuests)
    }
    
    const event = await prisma.event.update({
      where: { id: parseInt(id) },
      data: {
        ...updateData,
        updatedAt: new Date()
      }
    })
    
    res.json({
      success: true,
      data: event,
      message: '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ'
    })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', error)
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'
    })
  }
})

// –£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ (–º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)
router.delete('/:id', async (req, res) => {
  try {
    const { id } = req.params
    
    const event = await prisma.event.update({
      where: { id: parseInt(id) },
      data: { isActive: false }
    })
    
    res.json({
      success: true,
      message: '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ'
    })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', error)
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'
    })
  }
})

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
router.get('/stats/overview', async (req, res) => {
  try {
    const [totalEvents, upcomingEvents, pastEvents, activeEvents] = await Promise.all([
      prisma.event.count({ where: { isActive: true } }),
      prisma.event.count({ where: { isActive: true, isUpcoming: true } }),
      prisma.event.count({ where: { isActive: true, isUpcoming: false } }),
      prisma.event.count({ where: { isActive: true } })
    ])
    
    res.json({
      success: true,
      data: {
        total: totalEvents || 0,
        upcoming: upcomingEvents || 0,
        past: pastEvents || 0,
        active: activeEvents || 0
      }
    })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:', error)
    
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω—É–ª–µ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    return res.json({
      success: true,
      data: {
        total: 0,
        upcoming: 0,
        past: 0,
        active: 0
      }
    })
  }
})

export default router 