import express from 'express'
import { PrismaClient } from '@prisma/client'

const router = express.Router()
const prisma = new PrismaClient()

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–∞—Ä–∏—Ñ—ã –∫–∞–ª—å—è–Ω–∞
router.get('/', async (req, res) => {
  try {
    console.log('üöÄ Backend: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤ –∫–∞–ª—å—è–Ω–∞')
    
    const hookahs = await prisma.hookah.findMany({
      where: { isActive: true },
      orderBy: { sortOrder: 'asc' }
    })
    
    console.log('‚úÖ Backend: –¢–∞—Ä–∏—Ñ—ã –∫–∞–ª—å—è–Ω–∞ –ø–æ–ª—É—á–µ–Ω—ã:', hookahs)
    
    res.json({
      success: true,
      data: hookahs,
      message: '–¢–∞—Ä–∏—Ñ—ã –∫–∞–ª—å—è–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã'
    })
  } catch (error) {
    console.error('‚ùå Backend: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∞—Ä–∏—Ñ–æ–≤ –∫–∞–ª—å—è–Ω–∞:', error)
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∞—Ä–∏—Ñ–æ–≤ –∫–∞–ª—å—è–Ω–∞'
    })
  }
})

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ –∫–∞–ª—å—è–Ω–∞
router.post('/', async (req, res) => {
  try {
    console.log('üöÄ Backend: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –∫–∞–ª—å—è–Ω–∞:', req.body)
    
    const {
      name,
      description,
      price,
      features,
      sortOrder
    } = req.body
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!name || !price) {
      return res.status(400).json({
        success: false,
        error: '–ù–∞–∑–≤–∞–Ω–∏–µ –∏ —Ü–µ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      })
    }
    
    const hookahData = {
      name,
      description: description || null,
      price: parseFloat(price),
      features: features || [],
      sortOrder: sortOrder ? parseInt(sortOrder) : 0
    }
    
    console.log('üíæ Backend: –°–æ–∑–¥–∞–µ–º —Ç–∞—Ä–∏—Ñ –∫–∞–ª—å—è–Ω–∞ –≤ –ë–î:', hookahData)
    
    const hookah = await prisma.hookah.create({
      data: hookahData
    })
    
    console.log('‚úÖ Backend: –¢–∞—Ä–∏—Ñ –∫–∞–ª—å—è–Ω–∞ —Å–æ–∑–¥–∞–Ω –≤ –ë–î:', hookah)
    
    res.status(201).json({
      success: true,
      data: hookah,
      message: '–¢–∞—Ä–∏—Ñ –∫–∞–ª—å—è–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω'
    })
  } catch (error) {
    console.error('‚ùå Backend: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞—Ä–∏—Ñ–∞ –∫–∞–ª—å—è–Ω–∞:', error)
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞—Ä–∏—Ñ–∞ –∫–∞–ª—å—è–Ω–∞'
    })
  }
})

// –û–±–Ω–æ–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ –∫–∞–ª—å—è–Ω–∞
router.put('/:id', async (req, res) => {
  try {
    const { id } = req.params
    console.log('üöÄ Backend: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –∫–∞–ª—å—è–Ω–∞ ID:', id, req.body)
    
    const {
      name,
      description,
      price,
      features,
      sortOrder,
      isActive
    } = req.body
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!name || !price) {
      return res.status(400).json({
        success: false,
        error: '–ù–∞–∑–≤–∞–Ω–∏–µ –∏ —Ü–µ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      })
    }
    
    const updateData = {
      name,
      description: description || null,
      price: parseFloat(price),
      features: features || [],
      sortOrder: sortOrder ? parseInt(sortOrder) : 0,
      isActive: isActive !== undefined ? isActive : true
    }
    
    console.log('üíæ Backend: –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞—Ä–∏—Ñ –∫–∞–ª—å—è–Ω–∞ –≤ –ë–î:', updateData)
    
    const hookah = await prisma.hookah.update({
      where: { id: parseInt(id) },
      data: updateData
    })
    
    console.log('‚úÖ Backend: –¢–∞—Ä–∏—Ñ –∫–∞–ª—å—è–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î:', hookah)
    
    res.json({
      success: true,
      data: hookah,
      message: '–¢–∞—Ä–∏—Ñ –∫–∞–ª—å—è–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω'
    })
  } catch (error) {
    console.error('‚ùå Backend: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞—Ä–∏—Ñ–∞ –∫–∞–ª—å—è–Ω–∞:', error)
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞—Ä–∏—Ñ–∞ –∫–∞–ª—å—è–Ω–∞'
    })
  }
})

// –£–¥–∞–ª–∏—Ç—å —Ç–∞—Ä–∏—Ñ –∫–∞–ª—å—è–Ω–∞
router.delete('/:id', async (req, res) => {
  try {
    const { id } = req.params
    console.log('üöÄ Backend: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –∫–∞–ª—å—è–Ω–∞ ID:', id)
    
    await prisma.hookah.delete({
      where: { id: parseInt(id) }
    })
    
    console.log('‚úÖ Backend: –¢–∞—Ä–∏—Ñ –∫–∞–ª—å—è–Ω–∞ —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î')
    
    res.json({
      success: true,
      message: '–¢–∞—Ä–∏—Ñ –∫–∞–ª—å—è–Ω–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
    })
  } catch (error) {
    console.error('‚ùå Backend: –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–∞—Ä–∏—Ñ–∞ –∫–∞–ª—å—è–Ω–∞:', error)
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–∞—Ä–∏—Ñ–∞ –∫–∞–ª—å—è–Ω–∞'
    })
  }
})

export default router 