import { Request, Response } from 'express'
import { PrismaClient } from '@prisma/client'
import { payKeeperService, PayKeeperWebhookData } from '../services/paykeeper.service'
import { emailService } from '../services/email.service'
import QRCode from 'qrcode'

const prisma = new PrismaClient()

export const paymentController = {
  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –¥–ª—è –±–∏–ª–µ—Ç–∞ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
   */
  async createEventTicketPayment(req: Request, res: Response) {
    try {
      const { ticketId, amount, customerInfo, eventTitle } = req.body

      // –í–∞–ª–∏–¥–∞—Ü–∏—è
      if (!ticketId || !amount || !customerInfo || !eventTitle) {
        return res.status(400).json({
          success: false,
          error: '–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã'
        })
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∏–ª–µ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω
      const ticket = await prisma.eventTicket.findUnique({
        where: { id: parseInt(ticketId) },
        include: {
          event: true,
          zone: true,
          table: true
        }
      })

      if (!ticket) {
        return res.status(404).json({
          success: false,
          error: '–ë–∏–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
        })
      }

      if (ticket.status !== 'available') {
        return res.status(400).json({
          success: false,
          error: '–ë–∏–ª–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏'
        })
      }

      // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ PayKeeper
      const paymentResponse = await payKeeperService.createEventTicketPayment(
        ticketId,
        amount,
        customerInfo,
        eventTitle
      )

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∏–ª–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–ª–∞—Ç–µ–∂–µ
      await prisma.eventTicket.update({
        where: { id: parseInt(ticketId) },
        data: {
          paymentId: paymentResponse.id,
          paymentStatus: 'pending',
          customerName: customerInfo.name,
          customerEmail: customerInfo.email,
          customerPhone: customerInfo.phone
        }
      })

      res.json({
        success: true,
        data: {
          paymentId: paymentResponse.id,
          paymentUrl: paymentResponse.payment_url,
          ticketId: ticketId
        },
        message: '–ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ'
      })
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:', error)
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞'
      })
    }
  },

  /**
   * Webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç PayKeeper
   */
  async handleWebhook(req: Request, res: Response) {
    try {
      console.log('üîî –ü–æ–ª—É—á–µ–Ω webhook –æ—Ç PayKeeper:', req.body)
      const webhookData: PayKeeperWebhookData = req.body

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
      if (!payKeeperService.verifyWebhookSignature(webhookData)) {
        console.error('‚ùå Invalid webhook signature')
        return res.status(400).json({ error: 'Invalid signature' })
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º ticketId –∏–∑ orderid
      const ticketId = webhookData.orderid.replace('EVENT_TICKET_', '')
      
      // –ù–∞—Ö–æ–¥–∏–º –±–∏–ª–µ—Ç
      const ticket = await prisma.eventTicket.findUnique({
        where: { id: parseInt(ticketId) },
        include: {
          event: true,
          zone: true,
          table: true
        }
      })

      if (!ticket) {
        console.error(`Ticket not found: ${ticketId}`)
        return res.status(404).json({ error: 'Ticket not found' })
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–∏–ª–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
      if (webhookData.status === 'paid') {
        await prisma.eventTicket.update({
          where: { id: parseInt(ticketId) },
          data: {
            status: 'sold',
            paymentStatus: 'paid',
            purchasedAt: new Date(webhookData.pay_date)
          }
        })

        console.log(`Ticket ${ticketId} payment confirmed`)

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∏–ª–µ—Ç –Ω–∞ email –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
        try {
          const updatedTicket = await prisma.eventTicket.findUnique({
            where: { id: parseInt(ticketId) },
            include: {
              event: true,
              zone: true,
              table: true
            }
          })

          if (updatedTicket) {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
            const qrCodeDataUrl = await QRCode.toDataURL(updatedTicket.ticketNumber, {
              width: 200,
              margin: 1,
              color: { dark: '#000', light: '#fff' }
            })

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
            await emailService.sendTicketToCustomer({
              ticket: updatedTicket,
              qrCodeDataUrl
            })

            console.log(`Ticket ${ticketId} sent to email: ${updatedTicket.customerEmail}`)
          }
        } catch (emailError) {
          console.error(`Failed to send ticket ${ticketId} to email:`, emailError)
          // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –ø–ª–∞—Ç–µ–∂ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
        }
      } else if (webhookData.status === 'failed') {
        await prisma.eventTicket.update({
          where: { id: parseInt(ticketId) },
          data: {
            status: 'available',
            paymentStatus: 'failed',
            paymentId: null,
            customerName: '',
            customerEmail: '',
            customerPhone: ''
          }
        })

        console.log(`Ticket ${ticketId} payment failed`)
      }

      res.json({ success: true })
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook:', error)
      res.status(500).json({ error: 'Internal server error' })
    }
  },

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
   */
  async checkPaymentStatus(req: Request, res: Response) {
    try {
      const { paymentId } = req.params

      const paymentStatus = await payKeeperService.checkPaymentStatus(paymentId)

      res.json({
        success: true,
        data: paymentStatus
      })
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞:', error)
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞'
      })
    }
  },

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –ø–æ ID –±–∏–ª–µ—Ç–∞
   */
  async getPaymentByTicketId(req: Request, res: Response) {
    try {
      const { ticketId } = req.params

      const ticket = await prisma.eventTicket.findUnique({
        where: { id: parseInt(ticketId) },
        include: {
          event: true,
          zone: true,
          table: true
        }
      })

      if (!ticket) {
        return res.status(404).json({
          success: false,
          error: '–ë–∏–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
        })
      }

      res.json({
        success: true,
        data: {
          ticketId: ticket.id,
          paymentId: ticket.paymentId,
          paymentStatus: ticket.paymentStatus,
          status: ticket.status,
          price: ticket.price,
          customerName: ticket.customerName,
          customerEmail: ticket.customerEmail,
          customerPhone: ticket.customerPhone,
          purchasedAt: ticket.purchasedAt,
          event: ticket.event,
          zone: ticket.zone,
          table: ticket.table
        }
      })
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ:', error)
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ'
      })
    }
  }
}
