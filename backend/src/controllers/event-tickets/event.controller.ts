import { Request, Response } from 'express'
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

export const eventController = {
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
  async getAllEvents(req: Request, res: Response) {
    try {
      console.log('üöÄ –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π...')
      const { filter } = req.query
      
      let whereClause: any = { isActive: true }
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
      const allEvents = await prisma.event.findMany({
        where: whereClause,
        include: {
          zones: {
            where: { isActive: true },
            include: {
              tables: {
                where: { isActive: true }
              }
            },
            orderBy: { sortOrder: 'asc' }
          },
          tickets: {
            where: { status: 'sold' }
          }
        },
        orderBy: [
          { date: 'asc' },
          { sortOrder: 'asc' }
        ]
      })
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –¥–∞—Ç–µ
      const now = new Date()
      const filteredEvents = allEvents.filter(event => {
        try {
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º event.date –≤ —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç Date
          const dateStr = event.date instanceof Date ? event.date.toISOString().split('T')[0] : String(event.date)
          // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ (YYYY-MM-DD)
          const dateOnly = dateStr.split('T')[0] || dateStr.split(' ')[0]
          const eventDateTime = new Date(`${dateOnly}T${event.time}`)
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
          if (isNaN(eventDateTime.getTime())) {
            console.warn(`‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è ${event.title}: ${event.date} ${event.time}`)
            return false
          }
          
          const isUpcoming = eventDateTime > now
        
          if (filter === 'upcoming') {
            return isUpcoming
          } else if (filter === 'past') {
            return !isUpcoming
          }
          
          return true // –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è ${event.title}:`, error)
          return false
        }
      })
      
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: ${filteredEvents.length}`)
      filteredEvents.forEach((event, index) => {
        const dateStr = event.date instanceof Date ? event.date.toISOString().split('T')[0] : String(event.date)
        const dateOnly = dateStr.split('T')[0] || dateStr.split(' ')[0]
        const eventDateTime = new Date(`${dateOnly}T${event.time}`)
        const isUpcoming = eventDateTime > now
        console.log(`   ${index + 1}. ${event.title} (${isUpcoming ? '–ü—Ä–µ–¥—Å—Ç–æ—è—â–µ–µ' : '–ü—Ä–æ—à–µ–¥—à–µ–µ'}) - ${dateOnly} ${event.time}`)
      })
      
      res.json({
        success: true,
        data: filteredEvents,
        message: filteredEvents.length === 0 ? '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' : undefined
      })
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:', error)
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π'
      })
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–æ ID
  async getEventById(req: Request, res: Response) {
    try {
      const { id } = req.params
      
      const event = await prisma.event.findUnique({
        where: { id: parseInt(id) },
        include: {
          zones: {
            where: { isActive: true },
            include: {
              tables: {
                where: { isActive: true },
                include: {
                  tickets: {
                    where: { status: 'sold' }
                  }
                }
              }
            },
            orderBy: { sortOrder: 'asc' }
          }
        }
      })
      
      if (!event) {
        return res.status(404).json({
          success: false,
          error: '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
        })
      }
      
      res.json({
        success: true,
        data: event
      })
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', error)
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'
      })
    }
  },

  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
  async createEvent(req: Request, res: Response) {
    try {
      console.log('üöÄ Backend: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', req.body)
      
      const {
        title,
        description,
        date,
        time,
        category,
        imageUrl,
        location,
        organizer,
        contactInfo,
        maxGuests,
        isUpcoming = true
      } = req.body
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      if (!title || !description || !date || !time) {
        return res.status(400).json({
          success: false,
          error: '–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã'
        })
      }
      
      const eventData = {
        title,
        description,
        date: new Date(date),
        time,
        category: category || '–ö–æ–Ω—Ü–µ—Ä—Ç', // Use provided category or default
        imageUrl: imageUrl || null,
        location: location || null,
        organizer: organizer || null,
        contactInfo: contactInfo || null,
        maxGuests: maxGuests ? parseInt(maxGuests) : null,
        isUpcoming: isUpcoming !== undefined ? isUpcoming : true
      }
      
      console.log('üíæ Backend: –°–æ–∑–¥–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤ –ë–î:', eventData)
      
      const event = await prisma.event.create({
        data: eventData
      })
      
      console.log('‚úÖ Backend: –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ –≤ –ë–î:', event)
      
      res.status(201).json({
        success: true,
        data: event,
        message: '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ'
      })
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', error)
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'
      })
    }
  },

  // –û–±–Ω–æ–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
  async updateEvent(req: Request, res: Response) {
    try {
      const { id } = req.params
      const updateData = req.body
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
      if (updateData.date) {
        updateData.date = new Date(updateData.date)
      }
      
      const event = await prisma.event.update({
        where: { id: parseInt(id) },
        data: updateData
      })
      
      res.json({
        success: true,
        data: event,
        message: '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ'
      })
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', error)
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'
      })
    }
  },

  // –£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
  async deleteEvent(req: Request, res: Response) {
    try {
      const { id } = req.params
      
      // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      await prisma.eventTicket.deleteMany({
        where: { eventId: parseInt(id) }
      })
      
      await prisma.eventTable.deleteMany({
        where: { zone: { eventId: parseInt(id) } }
      })
      
      await prisma.eventZone.deleteMany({
        where: { eventId: parseInt(id) }
      })
      
      // –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Å–∞–º–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
      await prisma.event.delete({
        where: { id: parseInt(id) }
      })
      
      res.json({
        success: true,
        message: '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ'
      })
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', error)
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'
      })
    }
  }
}
