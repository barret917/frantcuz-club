import { Request, Response } from 'express'
import { PrismaClient } from '@prisma/client'
import QRCode from 'qrcode'
import { payKeeperService } from '../../services/paykeeper.service'
import { emailService } from '../../services/email.service'

const prisma = new PrismaClient()

export const eventTicketController = {
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –±–∏–ª–µ—Ç—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
  async getTicketsByEvent(req: Request, res: Response) {
    try {
      const { eventId } = req.params
      
      const tickets = await prisma.eventTicket.findMany({
        where: { eventId: parseInt(eventId) },
        include: {
          event: true,
          zone: true,
          table: true
        },
        orderBy: { createdAt: 'desc' }
      })
      
      res.json({
        success: true,
        data: tickets
      })
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∏–ª–µ—Ç–æ–≤:', error)
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∏–ª–µ—Ç–æ–≤'
      })
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å –±–∏–ª–µ—Ç –ø–æ –Ω–æ–º–µ—Ä—É
  async getTicketByNumber(req: Request, res: Response) {
    try {
      const { ticketNumber } = req.params
      
      const ticket = await prisma.eventTicket.findUnique({
        where: { ticketNumber },
        include: {
          event: true,
          zone: true,
          table: true
        }
      })
      
      if (!ticket) {
        return res.status(404).json({
          success: false,
          error: '–ë–∏–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
        })
      }
      
      res.json({
        success: true,
        data: ticket
      })
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∏–ª–µ—Ç–∞:', error)
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∏–ª–µ—Ç–∞'
      })
    }
  },

  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±–∏–ª–µ—Ç
  async createTicket(req: Request, res: Response) {
    try {
      const {
        eventId,
        zoneId,
        tableId,
        customerName,
        customerEmail,
        customerPhone,
        paymentId
      } = req.body
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      if (!eventId || !zoneId || !tableId || !customerName || !customerEmail || !customerPhone) {
        return res.status(400).json({
          success: false,
          error: '–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã'
        })
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–æ–Ω—ã –¥–ª—è —Ü–µ–Ω—ã
      const zone = await prisma.eventZone.findUnique({
        where: { id: parseInt(zoneId) }
      })
      
      if (!zone) {
        return res.status(404).json({
          success: false,
          error: '–ó–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        })
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Å—Ç–∞
      const table = await prisma.eventTable.findUnique({
        where: { id: parseInt(tableId) },
        include: {
          tickets: {
            where: {
              OR: [
                { status: 'sold' },
                { status: 'available', paymentStatus: 'pending' }
              ]
            }
          }
        }
      })
      
      if (!table) {
        return res.status(404).json({
          success: false,
          error: '–°—Ç–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'
        })
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—Ç
      const soldTicketsCount = table.tickets.length
      const availableSeats = table.seats - soldTicketsCount
      
      if (availableSeats <= 0) {
        return res.status(400).json({
          success: false,
          error: `–í—Å–µ –º–µ—Å—Ç–∞ –∑–∞ —ç—Ç–∏–º —Å—Ç–æ–ª–æ–º –∑–∞–Ω—è—Ç—ã (${table.seats} –∏–∑ ${table.seats})`
        })
      }
      
      console.log(`üìä createTicket: –°—Ç–æ–ª ${table.name}: –≤—Å–µ–≥–æ –º–µ—Å—Ç ${table.seats}, –∑–∞–Ω—è—Ç–æ ${soldTicketsCount}, –¥–æ—Å—Ç—É–ø–Ω–æ ${availableSeats}`)
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞
      const ticketNumber = await generateTicketNumber()
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
      const qrCode = await QRCode.toDataURL(ticketNumber, {
        width: 200,
        margin: 1,
        color: { dark: '#000', light: '#fff' }
      })
      
      const ticketData = {
        eventId: parseInt(eventId),
        zoneId: parseInt(zoneId),
        tableId: parseInt(tableId),
        ticketNumber,
        qrCode,
        price: zone.price,
        customerName,
        customerEmail,
        customerPhone,
        paymentId: paymentId || null,
        status: 'sold' as const,
        purchasedAt: new Date()
      }
      
      const ticket = await prisma.eventTicket.create({
        data: ticketData,
        include: {
          event: true,
          zone: true,
          table: true
        }
      })
      
      res.status(201).json({
        success: true,
        data: ticket,
        message: '–ë–∏–ª–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω'
      })
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∏–ª–µ—Ç–∞:', error)
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∏–ª–µ—Ç–∞'
      })
    }
  },

  // –ü–æ–∫—É–ø–∫–∞ –±–∏–ª–µ—Ç–∞ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π PayKeeper
  async purchaseTicket(req: Request, res: Response) {
    try {
      const {
        eventId,
        zoneId,
        tableId,
        customerName,
        customerEmail,
        customerPhone
      } = req.body
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      if (!eventId || !zoneId || !tableId || !customerName || !customerEmail || !customerPhone) {
        return res.status(400).json({
          success: false,
          error: '–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã'
        })
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–æ–Ω—ã –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
      const zone = await prisma.eventZone.findUnique({
        where: { id: parseInt(zoneId) },
        include: { event: true }
      })
      
      if (!zone) {
        return res.status(404).json({
          success: false,
          error: '–ó–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        })
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–∞
      const table = await prisma.eventTable.findUnique({
        where: { id: parseInt(tableId) },
        include: {
          tickets: {
            where: {
              OR: [
                { status: 'sold' },
                { status: 'available', paymentStatus: 'pending' } // –£—á–∏—Ç—ã–≤–∞–µ–º –±–∏–ª–µ—Ç—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–ø–ª–∞—Ç—ã
              ]
            }
          }
        }
      })
      
      if (!table) {
        return res.status(404).json({
          success: false,
          error: '–°—Ç–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'
        })
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—Ç
      const soldTicketsCount = table.tickets.length
      const availableSeats = table.seats - soldTicketsCount
      
      if (availableSeats <= 0) {
        return res.status(400).json({
          success: false,
          error: `–í—Å–µ –º–µ—Å—Ç–∞ –∑–∞ —ç—Ç–∏–º —Å—Ç–æ–ª–æ–º –∑–∞–Ω—è—Ç—ã (${table.seats} –∏–∑ ${table.seats})`
        })
      }
      
      console.log(`üìä –°—Ç–æ–ª ${table.name}: –≤—Å–µ–≥–æ –º–µ—Å—Ç ${table.seats}, –∑–∞–Ω—è—Ç–æ ${soldTicketsCount}, –¥–æ—Å—Ç—É–ø–Ω–æ ${availableSeats}`)
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞
      const ticketNumber = await generateTicketNumber()
      
      // –°–æ–∑–¥–∞–µ–º –±–∏–ª–µ—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–¥–æ—Å—Ç—É–ø–µ–Ω" (–¥–æ –æ–ø–ª–∞—Ç—ã)
      const ticket = await prisma.eventTicket.create({
        data: {
          eventId: parseInt(eventId),
          zoneId: parseInt(zoneId),
          tableId: parseInt(tableId),
          ticketNumber,
          price: zone.price,
          customerName,
          customerEmail,
          customerPhone,
          status: 'available',
          paymentStatus: 'pending'
        },
        include: {
          event: true,
          zone: true,
          table: true
        }
      })
      
      // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ PayKeeper
      const paymentResponse = await payKeeperService.createEventTicketPayment(
        ticket.id.toString(),
        Number(zone.price),
        {
          name: customerName,
          email: customerEmail,
          phone: customerPhone
        },
        zone.event.title
      )
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∏–ª–µ—Ç —Å paymentId
      await prisma.eventTicket.update({
        where: { id: ticket.id },
        data: {
          paymentId: paymentResponse.id
        }
      })
      
      res.status(201).json({
        success: true,
        data: {
          ticketId: ticket.id,
          ticketNumber: ticket.ticketNumber,
          paymentId: paymentResponse.id,
          paymentUrl: paymentResponse.payment_url,
          price: ticket.price,
          event: ticket.event,
          zone: ticket.zone,
          table: ticket.table
        },
        message: '–ë–∏–ª–µ—Ç —Å–æ–∑–¥–∞–Ω, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –æ–ø–ª–∞—Ç–µ'
      })
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –±–∏–ª–µ—Ç–∞:', error)
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –±–∏–ª–µ—Ç–∞'
      })
    }
  },

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–∏–ª–µ—Ç –Ω–∞ email
  async sendTicketToEmail(req: Request, res: Response) {
    try {
      const { ticketId } = req.params

      const ticket = await prisma.eventTicket.findUnique({
        where: { id: parseInt(ticketId) },
        include: {
          event: true,
          zone: true,
          table: true
        }
      })

      if (!ticket) {
        return res.status(404).json({
          success: false,
          error: '–ë–∏–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
        })
      }

      if (ticket.status !== 'sold') {
        return res.status(400).json({
          success: false,
          error: '–ë–∏–ª–µ—Ç –Ω–µ –æ–ø–ª–∞—á–µ–Ω'
        })
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
      const qrCodeDataUrl = await QRCode.toDataURL(ticket.ticketNumber, {
        width: 200,
        margin: 1,
        color: { dark: '#000', light: '#fff' }
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
      const emailSent = await emailService.sendTicketToCustomer({
        ticket,
        qrCodeDataUrl
      })

      if (!emailSent) {
        return res.status(500).json({
          success: false,
          error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email'
        })
      }

      res.json({
        success: true,
        message: '–ë–∏–ª–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email'
      })
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–∏–ª–µ—Ç–∞ –Ω–∞ email:', error)
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–∏–ª–µ—Ç–∞'
      })
    }
  },

  // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–ª–µ—Ç (—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR)
  async useTicket(req: Request, res: Response) {
    try {
      const { ticketNumber } = req.params
      
      const ticket = await prisma.eventTicket.findUnique({
        where: { ticketNumber },
        include: {
          event: true,
          zone: true,
          table: true
        }
      })
      
      if (!ticket) {
        return res.status(404).json({
          success: false,
          error: '–ë–∏–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
        })
      }
      
      if (ticket.status !== 'sold') {
        return res.status(400).json({
          success: false,
          error: '–ë–∏–ª–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω'
        })
      }
      
      if (ticket.usedAt) {
        return res.status(400).json({
          success: false,
          error: '–ë–∏–ª–µ—Ç —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω'
        })
      }
      
      const updatedTicket = await prisma.eventTicket.update({
        where: { id: ticket.id },
        data: {
          status: 'used',
          usedAt: new Date()
        },
        include: {
          event: true,
          zone: true,
          table: true
        }
      })
      
      res.json({
        success: true,
        data: updatedTicket,
        message: '–ë–∏–ª–µ—Ç —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω'
      })
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –±–∏–ª–µ—Ç–∞:', error)
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –±–∏–ª–µ—Ç–∞'
      })
    }
  },

  // –û—Ç–º–µ–Ω–∏—Ç—å –±–∏–ª–µ—Ç
  async cancelTicket(req: Request, res: Response) {
    try {
      const { id } = req.params
      
      const ticket = await prisma.eventTicket.update({
        where: { id: parseInt(id) },
        data: {
          status: 'cancelled'
        },
        include: {
          event: true,
          zone: true,
          table: true
        }
      })
      
      res.json({
        success: true,
        data: ticket,
        message: '–ë–∏–ª–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω'
      })
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –±–∏–ª–µ—Ç–∞:', error)
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –±–∏–ª–µ—Ç–∞'
      })
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–¥–∞–∂
  async getSalesStats(req: Request, res: Response) {
    try {
      const { eventId } = req.params
      
      const stats = await prisma.eventTicket.groupBy({
        by: ['status'],
        where: { eventId: parseInt(eventId) },
        _count: {
          status: true
        },
        _sum: {
          price: true
        }
      })
      
      const totalRevenue = await prisma.eventTicket.aggregate({
        where: {
          eventId: parseInt(eventId),
          status: 'sold'
        },
        _sum: {
          price: true
        }
      })
      
      res.json({
        success: true,
        data: {
          stats,
          totalRevenue: totalRevenue._sum.price || 0
        }
      })
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error)
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
      })
    }
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –±–∏–ª–µ—Ç–∞
async function generateTicketNumber(): Promise<string> {
  const datePart = new Date().toISOString().slice(2, 10).replace(/-/g, '')
  const randomPart = Math.floor(Math.random() * 10000).toString().padStart(4, '0')
  const ticketNumber = `FR-${datePart}-${randomPart}`
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
  const existingTicket = await prisma.eventTicket.findUnique({
    where: { ticketNumber }
  })
  
  if (existingTicket) {
    // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
    return generateTicketNumber()
  }
  
  return ticketNumber
}
