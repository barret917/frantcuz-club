import { Request, Response } from 'express'
import { PrismaClient } from '@prisma/client'
import QRCode from 'qrcode'
import { payKeeperService } from '../../services/paykeeper.service'

const prisma = new PrismaClient()

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –±–∏–ª–µ—Ç–∞
async function generateTicketNumber(): Promise<string> {
  const datePart = new Date().toISOString().slice(2, 10).replace(/-/g, '')
  const randomPart = Math.floor(Math.random() * 10000).toString().padStart(4, '0')
  const ticketNumber = `FR-${datePart}-${randomPart}`
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
  const existingTicket = await prisma.eventTicket.findUnique({
    where: { ticketNumber }
  })
  
  if (existingTicket) {
    return generateTicketNumber()
  }
  
  return ticketNumber
}

export const botPurchaseController = {
  // –ü–æ–∫—É–ø–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤ (–¥–ª—è –±–æ—Ç–∞)
  async purchaseTickets(req: Request, res: Response) {
    try {
      const {
        eventId,
        zoneId,
        customerName,
        customerPhone,
        customerEmail,
        seatsCount,
        telegramUserId
      } = req.body

      // –í–∞–ª–∏–¥–∞—Ü–∏—è
      if (!eventId || !zoneId || !customerName || !customerPhone || !seatsCount) {
        return res.status(400).json({
          error: '–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã'
        })
      }

      const seats = parseInt(seatsCount)
      if (seats < 1 || seats > 10) {
        return res.status(400).json({
          error: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10'
        })
      }

      // –ü–æ–ª—É—á–∞–µ–º –∑–æ–Ω—É –∏ —Å–æ–±—ã—Ç–∏–µ
      const zone = await prisma.eventZone.findUnique({
        where: { id: parseInt(zoneId) },
        include: {
          event: true,
          tables: {
            where: { isActive: true },
            include: {
              tickets: {
                where: {
                  OR: [
                    { status: 'sold' },
                    { status: 'available', paymentStatus: 'pending' }
                  ]
                }
              }
            },
            orderBy: {
              id: 'asc'
            }
          }
        }
      })

      if (!zone) {
        return res.status(404).json({ error: '–ó–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' })
      }

      // –ù–∞—Ö–æ–¥–∏–º —Å—Ç–æ–ª—ã —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –º–µ—Å—Ç–∞–º–∏
      const availableTables: Array<{ table: any; availableSeats: number }> = []
      
      for (const table of zone.tables) {
        const soldTickets = table.tickets.length
        const available = table.seats - soldTickets
        if (available > 0) {
          availableTables.push({ table, availableSeats: available })
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –º–µ—Å—Ç –≤ –∑–æ–Ω–µ
      const totalAvailable = availableTables.reduce((sum, t) => sum + t.availableSeats, 0)
      
      if (totalAvailable < seats) {
        return res.status(400).json({
          error: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç. –î–æ—Å—Ç—É–ø–Ω–æ: ${totalAvailable}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${seats}`
        })
      }

      console.log(`üé´ –ü–æ–∫—É–ø–∫–∞ ${seats} –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è –∑–æ–Ω—ã ${zone.name}`)

      // –°–æ–∑–¥–∞–µ–º –±–∏–ª–µ—Ç—ã, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—è –∏—Ö –ø–æ —Å—Ç–æ–ª–∞–º
      const createdTickets = []
      let remainingSeats = seats
      let tableIndex = 0

      while (remainingSeats > 0 && tableIndex < availableTables.length) {
        const { table, availableSeats } = availableTables[tableIndex]
        const seatsToBook = Math.min(remainingSeats, availableSeats)

        console.log(`  üìç –ë—Ä–æ–Ω–∏—Ä—É–µ–º ${seatsToBook} –º–µ—Å—Ç –∑–∞ —Å—Ç–æ–ª–æ–º ${table.name}`)

        // –°–æ–∑–¥–∞–µ–º –±–∏–ª–µ—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç–æ–ª–∞
        for (let i = 0; i < seatsToBook; i++) {
          const ticketNumber = await generateTicketNumber()

          const ticket = await prisma.eventTicket.create({
            data: {
              eventId: parseInt(eventId),
              zoneId: parseInt(zoneId),
              tableId: table.id,
              ticketNumber,
              price: zone.price,
              customerName,
              customerEmail: customerEmail || '',
              customerPhone,
              telegramUserId: telegramUserId || null,
              status: 'available',
              paymentStatus: 'pending'
            }
          })

          createdTickets.push(ticket)
        }

        remainingSeats -= seatsToBook
        tableIndex++
      }

      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${createdTickets.length} –±–∏–ª–µ—Ç–æ–≤`)

      // –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è –≤—Å–µ—Ö –±–∏–ª–µ—Ç–æ–≤
      const totalAmount = Number(zone.price) * seats
      const ticketIds = createdTickets.map(t => t.id).join(',')

      const paymentResponse = await payKeeperService.createEventTicketPayment(
        ticketIds,
        totalAmount,
        {
          name: customerName,
          email: customerEmail || '',
          phone: customerPhone
        },
        `${zone.event.title} - ${zone.name} (${seats} –º–µ—Å—Ç)`
      )

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –±–∏–ª–µ—Ç—ã —Å paymentId
      await prisma.eventTicket.updateMany({
        where: {
          id: { in: createdTickets.map(t => t.id) }
        },
        data: {
          paymentId: paymentResponse.id
        }
      })

      // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –ø–æ–Ω—è—Ç–Ω–æ–º –±–æ—Ç—É
      res.status(201).json({
        success: true,
        ticketPurchase: {
          id: createdTickets[0].id, // ID –ø–µ—Ä–≤–æ–≥–æ –±–∏–ª–µ—Ç–∞ –∫–∞–∫ –≥—Ä—É–ø–ø—ã
          ticketIds: createdTickets.map(t => t.id),
          ticketNumbers: createdTickets.map(t => t.ticketNumber),
          eventName: zone.event.title,
          zoneName: zone.name,
          seatsCount: seats,
          totalAmount: totalAmount,
          pricePerSeat: Number(zone.price),
          status: 'reserved',
          paymentId: paymentResponse.id,
          paymentUrl: paymentResponse.payment_url,
          createdAt: createdTickets[0].createdAt,
          expiresAt: new Date(Date.now() + 10 * 60 * 1000) // 10 –º–∏–Ω—É—Ç
        },
        message: '–ë–∏–ª–µ—Ç—ã –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω—ã, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –æ–ø–ª–∞—Ç–µ'
      })

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è –±–æ—Ç–∞:', error)
      res.status(500).json({
        error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –±–∏–ª–µ—Ç–æ–≤'
      })
    }
  }
}

