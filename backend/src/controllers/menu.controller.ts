import { prisma } from "../prisma";
import { Request, Response } from "express";

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–∏–ø—ã –º–µ–Ω—é
export const getMenuTypes = async (req: Request, res: Response) => {
  try {
    const menuTypes = await prisma.menuType.findMany({
      where: { isActive: true },
      orderBy: { sortOrder: 'asc' },
      include: {
        categories: {
          where: { isActive: true },
          orderBy: { sortOrder: 'asc' },
          include: {
            items: {
              where: { isActive: true },
              orderBy: { sortOrder: 'asc' }
            }
          }
        }
      }
    });
    res.json(menuTypes);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –º–µ–Ω—é:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –º–µ–Ω—é' });
  }
};

// –ü–æ–ª—É—á–∏—Ç—å —Ç–∏–ø –º–µ–Ω—é –ø–æ ID
export const getMenuTypeById = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    const menuType = await prisma.menuType.findUnique({
      where: { id: parseInt(id) },
      include: {
        categories: {
          where: { isActive: true },
          orderBy: { sortOrder: 'asc' },
          include: {
            items: {
              where: { isActive: true },
              orderBy: { sortOrder: 'asc' }
            }
          }
        }
      }
    });
    
    if (!menuType) {
      return res.status(404).json({ error: '–¢–∏–ø –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    res.json(menuType);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–∞ –º–µ–Ω—é:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–∞ –º–µ–Ω—é' });
  }
};

// –°–æ–∑–¥–∞—Ç—å —Ç–∏–ø –º–µ–Ω—é
export const createMenuType = async (req: Request, res: Response) => {
  try {
    const { name, slug, description, sortOrder } = req.body;
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º slug –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
    const generatedSlug = slug || name
      .toLowerCase()
      .replace(/[^–∞-—è—ëa-z0-9\s-]/g, '')
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-')
      .trim();
    
    const menuType = await prisma.menuType.create({
      data: {
        name,
        slug: generatedSlug,
        description,
        sortOrder: sortOrder || 0
      }
    });
    
    res.status(201).json(menuType);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–ø–∞ –º–µ–Ω—é:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–ø–∞ –º–µ–Ω—é' });
  }
};

// –û–±–Ω–æ–≤–∏—Ç—å —Ç–∏–ø –º–µ–Ω—é
export const updateMenuType = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    const { name, slug, description, isActive, sortOrder } = req.body;
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º slug –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
    const generatedSlug = slug || name
      .toLowerCase()
      .replace(/[^–∞-—è—ëa-z0-9\s-]/g, '')
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-')
      .trim();
    
    const menuType = await prisma.menuType.update({
      where: { id: parseInt(id) },
      data: {
        name,
        slug: generatedSlug,
        description,
        isActive,
        sortOrder
      }
    });
    
    res.json(menuType);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –º–µ–Ω—é:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –º–µ–Ω—é' });
  }
};

// –£–¥–∞–ª–∏—Ç—å —Ç–∏–ø –º–µ–Ω—é
export const deleteMenuType = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    const menuTypeId = parseInt(id);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const relatedCategories = await prisma.menuCategory.findMany({
      where: { menuTypeId },
      include: {
        _count: {
          select: { items: true }
        }
      }
    });
    
    if (relatedCategories.length > 0) {
      const totalItems = relatedCategories.reduce((sum, cat) => sum + cat._count.items, 0);
      return res.status(400).json({ 
        error: `–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ç–∏–ø –º–µ–Ω—é. –£ –Ω–µ–≥–æ –µ—Å—Ç—å ${relatedCategories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å ${totalItems} –±–ª—é–¥–∞–º–∏. –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –±–ª—é–¥–∞.` 
      });
    }
    
    await prisma.menuType.delete({
      where: { id: menuTypeId }
    });
    
    res.json({ message: '–¢–∏–ø –º–µ–Ω—é —É–¥–∞–ª–µ–Ω' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –º–µ–Ω—é:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –º–µ–Ω—é' });
  }
};

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
export const getMenuCategories = async (req: Request, res: Response) => {
  try {
    const categories = await prisma.menuCategory.findMany({
      where: { isActive: true },
      orderBy: { sortOrder: 'asc' },
      include: {
        items: {
          where: { isActive: true },
          orderBy: { sortOrder: 'asc' }
        }
      }
    });
    res.json(categories);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ–Ω—é:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ–Ω—é' });
  }
};

// –°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
export const createMenuCategory = async (req: Request, res: Response) => {
  try {
    const { name, slug, description, menuTypeId, sortOrder } = req.body;
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º slug –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
    const generatedSlug = slug || name
      .toLowerCase()
      .replace(/[^–∞-—è—ëa-z0-9\s-]/g, '')
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-')
      .trim();
    
    const category = await prisma.menuCategory.create({
      data: {
        name,
        slug: generatedSlug,
        description,
        menuTypeId: parseInt(menuTypeId),
        sortOrder: sortOrder || 0
      }
    });
    
    res.status(201).json(category);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é' });
  }
};

// –û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
export const updateMenuCategory = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    const { name, slug, description, menuTypeId, isActive, sortOrder } = req.body;
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º slug –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
    const generatedSlug = slug || name
      .toLowerCase()
      .replace(/[^–∞-—è—ëa-z0-9\s-]/g, '')
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-')
      .trim();
    
    const category = await prisma.menuCategory.update({
      where: { id: parseInt(id) },
      data: {
        name,
        slug: generatedSlug,
        description,
        menuTypeId: parseInt(menuTypeId),
        isActive,
        sortOrder
      }
    });
    
    res.json(category);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é' });
  }
};

// –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
export const deleteMenuCategory = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    const categoryId = parseInt(id);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –±–ª—é–¥–∞
    const relatedItems = await prisma.menuItem.findMany({
      where: { categoryId }
    });
    
    if (relatedItems.length > 0) {
      return res.status(400).json({ 
        error: `–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –£ –Ω–µ—ë –µ—Å—Ç—å ${relatedItems.length} –±–ª—é–¥. –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ –≤—Å–µ –±–ª—é–¥–∞.` 
      });
    }
    
    await prisma.menuCategory.delete({
      where: { id: categoryId }
    });
    
    res.json({ message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' });
  }
};

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –±–ª—é–¥–∞
export const getMenuItems = async (req: Request, res: Response) => {
  try {
    const items = await prisma.menuItem.findMany({
      where: { isActive: true },
      orderBy: { sortOrder: 'asc' },
      include: {
        category: {
          include: {
            menuType: true
          }
        }
      }
    });
    res.json(items);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–ª—é–¥:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–ª—é–¥' });
  }
};

// –°–æ–∑–¥–∞—Ç—å –±–ª—é–¥–æ
export const createMenuItem = async (req: Request, res: Response) => {
  try {
    console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –±–ª—é–¥–∞. –î–∞–Ω–Ω—ã–µ:', req.body);
    
    const {
      name,
      slug,
      description,
      price,
      currency,
      imageUrl,
      categoryId,
      allergens,
      weight,
      calories,
      preparation,
      isPopular,
      sortOrder
    } = req.body;
    
    console.log('üìù –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', {
      name,
      slug,
      description,
      price,
      currency,
      imageUrl,
      categoryId,
      allergens,
      weight,
      calories,
      preparation,
      isPopular,
      sortOrder
    });
    
    // –ï—Å–ª–∏ sortOrder –Ω–µ —É–∫–∞–∑–∞–Ω, –Ω–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏ –¥–æ–±–∞–≤–ª—è–µ–º 1
    let finalSortOrder = sortOrder;
    if (!sortOrder && sortOrder !== 0) {
      const maxSortOrder = await prisma.menuItem.findFirst({
        where: { categoryId: parseInt(categoryId) },
        orderBy: { sortOrder: 'desc' },
        select: { sortOrder: true }
      });
      finalSortOrder = (maxSortOrder?.sortOrder || 0) + 1;
      console.log('üî¢ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω sortOrder:', finalSortOrder);
    }
    
    const item = await prisma.menuItem.create({
      data: {
        name,
        description,
        price: parseFloat(price),
        currency: currency || '‚ÇΩ',
        imageUrl,
        categoryId: parseInt(categoryId),
        allergens: allergens || [],
        weight,
        calories: calories ? parseInt(calories) : null,
        preparation,
        isPopular: isPopular || false,
        sortOrder: finalSortOrder
      }
    });
    
    console.log('‚úÖ –ë–ª—é–¥–æ —Å–æ–∑–¥–∞–Ω–æ:', item);
    res.status(201).json(item);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–ª—é–¥–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–ª—é–¥–∞' });
  }
};

// –û–±–Ω–æ–≤–∏—Ç—å –±–ª—é–¥–æ
export const updateMenuItem = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    const {
      name,
      description,
      price,
      currency,
      imageUrl,
      categoryId,
      allergens,
      weight,
      calories,
      preparation,
      isPopular,
      isActive,
      sortOrder
    } = req.body;
    const itemId = parseInt(id);
    
    // –ï—Å–ª–∏ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è sortOrder, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
    if (sortOrder !== undefined) {
      const existingItem = await prisma.menuItem.findFirst({
        where: {
          sortOrder: sortOrder,
          categoryId: parseInt(categoryId),
          id: { not: itemId }
        }
      });
      
      if (existingItem) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç, —Å–¥–≤–∏–≥–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±–ª—é–¥–∞
        await prisma.menuItem.updateMany({
          where: {
            categoryId: parseInt(categoryId),
            sortOrder: { gte: sortOrder },
            id: { not: itemId }
          },
          data: {
            sortOrder: { increment: 1 }
          }
        });
      }
    }
    
    const item = await prisma.menuItem.update({
      where: { id: itemId },
      data: {
        name,
        description,
        price: parseFloat(price),
        currency,
        imageUrl,
        categoryId: parseInt(categoryId),
        allergens: allergens || [],
        weight,
        calories: calories ? parseInt(calories) : null,
        preparation,
        isPopular,
        isActive,
        sortOrder
      }
    });
    
    res.json(item);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–ª—é–¥–∞' });
  }
};

// –£–¥–∞–ª–∏—Ç—å –±–ª—é–¥–æ
export const deleteMenuItem = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    
    await prisma.menuItem.delete({
      where: { id: parseInt(id) }
    });
    
    res.json({ message: '–ë–ª—é–¥–æ —É–¥–∞–ª–µ–Ω–æ' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–ª—é–¥–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–ª—é–¥–∞' });
  }
}; 

// –ò—Å–ø—Ä–∞–≤–∏—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∑–Ω–∞—á–µ–Ω–∏—è sortOrder
export const fixSortOrder = async (req: Request, res: Response) => {
  try {
    console.log('üîß –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏...');
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ menuTypeId
    const categories = await prisma.menuCategory.findMany({
      orderBy: [{ menuTypeId: 'asc' }, { sortOrder: 'asc' }, { id: 'asc' }]
    });
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ menuTypeId
    const categoriesByMenuType = categories.reduce((acc, category) => {
      if (!acc[category.menuTypeId]) {
        acc[category.menuTypeId] = [];
      }
      acc[category.menuTypeId].push(category);
      return acc;
    }, {} as Record<number, typeof categories>);
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º sortOrder –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
    for (const [menuTypeId, categoryGroup] of Object.entries(categoriesByMenuType)) {
      console.log(`üìù –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–∏–ø–∞ –º–µ–Ω—é ${menuTypeId}:`);
      
      for (let i = 0; i < categoryGroup.length; i++) {
        const category = categoryGroup[i];
        console.log(`  - ${category.name}: sortOrder ${category.sortOrder} ‚Üí ${i}`);
        
        await prisma.menuCategory.update({
          where: { id: category.id },
          data: { sortOrder: i }
        });
      }
    }
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –±–ª—é–¥–∞ - –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ categoryId
    const items = await prisma.menuItem.findMany({
      orderBy: [{ categoryId: 'asc' }, { sortOrder: 'asc' }, { id: 'asc' }]
    });
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –±–ª—é–¥–∞ –ø–æ categoryId
    const itemsByCategory = items.reduce((acc, item) => {
      if (!acc[item.categoryId]) {
        acc[item.categoryId] = [];
      }
      acc[item.categoryId].push(item);
      return acc;
    }, {} as Record<number, typeof items>);
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º sortOrder –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –±–ª—é–¥
    for (const [categoryId, itemGroup] of Object.entries(itemsByCategory)) {
      console.log(`üçΩÔ∏è –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –±–ª—é–¥–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryId}:`);
      
      for (let i = 0; i < itemGroup.length; i++) {
        const item = itemGroup[i];
        console.log(`  - ${item.name}: sortOrder ${item.sortOrder} ‚Üí ${i}`);
        
        await prisma.menuItem.update({
          where: { id: item.id },
          data: { sortOrder: i }
        });
      }
    }
    
    console.log('‚úÖ –ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω!');
    res.json({ message: '–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω' });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏' });
  }
}; 