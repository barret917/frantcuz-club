import axios from 'axios';
import dotenv from 'dotenv';
import { URLSearchParams } from 'url';
import { PrismaClient, PaymentStatus, OrderStatus } from '@prisma/client';
import { sendTicketsToCustomer, notifyAdminAboutOrder } from './email.controller';
import {
  CreateInvoiceResponse,
  PaymentStatusResponse,
  UserTicket
} from './ticket.types';

dotenv.config();

class PaymentService {
    private PAYKEEPER_USER: string;
    private PAYKEEPER_PASSWORD: string;
    private PAYKEEPER_SERVER: string;
    private headers: any;
    private prisma: PrismaClient;

    constructor() {
        // –ë–µ—Ä–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ process.env –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        this.PAYKEEPER_USER = 'admin';
        this.PAYKEEPER_PASSWORD = '1234567Asd!';
        this.PAYKEEPER_SERVER = 'https://dali-khinkali.server.paykeeper.ru';
        this.prisma = new PrismaClient();

        this.validateConfig();
        this.initHeaders();
    }

    private validateConfig() {
        if (!this.PAYKEEPER_USER || !this.PAYKEEPER_PASSWORD || !this.PAYKEEPER_SERVER) {
            throw new Error('PayKeeper configuration is missing in .env file');
        }
    }

    private initHeaders() {
        const authString = `${this.PAYKEEPER_USER}:${this.PAYKEEPER_PASSWORD}`;
        this.headers = {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Authorization': `Basic ${Buffer.from(authString).toString('base64')}`
        };
    }

    async initialize() {
        console.log('Connecting to PayKeeper...');
        try {
            // –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤, —Ç–∞–∫ –∫–∞–∫ —Ä–∞–∑–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ PayKeeper –º–æ–≥—É—Ç –∏–º–µ—Ç—å —Ä–∞–∑–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
            const endpoints = [
                '/info/settings/token/',
                '/info/settings/',
                '/info/'
            ];
            
            let connected = false;
            
            for (const endpoint of endpoints) {
                try {
                    const response = await axios.get(`${this.PAYKEEPER_SERVER}${endpoint}`, {
                        headers: this.headers,
                        timeout: 5000
                    });
                    
                    if (response.status === 200) {
                        console.log(`Successfully connected to PayKeeper via ${endpoint}`);
                        connected = true;
                        break;
                    }
                } catch (error) {
                    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫–∏ 404 –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
                    if (axios.isAxiosError(error) && error.response?.status === 404) {
                        console.log(`Endpoint ${endpoint} not available, trying next...`);
                        continue;
                    }
                }
            }
            
            // –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª —É—Å–ø–µ—à–Ω–æ, –ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Å—á–µ—Ç
            if (!connected) {
                console.log('Trying test connection via invoice creation...');
                try {
                    const tokenResponse = await axios.post(
                        `${this.PAYKEEPER_SERVER}/info/settings/token/`,
                        {},
                        { headers: this.headers, timeout: 5000 }
                    );
                    
                    if (tokenResponse.data?.token) {
                        console.log('Successfully connected to PayKeeper via token endpoint');
                        connected = true;
                    }
                } catch (tokenError) {
                    console.log('Token endpoint also unavailable, but proceeding anyway...');
                    // –î–∞–∂–µ –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
                    connected = true;
                }
            }
            
            return connected;
            
        } catch (error: any) {
            console.error('PayKeeper connection error:', error.message);
            // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
            console.log('Proceeding in limited mode - invoice creation may still work');
            return true;
        }
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç —Å—á–µ—Ç –≤ PayKeeper
     */
    async createInvoice(ticketData: any): Promise<CreateInvoiceResponse> {
        try {
            // 1. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
            const tokenResponse = await axios.post(
                `${this.PAYKEEPER_SERVER}/info/settings/token/`,
                {},
                { headers: this.headers, timeout: 10000 }
            );

            const token = tokenResponse.data?.token;
            if (!token) throw new Error('Failed to get token from PayKeeper');

            // 2. –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—á–µ—Ç–∞
            const customerName = `${ticketData.customer.first_name} ${ticketData.customer.last_name}`.trim();
            const paymentParams = new URLSearchParams();

            paymentParams.append('pay_amount', ticketData.price.toString());
            paymentParams.append('clientid', customerName.substring(0, 100));
            paymentParams.append('orderid', ticketData.id.toString());
            paymentParams.append('service_name', `–ë–∏–ª–µ—Ç: ${ticketData.event.title}`.substring(0, 100));
            paymentParams.append('client_email', ticketData.customer.email);
            paymentParams.append('client_phone', ticketData.customer.phone);
            paymentParams.append('token', token);
            paymentParams.append('payment_currency', 'RUB');

            // 3. –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç
            const invoiceResponse = await axios.post(
                `${this.PAYKEEPER_SERVER}/change/invoice/preview/`,
                paymentParams,
                { headers: this.headers, timeout: 15000 }
            );

            const invoiceId = invoiceResponse.data?.invoice_id;
            if (!invoiceId) throw new Error('Failed to get invoice ID');

            return {
                success: true,
                paymentId: invoiceId,
                paymentUrl: `${this.PAYKEEPER_SERVER}/bill/${invoiceId}/`,
                tickets: []
            };

        } catch (error: any) {
            console.error('Invoice creation error:', error);
            return {
                success: false,
                error: error.message,
                paymentUrl: '',
                paymentId: '',
                tickets: []
            };
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –ø–æ invoice_id
     */
    async getPaymentStatus(invoiceId: string): Promise<any> {
        try {
            const response = await axios.get(
                `${this.PAYKEEPER_SERVER}/info/invoice/byid/?id=${invoiceId}`,
                { headers: this.headers, timeout: 10000 }
            );

            if (!response.data || !response.data.status) {
                throw new Error('Invalid response from PayKeeper');
            }

            return {
                success: true,
                status: response.data.status,
                amount: response.data.pay_amount,
                orderId: response.data.orderid,
                paymentDate: response.data.paid_at,
                clientEmail: response.data.client_email,
                clientPhone: response.data.client_phone
            };
        } catch (error: any) {
            console.error('Payment status check error:', error);
            return {
                success: false,
                error: error.message
            };
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
     */
    async processSuccessfulPayment(invoiceId: string): Promise<{ success: boolean; userTickets?: UserTicket[]; error?: string }> {
        try {
            console.log('üîÑ Processing successful payment for invoice:', invoiceId);
            
            // 1. –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑ –ø–æ payment_id
            const order = await this.prisma.order.findFirst({
                where: { payment_id: invoiceId }
            });

            if (!order) {
                console.error('‚ùå Order not found for payment:', invoiceId);
                throw new Error('Order not found for this payment');
            }

            console.log('üìã Found order:', order.id);

            // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –∑–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
            if (order.status === 'paid') {
                console.log('‚ÑπÔ∏è Order already processed, skipping...');
                return {
                    success: true,
                    userTickets: []
                };
            }

            // 3. –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –±–∏–ª–µ—Ç—ã —Å —Ç–∞–∫–∏–º –∂–µ payment_id
            const userTickets = await this.prisma.userTicket.findMany({
                where: { payment_id: invoiceId },
                include: {
                    ticket: {
                        select: {
                            id: true,
                            title: true,
                            short_description: true,
                            event_date: true,
                            event_location: true,
                            price: true
                        }
                    }
                }
            });

            console.log('üé´ Found user tickets:', userTickets.length);
            
            if (!userTickets || userTickets.length === 0) {
                console.error('‚ùå No user tickets found for payment:', invoiceId);
                throw new Error('UserTickets not found for this payment');
            }

            // 4. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –±–∏–ª–µ—Ç–æ–≤
            await this.prisma.userTicket.updateMany({
                where: { payment_id: invoiceId },
                data: {
                    payment_status: PaymentStatus.paid,
                    expires_at: null,
                }
            });

            console.log('‚úÖ Updated ticket status to paid');

            // 5. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
            await this.prisma.order.update({
                where: { id: order.id },
                data: {
                    status: 'paid' as OrderStatus
                }
            });

            console.log('‚úÖ Updated order status to paid');

            // 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –±—ã–ª —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
            console.log('üìß Sending email to:', order.email);

            const totalAmount = parseFloat(order.total_amount.toString());

            const orderDataForEmail = {
                id: order.id,
                first_name: order.first_name,
                last_name: order.last_name,
                email: order.email,
                phone: order.phone,
                total_amount: totalAmount,
                created_at: order.created_at,
                status: "paid" as const
            };

            // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try {
                const emailResult = await sendTicketsToCustomer(
                    order.email,
                    orderDataForEmail,
                    userTickets as any
                );
                console.log('üìß User email result:', emailResult);
            } catch (emailError) {
                console.error('‚ùå User email error:', emailError);
            }

            // –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            try {
                const adminResult = await notifyAdminAboutOrder(
                    orderDataForEmail,
                    userTickets as any
                );
                console.log('üìß Admin email result:', adminResult);
            } catch (adminEmailError) {
                console.error('‚ùå Admin email error:', adminEmailError);
            }

            return {
                success: true,
                userTickets: userTickets as unknown as UserTicket[]
            };

        } catch (error: any) {
            console.error('‚ùå Payment processing error:', error);
            return {
                success: false,
                error: error.message
            };
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –ø–ª–∞—Ç–µ–∂–∞
     */
    async cancelPayment(invoiceId: string): Promise<{ success: boolean; error?: string }> {
        try {
            const userTickets = await this.prisma.userTicket.findMany({
                where: { payment_id: invoiceId }
            });

            if (userTickets && userTickets.length > 0) {
                await this.prisma.userTicket.updateMany({
                    where: { payment_id: invoiceId },
                    data: { payment_status: PaymentStatus.canceled }
                });
            }

            return { success: true };
        } catch (error: any) {
            console.error('Cancel payment error:', error);
            return { success: false, error: error.message };
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     */
    async checkPaymentAndNotify(invoiceId: string, notifyCallback: (message: string) => Promise<void>): Promise<boolean> {
        try {
            // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            const status = await this.getPaymentStatus(invoiceId);
            if (!status.success) {
                await notifyCallback(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞: ${status.error}`);
                return false;
            }

            // 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
            switch (status.status) {
                case 'paid':
                    const processResult = await this.processSuccessfulPayment(invoiceId);
                    if (processResult.success) {
                        const tickets = processResult.userTickets || [];

                        // –ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        let message = `‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!\n` +
                            `üí≥ –°—É–º–º–∞: ${status.amount} RUB\n` +
                            `üìÖ –î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã: ${new Date().toLocaleString()}\n\n` +
                            `üé´ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –±–∏–ª–µ—Ç—ã (${tickets.length} —à—Ç.):\n`;

                        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –±–∏–ª–µ—Ç–µ
                        tickets.forEach((ticket: any, index: number) => {
                            message += `\n${index + 1}. –ù–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞: ${ticket.ticket_number}\n` +
                                `   –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${new Date(ticket.created_at).toLocaleString()}\n` +
                                `   –°—Ç–∞—Ç—É—Å: ${ticket.is_used ? '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω' : '–ê–∫—Ç–∏–≤–µ–Ω'}\n`;
                        });

                        await notifyCallback(message);
                        return true;
                    } else {
                        await notifyCallback(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: ${processResult.error}`);
                        return false;
                    }

                case 'pending':
                    await notifyCallback('‚è≥ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª. –ï—Å–ª–∏ –≤—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5-10 –º–∏–Ω—É—Ç.');
                    return false;

                case 'canceled':
                    await this.cancelPayment(invoiceId);
                    await notifyCallback('‚ùå –ü–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑.');
                    return false;

                default:
                    await notifyCallback(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: ${status.status}`);
                    return false;
            }
        } catch (error: any) {
            console.error('Payment check error:', error);
            await notifyCallback('‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞');
            return false;
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–∞
     */
    async setupPaymentAutoCheck(invoiceId: string, notifyCallback: (message: string) => Promise<void>, intervalMinutes: number = 2): Promise<NodeJS.Timeout> {
        const checkInterval = setInterval(async () => {
            try {
                const result = await this.checkPaymentAndNotify(invoiceId, notifyCallback);

                if (result) {
                    clearInterval(checkInterval);
                }

                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ –±–∏–ª–µ—Ç —É–∂–µ –æ–ø–ª–∞—á–µ–Ω, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
                const userTicket = await this.prisma.userTicket.findFirst({
                    where: { payment_id: invoiceId }
                });

                if (userTicket && userTicket.payment_status === PaymentStatus.paid) {
                    clearInterval(checkInterval);
                }
            } catch (error: any) {
                console.error('Auto check error:', error);
            }
        }, intervalMinutes * 60 * 1000);

        return checkInterval;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ pending –ø–ª–∞—Ç–µ–∂–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å—ã
     */
    async checkAllPendingPayments(notifyCallback?: (message: string) => Promise<void>): Promise<{ 
        success: boolean; 
        checked: number;
        paid: number;
        canceled: number;
        errors: string[];
    }> {
        try {
            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ payment_id —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            const pendingPayments = await this.prisma.userTicket.groupBy({
                by: ['payment_id'],
                where: {
                    payment_status: PaymentStatus.pending,
                    payment_id: { not: null }
                },
                _count: {
                    id: true
                }
            });

            let paidCount = 0;
            let canceledCount = 0;
            const errors: string[] = [];
            const processedPayments = new Set<string>(); // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π

            console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${pendingPayments.length} pending –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`);

            for (const payment of pendingPayments) {
                try {
                    if (!payment.payment_id || processedPayments.has(payment.payment_id)) {
                        continue;
                    }

                    processedPayments.add(payment.payment_id);

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
                    const paymentStatus = await this.getPaymentStatus(payment.payment_id);
                    
                    if (!paymentStatus.success) {
                        errors.push(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ ${payment.payment_id}: ${paymentStatus.error}`);
                        continue;
                    }

                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
                    switch (paymentStatus.status) {
                        case 'paid':
                            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
                            const processResult = await this.processSuccessfulPayment(payment.payment_id);
                            if (processResult.success) {
                                paidCount++;
                                
                                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å callback
                                if (notifyCallback) {
                                    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                                    const order = await this.prisma.order.findFirst({
                                        where: { payment_id: payment.payment_id },
                                        select: {
                                            first_name: true,
                                            last_name: true,
                                            email: true
                                        }
                                    });
                                    
                                    const customerName = order 
                                        ? `${order.first_name} ${order.last_name}`
                                        : '–ö–ª–∏–µ–Ω—Ç';
                                        
                                    await notifyCallback(
                                        `‚úÖ –ü–ª–∞—Ç–µ–∂ ${payment.payment_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω\n` +
                                        `üë§ ${customerName}\n` +
                                        `üé´ –ë–∏–ª–µ—Ç–æ–≤: ${payment._count.id} —à—Ç.\n` +
                                        `üí≥ –°—É–º–º–∞: ${paymentStatus.amount} RUB`
                                    );
                                }
                            } else {
                                errors.push(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ ${payment.payment_id}: ${processResult.error}`);
                            }
                            break;

                        case 'canceled':
                            // –û—Ç–º–µ–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂
                            await this.cancelPayment(payment.payment_id);
                            canceledCount++;
                            break;

                        case 'pending':
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è (–±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –±–∏–ª–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏)
                            const sampleTicket = await this.prisma.userTicket.findFirst({
                                where: { payment_id: payment.payment_id },
                                select: { expires_at: true }
                            });
                            
                            if (sampleTicket && sampleTicket.expires_at && sampleTicket.expires_at < new Date()) {
                                await this.cancelPayment(payment.payment_id);
                                canceledCount++;
                                
                                if (notifyCallback) {
                                    await notifyCallback(
                                        `‚åõ –ü–ª–∞—Ç–µ–∂ ${payment.payment_id} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω –∏ –æ—Ç–º–µ–Ω–µ–Ω\n` +
                                        `üé´ –ë–∏–ª–µ—Ç–æ–≤: ${payment._count.id} —à—Ç.`
                                    );
                                }
                            }
                            break;

                        default:
                            console.log(`‚ÑπÔ∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ ${payment.payment_id}: ${paymentStatus.status}`);
                    }

                    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å PayKeeper
                    await new Promise(resolve => setTimeout(resolve, 500));

                } catch (paymentError: any) {
                    errors.push(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ ${payment.payment_id}: ${paymentError.message}`);
                    continue;
                }
            }

            console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${paidCount} –æ–ø–ª–∞—á–µ–Ω–æ, ${canceledCount} –æ—Ç–º–µ–Ω–µ–Ω–æ, ${errors.length} –æ—à–∏–±–æ–∫`);

            return {
                success: errors.length === 0,
                checked: pendingPayments.length,
                paid: paidCount,
                canceled: canceledCount,
                errors
            };

        } catch (error: any) {
            console.error('Error checking pending payments:', error);
            return {
                success: false,
                checked: 0,
                paid: 0,
                canceled: 0,
                errors: [error.message]
            };
        }
    }

    /**
     * –û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ (–¥–ª—è cron job)
     */
    async cancelExpiredPayments(notifyCallback?: (message: string, email?: string) => Promise<void>): Promise<{ success: boolean; canceled?: number; error?: string }> {
        try {
            const expiredTickets = await this.prisma.userTicket.findMany({
                where: {
                    payment_status: PaymentStatus.pending,
                    expires_at: { lt: new Date() },
                    payment_id: { not: null }
                },
                include: {
                    order_item: {
                        include: {
                            order: {
                                select: {
                                    email: true
                                }
                            }
                        }
                    }
                }
            });

            for (const ticket of expiredTickets) {
                if (ticket.payment_id) {
                    await this.cancelPayment(ticket.payment_id);
                    if (notifyCallback) {
                        const customerEmail = ticket.order_item?.order?.email;
                        await notifyCallback(
                            `‚åõ –í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã –±–∏–ª–µ—Ç–∞ ${ticket.ticket_number} –∏—Å—Ç–µ–∫–ª–æ.\n` +
                            `–ó–∞–∫–∞–∑ –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑.`,
                            customerEmail || undefined
                        );
                    }
                }
            }

            return { success: true, canceled: expiredTickets.length };
        } catch (error: any) {
            console.error('Error canceling expired payments:', error);
            return { success: false, error: error.message };
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
     */
    async checkPaymentStatus(invoiceId: string): Promise<PaymentStatusResponse> {
        try {
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –∑–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
            const existingOrder = await this.prisma.order.findFirst({
                where: { payment_id: invoiceId }
            });

            if (existingOrder && existingOrder.status === 'paid') {
                return {
                    success: true,
                    status: 'paid',
                    message: '–ü–ª–∞—Ç–µ–∂ —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–∞–Ω–µ–µ'
                };
            }

            const status = await this.getPaymentStatus(invoiceId);
            if (!status.success) {
                return {
                    success: false,
                    status: 'unknown',
                    error: status.error
                };
            }

            switch (status.status) {
                case 'paid':
                    const processResult = await this.processSuccessfulPayment(invoiceId);
                    return {
                        success: processResult.success,
                        status: 'paid',
                        userTickets: processResult.userTickets,
                        error: processResult.error
                    };

                case 'pending':
                    return {
                        success: true,
                        status: 'pending',
                        message: '–ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª'
                    };

                case 'canceled':
                    await this.cancelPayment(invoiceId);
                    return {
                        success: true,
                        status: 'canceled',
                        message: '–ü–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω'
                    };

                default:
                    return {
                        success: false,
                        status: 'unknown',
                        error: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: ${status.status}`
                    };
            }
        } catch (error: any) {
            console.error('Payment check error:', error);
            return {
                success: false,
                status: 'unknown',
                error: error.message
            };
        }
    }

    /**
     * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Prisma
     */
    async disconnect() {
        await this.prisma.$disconnect();
    }
}

export default new PaymentService();