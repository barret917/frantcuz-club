import { prisma } from "../prisma";
import { NextFunction, Request, RequestHandler, Response} from "express";

export const createZone = async (req: Request, res: Response) => {
    try {
        const {
            name,
            openTime,
            closeTime,
            imageUrl
        } = req.body
        const response = await prisma.zone.create({
            data: {
                name,
                closeTime,
                openTime,
                imageUrl
            }
        })

      res.status(200).json(response)
       
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–æ–Ω—ã', error)
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–æ–Ω—É' })
    }
};

export const getZones = async (req: Request, res: Response) => {
    try {
        const response = await prisma.zone.findMany();
        res.status(200).json(response);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–æ–Ω', error)
        res.status(500).json({error:'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–æ–Ω—ã'})
    }
}

export const saveZoneItems: RequestHandler = async (req, res) => {
  try {
    console.log('üîß –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–æ–Ω—ã...')
    console.log('üì• –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', JSON.stringify(req.body, null, 2))
    
    // 1) –ó–∞–±–∏—Ä–∞–µ–º –∏–∑ —Ç–µ–ª–∞ –º–∞—Å—Å–∏–≤–∞ items
    const items = req.body as Array<{
      zoneId: number;
      floor: number;
      label: string;
      type: 'table' | 'booth' | 'stage' | 'bar' | 'danceFloor' | 'gameTable' | 'lounge' | 'spaRoom' | 'cinemaHall' | 'custom';
      seats?: string | number;
      x: number;
      y: number;
      width: number;
      height: number;
      isBooking?: boolean;
      isActive?: boolean;
    }>;

    console.log('üìã –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:', items.length)

    if (!items.length) {
      console.log('‚ùå –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤')
      res.status(400).json({ error: '–ù—É–∂–µ–Ω –Ω–µ–ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤' });
      return;
    }

    const zoneId = items[0].zoneId;
    console.log('üéØ ZoneId:', zoneId)

    // 2) –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —ç—Ç–æ–π –∑–æ–Ω—ã
    console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∑–æ–Ω—ã', zoneId)
    await prisma.zoneItem.deleteMany({ where: { zoneId } });

    // 3) –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ ‚Äî –ø—Ä–∏–≤–æ–¥–∏–º seats –∫ number|null
    const data = items.map(it => {
      const seatsNum =
        it.seats == null
          ? null
          : Number(it.seats);            // —è–≤–Ω–æ number

      const itemData = {
        zoneId: it.zoneId,
        floor:  it.floor,
        label:  it.label,
        type:   it.type,
        seats:  seatsNum,               // —Ç–µ–ø–µ—Ä—å number | null
        x:      it.x,                   // Float - –Ω–µ –Ω—É–∂–Ω–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        y:      it.y,                   // Float - –Ω–µ –Ω—É–∂–Ω–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        width:  it.width,               // Float - –Ω–µ –Ω—É–∂–Ω–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        height: it.height,              // Float - –Ω–µ –Ω—É–∂–Ω–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        isBooking: it.isBooking ?? false,
        isActive: it.isActive ?? true,
      };
      
      console.log('üìù –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç:', itemData)
      return itemData;
    });

    console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º', data.length, '—ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')

    // 4) –ú–∞—Å—Å–æ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞
    const result = await prisma.zoneItem.createMany({ data });

    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:', result.count, '—ç–ª–µ–º–µ–Ω—Ç–æ–≤')
    res.status(200).json({ inserted: result.count });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–æ–Ω—ã:', err);
    res
      .status(500)
      .json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –∑–æ–Ω—ã' });
  }
};

export const getZoneItems: RequestHandler = async (req, res) => {
  const zoneId = Number(req.params.zoneId);
  try {
    const items = await prisma.zoneItem.findMany({
      where: { zoneId },
      orderBy: { id: 'asc' }
    });
    
    res.status(200).json(items);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–æ–Ω—ã', err);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –∑–æ–Ω—ã' });
  }
}; 