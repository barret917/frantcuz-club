generator client {
  provider = "prisma-client-js"
  output   = "../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Zone {
  id        Int        @id @default(autoincrement())
  name      String
  openTime  String
  closeTime String
  imageUrl  String
  items     ZoneItem[]
}

model ZoneItem {
  id           Int           @id @default(autoincrement())
  zoneId       Int
  floor        Int           @default(1)
  label        String
  type         String
  isBooking    Boolean       @default(false)
  isActive     Boolean       @default(true)
  x            Float
  y            Float
  width        Float
  height       Float
  seats        Int?
  reservations Reservation[]
  zone         Zone          @relation(fields: [zoneId], references: [id])
}

model Reservation {
  id         Int               @id @default(autoincrement())
  zoneItemId Int
  userName   String
  phone      String
  startsAt   DateTime
  endsAt     DateTime
  deposit    Decimal           @db.Decimal(5, 2)
  status     ReservationStatus @default(booked)
  payments   Payment[]
  zoneItem   ZoneItem          @relation(fields: [zoneItemId], references: [id])
}

model Payment {
  id            Int         @id @default(autoincrement())
  reservationId Int
  amount        Decimal     @db.Decimal(5, 2)
  payDate       DateTime    @default(now())
  refunded      Boolean     @default(false)
  reservation   Reservation @relation(fields: [reservationId], references: [id])
}

model MenuType {
  id          Int            @id @default(autoincrement())
  name        String
  slug        String         @unique
  description String?
  isActive    Boolean        @default(true)
  sortOrder   Int            @default(0)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  categories  MenuCategory[]
}

model MenuCategory {
  id          Int        @id @default(autoincrement())
  menuTypeId  Int
  name        String
  slug        String     @unique
  description String?
  isActive    Boolean    @default(true)
  sortOrder   Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  menuType    MenuType   @relation(fields: [menuTypeId], references: [id])
  items       MenuItem[]
}

model MenuItem {
  id          Int          @id @default(autoincrement())
  categoryId  Int
  name        String
  description String?
  price       Decimal      @db.Decimal(8, 2)
  currency    String       @default("₽")
  imageUrl    String?
  isActive    Boolean      @default(true)
  isPopular   Boolean      @default(false)
  allergens   String[]
  weight      String?
  calories    Int?
  preparation String?
  sortOrder   Int          @default(0)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  category    MenuCategory @relation(fields: [categoryId], references: [id])
}

enum ReservationStatus {
  booked
  arrived
  no_show
  cancelled
}

// ---------- Бильярд ----------
model BilliardsService {
  id            Int      @id @default(autoincrement())
  name          String   // "Русский бильярд", "Американский пул", "VIP залы"
  type          String   // "russian", "american", "vip"
  weekdayPrice  Decimal  @db.Decimal(8,2) // Цена в будни за час
  weekendPrice  Decimal  @db.Decimal(8,2) // Цена в выходные за час
  description   String?  // Описание услуги
  imageUrl      String?  // Ссылка на изображение
  isActive      Boolean  @default(true)
  sortOrder     Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([type])
}

// ---------- Настройки бильярда ----------
model BilliardsSettings {
  id                    Int      @id @default(autoincrement())
  bookingFee            Decimal  @db.Decimal(8,2) @default(100) // Стоимость бронирования
  bookingTimeoutMinutes Int      @default(20) // Таймаут бронирования в минутах
  minBookingDuration    Int      @default(60) // Минимальная длительность бронирования в минутах
  maxBookingDuration    Int      @default(480) // Максимальная длительность бронирования в минутах
  isActive              Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}
