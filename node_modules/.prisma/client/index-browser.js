
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.HallScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  type: 'type',
  imageUrl: 'imageUrl',
  isActive: 'isActive',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ZoneScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  hallId: 'hallId',
  openTime: 'openTime',
  closeTime: 'closeTime',
  imageUrl: 'imageUrl',
  description: 'description',
  isActive: 'isActive',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ZoneItemScalarFieldEnum = {
  id: 'id',
  zoneId: 'zoneId',
  floor: 'floor',
  label: 'label',
  type: 'type',
  isBooking: 'isBooking',
  isActive: 'isActive',
  x: 'x',
  y: 'y',
  width: 'width',
  height: 'height',
  seats: 'seats',
  capacity: 'capacity',
  pricePerHour: 'pricePerHour',
  pricePerSeat: 'pricePerSeat',
  pricePerSlot: 'pricePerSlot',
  minDuration: 'minDuration',
  maxDuration: 'maxDuration',
  timeSlots: 'timeSlots',
  description: 'description',
  features: 'features'
};

exports.Prisma.ReservationScalarFieldEnum = {
  id: 'id',
  zoneItemId: 'zoneItemId',
  type: 'type',
  userName: 'userName',
  phone: 'phone',
  startsAt: 'startsAt',
  endsAt: 'endsAt',
  deposit: 'deposit',
  status: 'status',
  seatsCount: 'seatsCount',
  guestsCount: 'guestsCount',
  duration: 'duration',
  comment: 'comment',
  specialRequests: 'specialRequests',
  totalPrice: 'totalPrice'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  reservationId: 'reservationId',
  amount: 'amount',
  payDate: 'payDate',
  refunded: 'refunded'
};

exports.Prisma.MenuTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  isActive: 'isActive',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MenuCategoryScalarFieldEnum = {
  id: 'id',
  menuTypeId: 'menuTypeId',
  name: 'name',
  slug: 'slug',
  description: 'description',
  isActive: 'isActive',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MenuItemScalarFieldEnum = {
  id: 'id',
  categoryId: 'categoryId',
  name: 'name',
  description: 'description',
  price: 'price',
  imageUrl: 'imageUrl',
  isActive: 'isActive',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HookahScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  price: 'price',
  features: 'features',
  isActive: 'isActive',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BoardGameScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  price: 'price',
  duration: 'duration',
  players: 'players',
  difficulty: 'difficulty',
  category: 'category',
  imageUrl: 'imageUrl',
  isActive: 'isActive',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BilliardsServiceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  price: 'price',
  description: 'description',
  imageUrl: 'imageUrl',
  isActive: 'isActive',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BilliardsSettingsScalarFieldEnum = {
  id: 'id',
  bookingFee: 'bookingFee',
  bookingTimeoutMinutes: 'bookingTimeoutMinutes',
  minBookingDuration: 'minBookingDuration',
  maxBookingDuration: 'maxBookingDuration',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.KaraokeServiceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  price: 'price',
  description: 'description',
  imageUrl: 'imageUrl',
  isActive: 'isActive',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.KaraokeSettingsScalarFieldEnum = {
  id: 'id',
  maxVipGuests: 'maxVipGuests',
  baseVipPrice: 'baseVipPrice',
  additionalGuestPrice: 'additionalGuestPrice',
  depositPolicy: 'depositPolicy',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BanquetRequestScalarFieldEnum = {
  id: 'id',
  eventDate: 'eventDate',
  eventTime: 'eventTime',
  endTime: 'endTime',
  guestCount: 'guestCount',
  eventType: 'eventType',
  budget: 'budget',
  banquetType: 'banquetType',
  specialMenu: 'specialMenu',
  music: 'music',
  decor: 'decor',
  name: 'name',
  phone: 'phone',
  email: 'email',
  additionalWishes: 'additionalWishes',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Order_itemsScalarFieldEnum = {
  id: 'id',
  order_id: 'order_id',
  user_ticket_id: 'user_ticket_id',
  price: 'price',
  quantity: 'quantity'
};

exports.Prisma.OrdersScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  first_name: 'first_name',
  last_name: 'last_name',
  email: 'email',
  phone: 'phone',
  status: 'status',
  total_amount: 'total_amount',
  payment_id: 'payment_id',
  payment_method: 'payment_method',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Refund_ticketsScalarFieldEnum = {
  refund_id: 'refund_id',
  user_ticket_id: 'user_ticket_id',
  ticket_number: 'ticket_number',
  refund_amount: 'refund_amount'
};

exports.Prisma.RefundsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  email: 'email',
  phone: 'phone',
  full_name: 'full_name',
  account_number: 'account_number',
  bank_name: 'bank_name',
  bik: 'bik',
  correspondent_account: 'correspondent_account',
  inn: 'inn',
  kpp: 'kpp',
  okpo: 'okpo',
  ogrn: 'ogrn',
  refund_amount: 'refund_amount',
  refund_reason: 'refund_reason',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.TicketsScalarFieldEnum = {
  id: 'id',
  title: 'title',
  short_description: 'short_description',
  description: 'description',
  image_url: 'image_url',
  event_date: 'event_date',
  event_location: 'event_location',
  price: 'price',
  is_used: 'is_used',
  qr_code: 'qr_code',
  ticket_number: 'ticket_number',
  user_id: 'user_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.User_ticketsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  ticket_id: 'ticket_id',
  ticket_number: 'ticket_number',
  qr_code: 'qr_code',
  purchase_date: 'purchase_date',
  is_used: 'is_used',
  used_at: 'used_at',
  payment_status: 'payment_status',
  payment_id: 'payment_id',
  expires_at: 'expires_at',
  created_at: 'created_at',
  updated_at: 'updated_at',
  email: 'email',
  first_name: 'first_name',
  last_name: 'last_name',
  phone: 'phone'
};

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  telegram_id: 'telegram_id',
  username: 'username',
  first_name: 'first_name',
  last_name: 'last_name',
  is_admin: 'is_admin',
  language_code: 'language_code',
  is_bot: 'is_bot',
  phone: 'phone',
  email: 'email',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.HallType = exports.$Enums.HallType = {
  restaurant: 'restaurant',
  karaoke: 'karaoke',
  billiards: 'billiards',
  disco: 'disco',
  playstation: 'playstation',
  bowling: 'bowling',
  spa: 'spa',
  cinema: 'cinema',
  banquet: 'banquet',
  custom: 'custom'
};

exports.ZoneType = exports.$Enums.ZoneType = {
  karaoke: 'karaoke',
  billiards: 'billiards',
  restaurant: 'restaurant',
  disco: 'disco',
  playstation: 'playstation',
  bowling: 'bowling',
  spa: 'spa',
  cinema: 'cinema',
  custom: 'custom'
};

exports.ZoneItemType = exports.$Enums.ZoneItemType = {
  table: 'table',
  booth: 'booth',
  stage: 'stage',
  bar: 'bar',
  danceFloor: 'danceFloor',
  gameTable: 'gameTable',
  lounge: 'lounge',
  spaRoom: 'spaRoom',
  cinemaHall: 'cinemaHall',
  custom: 'custom'
};

exports.ReservationType = exports.$Enums.ReservationType = {
  seating: 'seating',
  fullItem: 'fullItem',
  event: 'event',
  timeSlot: 'timeSlot'
};

exports.ReservationStatus = exports.$Enums.ReservationStatus = {
  booked: 'booked',
  arrived: 'arrived',
  no_show: 'no_show',
  cancelled: 'cancelled'
};

exports.BanquetRequestStatus = exports.$Enums.BanquetRequestStatus = {
  pending: 'pending',
  approved: 'approved',
  rejected: 'rejected',
  completed: 'completed'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  pending: 'pending',
  paid: 'paid',
  completed: 'completed',
  canceled: 'canceled'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  pending: 'pending',
  paid: 'paid',
  failed: 'failed',
  canceled: 'canceled'
};

exports.Prisma.ModelName = {
  Hall: 'Hall',
  Zone: 'Zone',
  ZoneItem: 'ZoneItem',
  Reservation: 'Reservation',
  Payment: 'Payment',
  MenuType: 'MenuType',
  MenuCategory: 'MenuCategory',
  MenuItem: 'MenuItem',
  Hookah: 'Hookah',
  BoardGame: 'BoardGame',
  BilliardsService: 'BilliardsService',
  BilliardsSettings: 'BilliardsSettings',
  KaraokeService: 'KaraokeService',
  KaraokeSettings: 'KaraokeSettings',
  BanquetRequest: 'BanquetRequest',
  order_items: 'order_items',
  orders: 'orders',
  refund_tickets: 'refund_tickets',
  refunds: 'refunds',
  tickets: 'tickets',
  user_tickets: 'user_tickets',
  users: 'users'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
