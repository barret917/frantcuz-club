
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Hall
 * 
 */
export type Hall = $Result.DefaultSelection<Prisma.$HallPayload>
/**
 * Model Zone
 * 
 */
export type Zone = $Result.DefaultSelection<Prisma.$ZonePayload>
/**
 * Model ZoneItem
 * 
 */
export type ZoneItem = $Result.DefaultSelection<Prisma.$ZoneItemPayload>
/**
 * Model Reservation
 * 
 */
export type Reservation = $Result.DefaultSelection<Prisma.$ReservationPayload>
/**
 * Model Payment
 * 
 */
export type Payment = $Result.DefaultSelection<Prisma.$PaymentPayload>
/**
 * Model MenuType
 * 
 */
export type MenuType = $Result.DefaultSelection<Prisma.$MenuTypePayload>
/**
 * Model MenuCategory
 * 
 */
export type MenuCategory = $Result.DefaultSelection<Prisma.$MenuCategoryPayload>
/**
 * Model MenuItem
 * 
 */
export type MenuItem = $Result.DefaultSelection<Prisma.$MenuItemPayload>
/**
 * Model Hookah
 * 
 */
export type Hookah = $Result.DefaultSelection<Prisma.$HookahPayload>
/**
 * Model BoardGame
 * 
 */
export type BoardGame = $Result.DefaultSelection<Prisma.$BoardGamePayload>
/**
 * Model BilliardsService
 * 
 */
export type BilliardsService = $Result.DefaultSelection<Prisma.$BilliardsServicePayload>
/**
 * Model BilliardsSettings
 * 
 */
export type BilliardsSettings = $Result.DefaultSelection<Prisma.$BilliardsSettingsPayload>
/**
 * Model KaraokeService
 * 
 */
export type KaraokeService = $Result.DefaultSelection<Prisma.$KaraokeServicePayload>
/**
 * Model KaraokeSettings
 * 
 */
export type KaraokeSettings = $Result.DefaultSelection<Prisma.$KaraokeSettingsPayload>
/**
 * Model BanquetRequest
 * 
 */
export type BanquetRequest = $Result.DefaultSelection<Prisma.$BanquetRequestPayload>
/**
 * Model order_items
 * 
 */
export type order_items = $Result.DefaultSelection<Prisma.$order_itemsPayload>
/**
 * Model orders
 * 
 */
export type orders = $Result.DefaultSelection<Prisma.$ordersPayload>
/**
 * Model refund_tickets
 * 
 */
export type refund_tickets = $Result.DefaultSelection<Prisma.$refund_ticketsPayload>
/**
 * Model refunds
 * 
 */
export type refunds = $Result.DefaultSelection<Prisma.$refundsPayload>
/**
 * Model tickets
 * 
 */
export type tickets = $Result.DefaultSelection<Prisma.$ticketsPayload>
/**
 * Model user_tickets
 * 
 */
export type user_tickets = $Result.DefaultSelection<Prisma.$user_ticketsPayload>
/**
 * Model users
 * 
 */
export type users = $Result.DefaultSelection<Prisma.$usersPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const HallType: {
  restaurant: 'restaurant',
  karaoke: 'karaoke',
  billiards: 'billiards',
  disco: 'disco',
  playstation: 'playstation',
  bowling: 'bowling',
  spa: 'spa',
  cinema: 'cinema',
  banquet: 'banquet',
  custom: 'custom'
};

export type HallType = (typeof HallType)[keyof typeof HallType]


export const ZoneType: {
  karaoke: 'karaoke',
  billiards: 'billiards',
  restaurant: 'restaurant',
  disco: 'disco',
  playstation: 'playstation',
  bowling: 'bowling',
  spa: 'spa',
  cinema: 'cinema',
  custom: 'custom'
};

export type ZoneType = (typeof ZoneType)[keyof typeof ZoneType]


export const ZoneItemType: {
  table: 'table',
  booth: 'booth',
  stage: 'stage',
  bar: 'bar',
  danceFloor: 'danceFloor',
  gameTable: 'gameTable',
  lounge: 'lounge',
  spaRoom: 'spaRoom',
  cinemaHall: 'cinemaHall',
  custom: 'custom'
};

export type ZoneItemType = (typeof ZoneItemType)[keyof typeof ZoneItemType]


export const ReservationType: {
  seating: 'seating',
  fullItem: 'fullItem',
  event: 'event',
  timeSlot: 'timeSlot'
};

export type ReservationType = (typeof ReservationType)[keyof typeof ReservationType]


export const ReservationStatus: {
  booked: 'booked',
  arrived: 'arrived',
  no_show: 'no_show',
  cancelled: 'cancelled'
};

export type ReservationStatus = (typeof ReservationStatus)[keyof typeof ReservationStatus]


export const BanquetRequestStatus: {
  pending: 'pending',
  approved: 'approved',
  rejected: 'rejected',
  completed: 'completed'
};

export type BanquetRequestStatus = (typeof BanquetRequestStatus)[keyof typeof BanquetRequestStatus]


export const OrderStatus: {
  pending: 'pending',
  paid: 'paid',
  completed: 'completed',
  canceled: 'canceled'
};

export type OrderStatus = (typeof OrderStatus)[keyof typeof OrderStatus]


export const PaymentStatus: {
  pending: 'pending',
  paid: 'paid',
  failed: 'failed',
  canceled: 'canceled'
};

export type PaymentStatus = (typeof PaymentStatus)[keyof typeof PaymentStatus]

}

export type HallType = $Enums.HallType

export const HallType: typeof $Enums.HallType

export type ZoneType = $Enums.ZoneType

export const ZoneType: typeof $Enums.ZoneType

export type ZoneItemType = $Enums.ZoneItemType

export const ZoneItemType: typeof $Enums.ZoneItemType

export type ReservationType = $Enums.ReservationType

export const ReservationType: typeof $Enums.ReservationType

export type ReservationStatus = $Enums.ReservationStatus

export const ReservationStatus: typeof $Enums.ReservationStatus

export type BanquetRequestStatus = $Enums.BanquetRequestStatus

export const BanquetRequestStatus: typeof $Enums.BanquetRequestStatus

export type OrderStatus = $Enums.OrderStatus

export const OrderStatus: typeof $Enums.OrderStatus

export type PaymentStatus = $Enums.PaymentStatus

export const PaymentStatus: typeof $Enums.PaymentStatus

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Halls
 * const halls = await prisma.hall.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Halls
   * const halls = await prisma.hall.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.hall`: Exposes CRUD operations for the **Hall** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Halls
    * const halls = await prisma.hall.findMany()
    * ```
    */
  get hall(): Prisma.HallDelegate<ExtArgs>;

  /**
   * `prisma.zone`: Exposes CRUD operations for the **Zone** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Zones
    * const zones = await prisma.zone.findMany()
    * ```
    */
  get zone(): Prisma.ZoneDelegate<ExtArgs>;

  /**
   * `prisma.zoneItem`: Exposes CRUD operations for the **ZoneItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ZoneItems
    * const zoneItems = await prisma.zoneItem.findMany()
    * ```
    */
  get zoneItem(): Prisma.ZoneItemDelegate<ExtArgs>;

  /**
   * `prisma.reservation`: Exposes CRUD operations for the **Reservation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reservations
    * const reservations = await prisma.reservation.findMany()
    * ```
    */
  get reservation(): Prisma.ReservationDelegate<ExtArgs>;

  /**
   * `prisma.payment`: Exposes CRUD operations for the **Payment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payments
    * const payments = await prisma.payment.findMany()
    * ```
    */
  get payment(): Prisma.PaymentDelegate<ExtArgs>;

  /**
   * `prisma.menuType`: Exposes CRUD operations for the **MenuType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MenuTypes
    * const menuTypes = await prisma.menuType.findMany()
    * ```
    */
  get menuType(): Prisma.MenuTypeDelegate<ExtArgs>;

  /**
   * `prisma.menuCategory`: Exposes CRUD operations for the **MenuCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MenuCategories
    * const menuCategories = await prisma.menuCategory.findMany()
    * ```
    */
  get menuCategory(): Prisma.MenuCategoryDelegate<ExtArgs>;

  /**
   * `prisma.menuItem`: Exposes CRUD operations for the **MenuItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MenuItems
    * const menuItems = await prisma.menuItem.findMany()
    * ```
    */
  get menuItem(): Prisma.MenuItemDelegate<ExtArgs>;

  /**
   * `prisma.hookah`: Exposes CRUD operations for the **Hookah** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Hookahs
    * const hookahs = await prisma.hookah.findMany()
    * ```
    */
  get hookah(): Prisma.HookahDelegate<ExtArgs>;

  /**
   * `prisma.boardGame`: Exposes CRUD operations for the **BoardGame** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BoardGames
    * const boardGames = await prisma.boardGame.findMany()
    * ```
    */
  get boardGame(): Prisma.BoardGameDelegate<ExtArgs>;

  /**
   * `prisma.billiardsService`: Exposes CRUD operations for the **BilliardsService** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BilliardsServices
    * const billiardsServices = await prisma.billiardsService.findMany()
    * ```
    */
  get billiardsService(): Prisma.BilliardsServiceDelegate<ExtArgs>;

  /**
   * `prisma.billiardsSettings`: Exposes CRUD operations for the **BilliardsSettings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BilliardsSettings
    * const billiardsSettings = await prisma.billiardsSettings.findMany()
    * ```
    */
  get billiardsSettings(): Prisma.BilliardsSettingsDelegate<ExtArgs>;

  /**
   * `prisma.karaokeService`: Exposes CRUD operations for the **KaraokeService** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more KaraokeServices
    * const karaokeServices = await prisma.karaokeService.findMany()
    * ```
    */
  get karaokeService(): Prisma.KaraokeServiceDelegate<ExtArgs>;

  /**
   * `prisma.karaokeSettings`: Exposes CRUD operations for the **KaraokeSettings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more KaraokeSettings
    * const karaokeSettings = await prisma.karaokeSettings.findMany()
    * ```
    */
  get karaokeSettings(): Prisma.KaraokeSettingsDelegate<ExtArgs>;

  /**
   * `prisma.banquetRequest`: Exposes CRUD operations for the **BanquetRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BanquetRequests
    * const banquetRequests = await prisma.banquetRequest.findMany()
    * ```
    */
  get banquetRequest(): Prisma.BanquetRequestDelegate<ExtArgs>;

  /**
   * `prisma.order_items`: Exposes CRUD operations for the **order_items** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Order_items
    * const order_items = await prisma.order_items.findMany()
    * ```
    */
  get order_items(): Prisma.order_itemsDelegate<ExtArgs>;

  /**
   * `prisma.orders`: Exposes CRUD operations for the **orders** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.orders.findMany()
    * ```
    */
  get orders(): Prisma.ordersDelegate<ExtArgs>;

  /**
   * `prisma.refund_tickets`: Exposes CRUD operations for the **refund_tickets** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Refund_tickets
    * const refund_tickets = await prisma.refund_tickets.findMany()
    * ```
    */
  get refund_tickets(): Prisma.refund_ticketsDelegate<ExtArgs>;

  /**
   * `prisma.refunds`: Exposes CRUD operations for the **refunds** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Refunds
    * const refunds = await prisma.refunds.findMany()
    * ```
    */
  get refunds(): Prisma.refundsDelegate<ExtArgs>;

  /**
   * `prisma.tickets`: Exposes CRUD operations for the **tickets** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tickets
    * const tickets = await prisma.tickets.findMany()
    * ```
    */
  get tickets(): Prisma.ticketsDelegate<ExtArgs>;

  /**
   * `prisma.user_tickets`: Exposes CRUD operations for the **user_tickets** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more User_tickets
    * const user_tickets = await prisma.user_tickets.findMany()
    * ```
    */
  get user_tickets(): Prisma.user_ticketsDelegate<ExtArgs>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Hall: 'Hall',
    Zone: 'Zone',
    ZoneItem: 'ZoneItem',
    Reservation: 'Reservation',
    Payment: 'Payment',
    MenuType: 'MenuType',
    MenuCategory: 'MenuCategory',
    MenuItem: 'MenuItem',
    Hookah: 'Hookah',
    BoardGame: 'BoardGame',
    BilliardsService: 'BilliardsService',
    BilliardsSettings: 'BilliardsSettings',
    KaraokeService: 'KaraokeService',
    KaraokeSettings: 'KaraokeSettings',
    BanquetRequest: 'BanquetRequest',
    order_items: 'order_items',
    orders: 'orders',
    refund_tickets: 'refund_tickets',
    refunds: 'refunds',
    tickets: 'tickets',
    user_tickets: 'user_tickets',
    users: 'users'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "hall" | "zone" | "zoneItem" | "reservation" | "payment" | "menuType" | "menuCategory" | "menuItem" | "hookah" | "boardGame" | "billiardsService" | "billiardsSettings" | "karaokeService" | "karaokeSettings" | "banquetRequest" | "order_items" | "orders" | "refund_tickets" | "refunds" | "tickets" | "user_tickets" | "users"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Hall: {
        payload: Prisma.$HallPayload<ExtArgs>
        fields: Prisma.HallFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HallFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HallPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HallFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HallPayload>
          }
          findFirst: {
            args: Prisma.HallFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HallPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HallFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HallPayload>
          }
          findMany: {
            args: Prisma.HallFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HallPayload>[]
          }
          create: {
            args: Prisma.HallCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HallPayload>
          }
          createMany: {
            args: Prisma.HallCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HallCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HallPayload>[]
          }
          delete: {
            args: Prisma.HallDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HallPayload>
          }
          update: {
            args: Prisma.HallUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HallPayload>
          }
          deleteMany: {
            args: Prisma.HallDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HallUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.HallUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HallPayload>
          }
          aggregate: {
            args: Prisma.HallAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHall>
          }
          groupBy: {
            args: Prisma.HallGroupByArgs<ExtArgs>
            result: $Utils.Optional<HallGroupByOutputType>[]
          }
          count: {
            args: Prisma.HallCountArgs<ExtArgs>
            result: $Utils.Optional<HallCountAggregateOutputType> | number
          }
        }
      }
      Zone: {
        payload: Prisma.$ZonePayload<ExtArgs>
        fields: Prisma.ZoneFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ZoneFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZonePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ZoneFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZonePayload>
          }
          findFirst: {
            args: Prisma.ZoneFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZonePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ZoneFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZonePayload>
          }
          findMany: {
            args: Prisma.ZoneFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZonePayload>[]
          }
          create: {
            args: Prisma.ZoneCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZonePayload>
          }
          createMany: {
            args: Prisma.ZoneCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ZoneCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZonePayload>[]
          }
          delete: {
            args: Prisma.ZoneDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZonePayload>
          }
          update: {
            args: Prisma.ZoneUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZonePayload>
          }
          deleteMany: {
            args: Prisma.ZoneDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ZoneUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ZoneUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZonePayload>
          }
          aggregate: {
            args: Prisma.ZoneAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateZone>
          }
          groupBy: {
            args: Prisma.ZoneGroupByArgs<ExtArgs>
            result: $Utils.Optional<ZoneGroupByOutputType>[]
          }
          count: {
            args: Prisma.ZoneCountArgs<ExtArgs>
            result: $Utils.Optional<ZoneCountAggregateOutputType> | number
          }
        }
      }
      ZoneItem: {
        payload: Prisma.$ZoneItemPayload<ExtArgs>
        fields: Prisma.ZoneItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ZoneItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZoneItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ZoneItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZoneItemPayload>
          }
          findFirst: {
            args: Prisma.ZoneItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZoneItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ZoneItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZoneItemPayload>
          }
          findMany: {
            args: Prisma.ZoneItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZoneItemPayload>[]
          }
          create: {
            args: Prisma.ZoneItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZoneItemPayload>
          }
          createMany: {
            args: Prisma.ZoneItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ZoneItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZoneItemPayload>[]
          }
          delete: {
            args: Prisma.ZoneItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZoneItemPayload>
          }
          update: {
            args: Prisma.ZoneItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZoneItemPayload>
          }
          deleteMany: {
            args: Prisma.ZoneItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ZoneItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ZoneItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZoneItemPayload>
          }
          aggregate: {
            args: Prisma.ZoneItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateZoneItem>
          }
          groupBy: {
            args: Prisma.ZoneItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<ZoneItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.ZoneItemCountArgs<ExtArgs>
            result: $Utils.Optional<ZoneItemCountAggregateOutputType> | number
          }
        }
      }
      Reservation: {
        payload: Prisma.$ReservationPayload<ExtArgs>
        fields: Prisma.ReservationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReservationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReservationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload>
          }
          findFirst: {
            args: Prisma.ReservationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReservationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload>
          }
          findMany: {
            args: Prisma.ReservationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload>[]
          }
          create: {
            args: Prisma.ReservationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload>
          }
          createMany: {
            args: Prisma.ReservationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReservationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload>[]
          }
          delete: {
            args: Prisma.ReservationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload>
          }
          update: {
            args: Prisma.ReservationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload>
          }
          deleteMany: {
            args: Prisma.ReservationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReservationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ReservationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload>
          }
          aggregate: {
            args: Prisma.ReservationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReservation>
          }
          groupBy: {
            args: Prisma.ReservationGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReservationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReservationCountArgs<ExtArgs>
            result: $Utils.Optional<ReservationCountAggregateOutputType> | number
          }
        }
      }
      Payment: {
        payload: Prisma.$PaymentPayload<ExtArgs>
        fields: Prisma.PaymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findFirst: {
            args: Prisma.PaymentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findMany: {
            args: Prisma.PaymentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          create: {
            args: Prisma.PaymentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          createMany: {
            args: Prisma.PaymentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PaymentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          delete: {
            args: Prisma.PaymentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          update: {
            args: Prisma.PaymentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          deleteMany: {
            args: Prisma.PaymentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PaymentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          aggregate: {
            args: Prisma.PaymentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePayment>
          }
          groupBy: {
            args: Prisma.PaymentGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentCountAggregateOutputType> | number
          }
        }
      }
      MenuType: {
        payload: Prisma.$MenuTypePayload<ExtArgs>
        fields: Prisma.MenuTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MenuTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MenuTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuTypePayload>
          }
          findFirst: {
            args: Prisma.MenuTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MenuTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuTypePayload>
          }
          findMany: {
            args: Prisma.MenuTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuTypePayload>[]
          }
          create: {
            args: Prisma.MenuTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuTypePayload>
          }
          createMany: {
            args: Prisma.MenuTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MenuTypeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuTypePayload>[]
          }
          delete: {
            args: Prisma.MenuTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuTypePayload>
          }
          update: {
            args: Prisma.MenuTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuTypePayload>
          }
          deleteMany: {
            args: Prisma.MenuTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MenuTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MenuTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuTypePayload>
          }
          aggregate: {
            args: Prisma.MenuTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMenuType>
          }
          groupBy: {
            args: Prisma.MenuTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<MenuTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.MenuTypeCountArgs<ExtArgs>
            result: $Utils.Optional<MenuTypeCountAggregateOutputType> | number
          }
        }
      }
      MenuCategory: {
        payload: Prisma.$MenuCategoryPayload<ExtArgs>
        fields: Prisma.MenuCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MenuCategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MenuCategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuCategoryPayload>
          }
          findFirst: {
            args: Prisma.MenuCategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MenuCategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuCategoryPayload>
          }
          findMany: {
            args: Prisma.MenuCategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuCategoryPayload>[]
          }
          create: {
            args: Prisma.MenuCategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuCategoryPayload>
          }
          createMany: {
            args: Prisma.MenuCategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MenuCategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuCategoryPayload>[]
          }
          delete: {
            args: Prisma.MenuCategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuCategoryPayload>
          }
          update: {
            args: Prisma.MenuCategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuCategoryPayload>
          }
          deleteMany: {
            args: Prisma.MenuCategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MenuCategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MenuCategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuCategoryPayload>
          }
          aggregate: {
            args: Prisma.MenuCategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMenuCategory>
          }
          groupBy: {
            args: Prisma.MenuCategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<MenuCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.MenuCategoryCountArgs<ExtArgs>
            result: $Utils.Optional<MenuCategoryCountAggregateOutputType> | number
          }
        }
      }
      MenuItem: {
        payload: Prisma.$MenuItemPayload<ExtArgs>
        fields: Prisma.MenuItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MenuItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MenuItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuItemPayload>
          }
          findFirst: {
            args: Prisma.MenuItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MenuItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuItemPayload>
          }
          findMany: {
            args: Prisma.MenuItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuItemPayload>[]
          }
          create: {
            args: Prisma.MenuItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuItemPayload>
          }
          createMany: {
            args: Prisma.MenuItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MenuItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuItemPayload>[]
          }
          delete: {
            args: Prisma.MenuItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuItemPayload>
          }
          update: {
            args: Prisma.MenuItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuItemPayload>
          }
          deleteMany: {
            args: Prisma.MenuItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MenuItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MenuItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MenuItemPayload>
          }
          aggregate: {
            args: Prisma.MenuItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMenuItem>
          }
          groupBy: {
            args: Prisma.MenuItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<MenuItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.MenuItemCountArgs<ExtArgs>
            result: $Utils.Optional<MenuItemCountAggregateOutputType> | number
          }
        }
      }
      Hookah: {
        payload: Prisma.$HookahPayload<ExtArgs>
        fields: Prisma.HookahFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HookahFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HookahPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HookahFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HookahPayload>
          }
          findFirst: {
            args: Prisma.HookahFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HookahPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HookahFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HookahPayload>
          }
          findMany: {
            args: Prisma.HookahFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HookahPayload>[]
          }
          create: {
            args: Prisma.HookahCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HookahPayload>
          }
          createMany: {
            args: Prisma.HookahCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HookahCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HookahPayload>[]
          }
          delete: {
            args: Prisma.HookahDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HookahPayload>
          }
          update: {
            args: Prisma.HookahUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HookahPayload>
          }
          deleteMany: {
            args: Prisma.HookahDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HookahUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.HookahUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HookahPayload>
          }
          aggregate: {
            args: Prisma.HookahAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHookah>
          }
          groupBy: {
            args: Prisma.HookahGroupByArgs<ExtArgs>
            result: $Utils.Optional<HookahGroupByOutputType>[]
          }
          count: {
            args: Prisma.HookahCountArgs<ExtArgs>
            result: $Utils.Optional<HookahCountAggregateOutputType> | number
          }
        }
      }
      BoardGame: {
        payload: Prisma.$BoardGamePayload<ExtArgs>
        fields: Prisma.BoardGameFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BoardGameFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardGamePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BoardGameFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardGamePayload>
          }
          findFirst: {
            args: Prisma.BoardGameFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardGamePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BoardGameFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardGamePayload>
          }
          findMany: {
            args: Prisma.BoardGameFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardGamePayload>[]
          }
          create: {
            args: Prisma.BoardGameCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardGamePayload>
          }
          createMany: {
            args: Prisma.BoardGameCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BoardGameCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardGamePayload>[]
          }
          delete: {
            args: Prisma.BoardGameDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardGamePayload>
          }
          update: {
            args: Prisma.BoardGameUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardGamePayload>
          }
          deleteMany: {
            args: Prisma.BoardGameDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BoardGameUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BoardGameUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BoardGamePayload>
          }
          aggregate: {
            args: Prisma.BoardGameAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBoardGame>
          }
          groupBy: {
            args: Prisma.BoardGameGroupByArgs<ExtArgs>
            result: $Utils.Optional<BoardGameGroupByOutputType>[]
          }
          count: {
            args: Prisma.BoardGameCountArgs<ExtArgs>
            result: $Utils.Optional<BoardGameCountAggregateOutputType> | number
          }
        }
      }
      BilliardsService: {
        payload: Prisma.$BilliardsServicePayload<ExtArgs>
        fields: Prisma.BilliardsServiceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BilliardsServiceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BilliardsServicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BilliardsServiceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BilliardsServicePayload>
          }
          findFirst: {
            args: Prisma.BilliardsServiceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BilliardsServicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BilliardsServiceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BilliardsServicePayload>
          }
          findMany: {
            args: Prisma.BilliardsServiceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BilliardsServicePayload>[]
          }
          create: {
            args: Prisma.BilliardsServiceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BilliardsServicePayload>
          }
          createMany: {
            args: Prisma.BilliardsServiceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BilliardsServiceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BilliardsServicePayload>[]
          }
          delete: {
            args: Prisma.BilliardsServiceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BilliardsServicePayload>
          }
          update: {
            args: Prisma.BilliardsServiceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BilliardsServicePayload>
          }
          deleteMany: {
            args: Prisma.BilliardsServiceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BilliardsServiceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BilliardsServiceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BilliardsServicePayload>
          }
          aggregate: {
            args: Prisma.BilliardsServiceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBilliardsService>
          }
          groupBy: {
            args: Prisma.BilliardsServiceGroupByArgs<ExtArgs>
            result: $Utils.Optional<BilliardsServiceGroupByOutputType>[]
          }
          count: {
            args: Prisma.BilliardsServiceCountArgs<ExtArgs>
            result: $Utils.Optional<BilliardsServiceCountAggregateOutputType> | number
          }
        }
      }
      BilliardsSettings: {
        payload: Prisma.$BilliardsSettingsPayload<ExtArgs>
        fields: Prisma.BilliardsSettingsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BilliardsSettingsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BilliardsSettingsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BilliardsSettingsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BilliardsSettingsPayload>
          }
          findFirst: {
            args: Prisma.BilliardsSettingsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BilliardsSettingsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BilliardsSettingsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BilliardsSettingsPayload>
          }
          findMany: {
            args: Prisma.BilliardsSettingsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BilliardsSettingsPayload>[]
          }
          create: {
            args: Prisma.BilliardsSettingsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BilliardsSettingsPayload>
          }
          createMany: {
            args: Prisma.BilliardsSettingsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BilliardsSettingsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BilliardsSettingsPayload>[]
          }
          delete: {
            args: Prisma.BilliardsSettingsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BilliardsSettingsPayload>
          }
          update: {
            args: Prisma.BilliardsSettingsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BilliardsSettingsPayload>
          }
          deleteMany: {
            args: Prisma.BilliardsSettingsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BilliardsSettingsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BilliardsSettingsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BilliardsSettingsPayload>
          }
          aggregate: {
            args: Prisma.BilliardsSettingsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBilliardsSettings>
          }
          groupBy: {
            args: Prisma.BilliardsSettingsGroupByArgs<ExtArgs>
            result: $Utils.Optional<BilliardsSettingsGroupByOutputType>[]
          }
          count: {
            args: Prisma.BilliardsSettingsCountArgs<ExtArgs>
            result: $Utils.Optional<BilliardsSettingsCountAggregateOutputType> | number
          }
        }
      }
      KaraokeService: {
        payload: Prisma.$KaraokeServicePayload<ExtArgs>
        fields: Prisma.KaraokeServiceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KaraokeServiceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KaraokeServicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KaraokeServiceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KaraokeServicePayload>
          }
          findFirst: {
            args: Prisma.KaraokeServiceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KaraokeServicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KaraokeServiceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KaraokeServicePayload>
          }
          findMany: {
            args: Prisma.KaraokeServiceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KaraokeServicePayload>[]
          }
          create: {
            args: Prisma.KaraokeServiceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KaraokeServicePayload>
          }
          createMany: {
            args: Prisma.KaraokeServiceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.KaraokeServiceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KaraokeServicePayload>[]
          }
          delete: {
            args: Prisma.KaraokeServiceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KaraokeServicePayload>
          }
          update: {
            args: Prisma.KaraokeServiceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KaraokeServicePayload>
          }
          deleteMany: {
            args: Prisma.KaraokeServiceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.KaraokeServiceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.KaraokeServiceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KaraokeServicePayload>
          }
          aggregate: {
            args: Prisma.KaraokeServiceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateKaraokeService>
          }
          groupBy: {
            args: Prisma.KaraokeServiceGroupByArgs<ExtArgs>
            result: $Utils.Optional<KaraokeServiceGroupByOutputType>[]
          }
          count: {
            args: Prisma.KaraokeServiceCountArgs<ExtArgs>
            result: $Utils.Optional<KaraokeServiceCountAggregateOutputType> | number
          }
        }
      }
      KaraokeSettings: {
        payload: Prisma.$KaraokeSettingsPayload<ExtArgs>
        fields: Prisma.KaraokeSettingsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KaraokeSettingsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KaraokeSettingsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KaraokeSettingsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KaraokeSettingsPayload>
          }
          findFirst: {
            args: Prisma.KaraokeSettingsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KaraokeSettingsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KaraokeSettingsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KaraokeSettingsPayload>
          }
          findMany: {
            args: Prisma.KaraokeSettingsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KaraokeSettingsPayload>[]
          }
          create: {
            args: Prisma.KaraokeSettingsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KaraokeSettingsPayload>
          }
          createMany: {
            args: Prisma.KaraokeSettingsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.KaraokeSettingsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KaraokeSettingsPayload>[]
          }
          delete: {
            args: Prisma.KaraokeSettingsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KaraokeSettingsPayload>
          }
          update: {
            args: Prisma.KaraokeSettingsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KaraokeSettingsPayload>
          }
          deleteMany: {
            args: Prisma.KaraokeSettingsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.KaraokeSettingsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.KaraokeSettingsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KaraokeSettingsPayload>
          }
          aggregate: {
            args: Prisma.KaraokeSettingsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateKaraokeSettings>
          }
          groupBy: {
            args: Prisma.KaraokeSettingsGroupByArgs<ExtArgs>
            result: $Utils.Optional<KaraokeSettingsGroupByOutputType>[]
          }
          count: {
            args: Prisma.KaraokeSettingsCountArgs<ExtArgs>
            result: $Utils.Optional<KaraokeSettingsCountAggregateOutputType> | number
          }
        }
      }
      BanquetRequest: {
        payload: Prisma.$BanquetRequestPayload<ExtArgs>
        fields: Prisma.BanquetRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BanquetRequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BanquetRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BanquetRequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BanquetRequestPayload>
          }
          findFirst: {
            args: Prisma.BanquetRequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BanquetRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BanquetRequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BanquetRequestPayload>
          }
          findMany: {
            args: Prisma.BanquetRequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BanquetRequestPayload>[]
          }
          create: {
            args: Prisma.BanquetRequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BanquetRequestPayload>
          }
          createMany: {
            args: Prisma.BanquetRequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BanquetRequestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BanquetRequestPayload>[]
          }
          delete: {
            args: Prisma.BanquetRequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BanquetRequestPayload>
          }
          update: {
            args: Prisma.BanquetRequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BanquetRequestPayload>
          }
          deleteMany: {
            args: Prisma.BanquetRequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BanquetRequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BanquetRequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BanquetRequestPayload>
          }
          aggregate: {
            args: Prisma.BanquetRequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBanquetRequest>
          }
          groupBy: {
            args: Prisma.BanquetRequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<BanquetRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.BanquetRequestCountArgs<ExtArgs>
            result: $Utils.Optional<BanquetRequestCountAggregateOutputType> | number
          }
        }
      }
      order_items: {
        payload: Prisma.$order_itemsPayload<ExtArgs>
        fields: Prisma.order_itemsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.order_itemsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$order_itemsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.order_itemsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$order_itemsPayload>
          }
          findFirst: {
            args: Prisma.order_itemsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$order_itemsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.order_itemsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$order_itemsPayload>
          }
          findMany: {
            args: Prisma.order_itemsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$order_itemsPayload>[]
          }
          create: {
            args: Prisma.order_itemsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$order_itemsPayload>
          }
          createMany: {
            args: Prisma.order_itemsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.order_itemsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$order_itemsPayload>[]
          }
          delete: {
            args: Prisma.order_itemsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$order_itemsPayload>
          }
          update: {
            args: Prisma.order_itemsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$order_itemsPayload>
          }
          deleteMany: {
            args: Prisma.order_itemsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.order_itemsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.order_itemsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$order_itemsPayload>
          }
          aggregate: {
            args: Prisma.Order_itemsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrder_items>
          }
          groupBy: {
            args: Prisma.order_itemsGroupByArgs<ExtArgs>
            result: $Utils.Optional<Order_itemsGroupByOutputType>[]
          }
          count: {
            args: Prisma.order_itemsCountArgs<ExtArgs>
            result: $Utils.Optional<Order_itemsCountAggregateOutputType> | number
          }
        }
      }
      orders: {
        payload: Prisma.$ordersPayload<ExtArgs>
        fields: Prisma.ordersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ordersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ordersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ordersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>
          }
          findFirst: {
            args: Prisma.ordersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ordersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ordersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>
          }
          findMany: {
            args: Prisma.ordersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>[]
          }
          create: {
            args: Prisma.ordersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>
          }
          createMany: {
            args: Prisma.ordersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ordersCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>[]
          }
          delete: {
            args: Prisma.ordersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>
          }
          update: {
            args: Prisma.ordersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>
          }
          deleteMany: {
            args: Prisma.ordersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ordersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ordersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>
          }
          aggregate: {
            args: Prisma.OrdersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrders>
          }
          groupBy: {
            args: Prisma.ordersGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrdersGroupByOutputType>[]
          }
          count: {
            args: Prisma.ordersCountArgs<ExtArgs>
            result: $Utils.Optional<OrdersCountAggregateOutputType> | number
          }
        }
      }
      refund_tickets: {
        payload: Prisma.$refund_ticketsPayload<ExtArgs>
        fields: Prisma.refund_ticketsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.refund_ticketsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$refund_ticketsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.refund_ticketsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$refund_ticketsPayload>
          }
          findFirst: {
            args: Prisma.refund_ticketsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$refund_ticketsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.refund_ticketsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$refund_ticketsPayload>
          }
          findMany: {
            args: Prisma.refund_ticketsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$refund_ticketsPayload>[]
          }
          create: {
            args: Prisma.refund_ticketsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$refund_ticketsPayload>
          }
          createMany: {
            args: Prisma.refund_ticketsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.refund_ticketsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$refund_ticketsPayload>[]
          }
          delete: {
            args: Prisma.refund_ticketsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$refund_ticketsPayload>
          }
          update: {
            args: Prisma.refund_ticketsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$refund_ticketsPayload>
          }
          deleteMany: {
            args: Prisma.refund_ticketsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.refund_ticketsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.refund_ticketsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$refund_ticketsPayload>
          }
          aggregate: {
            args: Prisma.Refund_ticketsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRefund_tickets>
          }
          groupBy: {
            args: Prisma.refund_ticketsGroupByArgs<ExtArgs>
            result: $Utils.Optional<Refund_ticketsGroupByOutputType>[]
          }
          count: {
            args: Prisma.refund_ticketsCountArgs<ExtArgs>
            result: $Utils.Optional<Refund_ticketsCountAggregateOutputType> | number
          }
        }
      }
      refunds: {
        payload: Prisma.$refundsPayload<ExtArgs>
        fields: Prisma.refundsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.refundsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$refundsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.refundsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$refundsPayload>
          }
          findFirst: {
            args: Prisma.refundsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$refundsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.refundsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$refundsPayload>
          }
          findMany: {
            args: Prisma.refundsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$refundsPayload>[]
          }
          create: {
            args: Prisma.refundsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$refundsPayload>
          }
          createMany: {
            args: Prisma.refundsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.refundsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$refundsPayload>[]
          }
          delete: {
            args: Prisma.refundsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$refundsPayload>
          }
          update: {
            args: Prisma.refundsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$refundsPayload>
          }
          deleteMany: {
            args: Prisma.refundsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.refundsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.refundsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$refundsPayload>
          }
          aggregate: {
            args: Prisma.RefundsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRefunds>
          }
          groupBy: {
            args: Prisma.refundsGroupByArgs<ExtArgs>
            result: $Utils.Optional<RefundsGroupByOutputType>[]
          }
          count: {
            args: Prisma.refundsCountArgs<ExtArgs>
            result: $Utils.Optional<RefundsCountAggregateOutputType> | number
          }
        }
      }
      tickets: {
        payload: Prisma.$ticketsPayload<ExtArgs>
        fields: Prisma.ticketsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ticketsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ticketsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketsPayload>
          }
          findFirst: {
            args: Prisma.ticketsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ticketsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketsPayload>
          }
          findMany: {
            args: Prisma.ticketsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketsPayload>[]
          }
          create: {
            args: Prisma.ticketsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketsPayload>
          }
          createMany: {
            args: Prisma.ticketsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ticketsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketsPayload>[]
          }
          delete: {
            args: Prisma.ticketsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketsPayload>
          }
          update: {
            args: Prisma.ticketsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketsPayload>
          }
          deleteMany: {
            args: Prisma.ticketsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ticketsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ticketsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ticketsPayload>
          }
          aggregate: {
            args: Prisma.TicketsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTickets>
          }
          groupBy: {
            args: Prisma.ticketsGroupByArgs<ExtArgs>
            result: $Utils.Optional<TicketsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ticketsCountArgs<ExtArgs>
            result: $Utils.Optional<TicketsCountAggregateOutputType> | number
          }
        }
      }
      user_tickets: {
        payload: Prisma.$user_ticketsPayload<ExtArgs>
        fields: Prisma.user_ticketsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.user_ticketsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_ticketsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.user_ticketsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_ticketsPayload>
          }
          findFirst: {
            args: Prisma.user_ticketsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_ticketsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.user_ticketsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_ticketsPayload>
          }
          findMany: {
            args: Prisma.user_ticketsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_ticketsPayload>[]
          }
          create: {
            args: Prisma.user_ticketsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_ticketsPayload>
          }
          createMany: {
            args: Prisma.user_ticketsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.user_ticketsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_ticketsPayload>[]
          }
          delete: {
            args: Prisma.user_ticketsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_ticketsPayload>
          }
          update: {
            args: Prisma.user_ticketsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_ticketsPayload>
          }
          deleteMany: {
            args: Prisma.user_ticketsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.user_ticketsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.user_ticketsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_ticketsPayload>
          }
          aggregate: {
            args: Prisma.User_ticketsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser_tickets>
          }
          groupBy: {
            args: Prisma.user_ticketsGroupByArgs<ExtArgs>
            result: $Utils.Optional<User_ticketsGroupByOutputType>[]
          }
          count: {
            args: Prisma.user_ticketsCountArgs<ExtArgs>
            result: $Utils.Optional<User_ticketsCountAggregateOutputType> | number
          }
        }
      }
      users: {
        payload: Prisma.$usersPayload<ExtArgs>
        fields: Prisma.usersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findFirst: {
            args: Prisma.usersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findMany: {
            args: Prisma.usersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          create: {
            args: Prisma.usersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          createMany: {
            args: Prisma.usersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.usersCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          delete: {
            args: Prisma.usersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          update: {
            args: Prisma.usersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          deleteMany: {
            args: Prisma.usersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.usersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.usersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.usersGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.usersCountArgs<ExtArgs>
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type HallCountOutputType
   */

  export type HallCountOutputType = {
    zones: number
  }

  export type HallCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    zones?: boolean | HallCountOutputTypeCountZonesArgs
  }

  // Custom InputTypes
  /**
   * HallCountOutputType without action
   */
  export type HallCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HallCountOutputType
     */
    select?: HallCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * HallCountOutputType without action
   */
  export type HallCountOutputTypeCountZonesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ZoneWhereInput
  }


  /**
   * Count Type ZoneCountOutputType
   */

  export type ZoneCountOutputType = {
    items: number
  }

  export type ZoneCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | ZoneCountOutputTypeCountItemsArgs
  }

  // Custom InputTypes
  /**
   * ZoneCountOutputType without action
   */
  export type ZoneCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZoneCountOutputType
     */
    select?: ZoneCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ZoneCountOutputType without action
   */
  export type ZoneCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ZoneItemWhereInput
  }


  /**
   * Count Type ZoneItemCountOutputType
   */

  export type ZoneItemCountOutputType = {
    reservations: number
  }

  export type ZoneItemCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reservations?: boolean | ZoneItemCountOutputTypeCountReservationsArgs
  }

  // Custom InputTypes
  /**
   * ZoneItemCountOutputType without action
   */
  export type ZoneItemCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZoneItemCountOutputType
     */
    select?: ZoneItemCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ZoneItemCountOutputType without action
   */
  export type ZoneItemCountOutputTypeCountReservationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReservationWhereInput
  }


  /**
   * Count Type ReservationCountOutputType
   */

  export type ReservationCountOutputType = {
    payments: number
  }

  export type ReservationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payments?: boolean | ReservationCountOutputTypeCountPaymentsArgs
  }

  // Custom InputTypes
  /**
   * ReservationCountOutputType without action
   */
  export type ReservationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReservationCountOutputType
     */
    select?: ReservationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ReservationCountOutputType without action
   */
  export type ReservationCountOutputTypeCountPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
  }


  /**
   * Count Type MenuTypeCountOutputType
   */

  export type MenuTypeCountOutputType = {
    categories: number
  }

  export type MenuTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categories?: boolean | MenuTypeCountOutputTypeCountCategoriesArgs
  }

  // Custom InputTypes
  /**
   * MenuTypeCountOutputType without action
   */
  export type MenuTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuTypeCountOutputType
     */
    select?: MenuTypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MenuTypeCountOutputType without action
   */
  export type MenuTypeCountOutputTypeCountCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MenuCategoryWhereInput
  }


  /**
   * Count Type MenuCategoryCountOutputType
   */

  export type MenuCategoryCountOutputType = {
    items: number
  }

  export type MenuCategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | MenuCategoryCountOutputTypeCountItemsArgs
  }

  // Custom InputTypes
  /**
   * MenuCategoryCountOutputType without action
   */
  export type MenuCategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuCategoryCountOutputType
     */
    select?: MenuCategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MenuCategoryCountOutputType without action
   */
  export type MenuCategoryCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MenuItemWhereInput
  }


  /**
   * Count Type OrdersCountOutputType
   */

  export type OrdersCountOutputType = {
    order_items: number
    user_tickets: number
  }

  export type OrdersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order_items?: boolean | OrdersCountOutputTypeCountOrder_itemsArgs
    user_tickets?: boolean | OrdersCountOutputTypeCountUser_ticketsArgs
  }

  // Custom InputTypes
  /**
   * OrdersCountOutputType without action
   */
  export type OrdersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrdersCountOutputType
     */
    select?: OrdersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrdersCountOutputType without action
   */
  export type OrdersCountOutputTypeCountOrder_itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: order_itemsWhereInput
  }

  /**
   * OrdersCountOutputType without action
   */
  export type OrdersCountOutputTypeCountUser_ticketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: user_ticketsWhereInput
  }


  /**
   * Count Type RefundsCountOutputType
   */

  export type RefundsCountOutputType = {
    refund_tickets: number
    user_tickets: number
  }

  export type RefundsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    refund_tickets?: boolean | RefundsCountOutputTypeCountRefund_ticketsArgs
    user_tickets?: boolean | RefundsCountOutputTypeCountUser_ticketsArgs
  }

  // Custom InputTypes
  /**
   * RefundsCountOutputType without action
   */
  export type RefundsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RefundsCountOutputType
     */
    select?: RefundsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RefundsCountOutputType without action
   */
  export type RefundsCountOutputTypeCountRefund_ticketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: refund_ticketsWhereInput
  }

  /**
   * RefundsCountOutputType without action
   */
  export type RefundsCountOutputTypeCountUser_ticketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: user_ticketsWhereInput
  }


  /**
   * Count Type TicketsCountOutputType
   */

  export type TicketsCountOutputType = {
    user_tickets: number
  }

  export type TicketsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user_tickets?: boolean | TicketsCountOutputTypeCountUser_ticketsArgs
  }

  // Custom InputTypes
  /**
   * TicketsCountOutputType without action
   */
  export type TicketsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TicketsCountOutputType
     */
    select?: TicketsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TicketsCountOutputType without action
   */
  export type TicketsCountOutputTypeCountUser_ticketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: user_ticketsWhereInput
  }


  /**
   * Count Type User_ticketsCountOutputType
   */

  export type User_ticketsCountOutputType = {
    refund_tickets: number
    orders: number
    refunds: number
  }

  export type User_ticketsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    refund_tickets?: boolean | User_ticketsCountOutputTypeCountRefund_ticketsArgs
    orders?: boolean | User_ticketsCountOutputTypeCountOrdersArgs
    refunds?: boolean | User_ticketsCountOutputTypeCountRefundsArgs
  }

  // Custom InputTypes
  /**
   * User_ticketsCountOutputType without action
   */
  export type User_ticketsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User_ticketsCountOutputType
     */
    select?: User_ticketsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * User_ticketsCountOutputType without action
   */
  export type User_ticketsCountOutputTypeCountRefund_ticketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: refund_ticketsWhereInput
  }

  /**
   * User_ticketsCountOutputType without action
   */
  export type User_ticketsCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ordersWhereInput
  }

  /**
   * User_ticketsCountOutputType without action
   */
  export type User_ticketsCountOutputTypeCountRefundsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: refundsWhereInput
  }


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    orders: number
    refunds: number
    tickets: number
    user_tickets: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | UsersCountOutputTypeCountOrdersArgs
    refunds?: boolean | UsersCountOutputTypeCountRefundsArgs
    tickets?: boolean | UsersCountOutputTypeCountTicketsArgs
    user_tickets?: boolean | UsersCountOutputTypeCountUser_ticketsArgs
  }

  // Custom InputTypes
  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ordersWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountRefundsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: refundsWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountTicketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ticketsWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountUser_ticketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: user_ticketsWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Hall
   */

  export type AggregateHall = {
    _count: HallCountAggregateOutputType | null
    _avg: HallAvgAggregateOutputType | null
    _sum: HallSumAggregateOutputType | null
    _min: HallMinAggregateOutputType | null
    _max: HallMaxAggregateOutputType | null
  }

  export type HallAvgAggregateOutputType = {
    id: number | null
    sortOrder: number | null
  }

  export type HallSumAggregateOutputType = {
    id: number | null
    sortOrder: number | null
  }

  export type HallMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    type: $Enums.HallType | null
    imageUrl: string | null
    isActive: boolean | null
    sortOrder: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type HallMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    type: $Enums.HallType | null
    imageUrl: string | null
    isActive: boolean | null
    sortOrder: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type HallCountAggregateOutputType = {
    id: number
    name: number
    description: number
    type: number
    imageUrl: number
    isActive: number
    sortOrder: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type HallAvgAggregateInputType = {
    id?: true
    sortOrder?: true
  }

  export type HallSumAggregateInputType = {
    id?: true
    sortOrder?: true
  }

  export type HallMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    type?: true
    imageUrl?: true
    isActive?: true
    sortOrder?: true
    createdAt?: true
    updatedAt?: true
  }

  export type HallMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    type?: true
    imageUrl?: true
    isActive?: true
    sortOrder?: true
    createdAt?: true
    updatedAt?: true
  }

  export type HallCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    type?: true
    imageUrl?: true
    isActive?: true
    sortOrder?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type HallAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Hall to aggregate.
     */
    where?: HallWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Halls to fetch.
     */
    orderBy?: HallOrderByWithRelationInput | HallOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HallWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Halls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Halls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Halls
    **/
    _count?: true | HallCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HallAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HallSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HallMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HallMaxAggregateInputType
  }

  export type GetHallAggregateType<T extends HallAggregateArgs> = {
        [P in keyof T & keyof AggregateHall]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHall[P]>
      : GetScalarType<T[P], AggregateHall[P]>
  }




  export type HallGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HallWhereInput
    orderBy?: HallOrderByWithAggregationInput | HallOrderByWithAggregationInput[]
    by: HallScalarFieldEnum[] | HallScalarFieldEnum
    having?: HallScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HallCountAggregateInputType | true
    _avg?: HallAvgAggregateInputType
    _sum?: HallSumAggregateInputType
    _min?: HallMinAggregateInputType
    _max?: HallMaxAggregateInputType
  }

  export type HallGroupByOutputType = {
    id: number
    name: string
    description: string | null
    type: $Enums.HallType
    imageUrl: string | null
    isActive: boolean
    sortOrder: number
    createdAt: Date
    updatedAt: Date
    _count: HallCountAggregateOutputType | null
    _avg: HallAvgAggregateOutputType | null
    _sum: HallSumAggregateOutputType | null
    _min: HallMinAggregateOutputType | null
    _max: HallMaxAggregateOutputType | null
  }

  type GetHallGroupByPayload<T extends HallGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HallGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HallGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HallGroupByOutputType[P]>
            : GetScalarType<T[P], HallGroupByOutputType[P]>
        }
      >
    >


  export type HallSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    type?: boolean
    imageUrl?: boolean
    isActive?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    zones?: boolean | Hall$zonesArgs<ExtArgs>
    _count?: boolean | HallCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["hall"]>

  export type HallSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    type?: boolean
    imageUrl?: boolean
    isActive?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["hall"]>

  export type HallSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    type?: boolean
    imageUrl?: boolean
    isActive?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type HallInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    zones?: boolean | Hall$zonesArgs<ExtArgs>
    _count?: boolean | HallCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type HallIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $HallPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Hall"
    objects: {
      zones: Prisma.$ZonePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string | null
      type: $Enums.HallType
      imageUrl: string | null
      isActive: boolean
      sortOrder: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["hall"]>
    composites: {}
  }

  type HallGetPayload<S extends boolean | null | undefined | HallDefaultArgs> = $Result.GetResult<Prisma.$HallPayload, S>

  type HallCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<HallFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: HallCountAggregateInputType | true
    }

  export interface HallDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Hall'], meta: { name: 'Hall' } }
    /**
     * Find zero or one Hall that matches the filter.
     * @param {HallFindUniqueArgs} args - Arguments to find a Hall
     * @example
     * // Get one Hall
     * const hall = await prisma.hall.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HallFindUniqueArgs>(args: SelectSubset<T, HallFindUniqueArgs<ExtArgs>>): Prisma__HallClient<$Result.GetResult<Prisma.$HallPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Hall that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {HallFindUniqueOrThrowArgs} args - Arguments to find a Hall
     * @example
     * // Get one Hall
     * const hall = await prisma.hall.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HallFindUniqueOrThrowArgs>(args: SelectSubset<T, HallFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HallClient<$Result.GetResult<Prisma.$HallPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Hall that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HallFindFirstArgs} args - Arguments to find a Hall
     * @example
     * // Get one Hall
     * const hall = await prisma.hall.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HallFindFirstArgs>(args?: SelectSubset<T, HallFindFirstArgs<ExtArgs>>): Prisma__HallClient<$Result.GetResult<Prisma.$HallPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Hall that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HallFindFirstOrThrowArgs} args - Arguments to find a Hall
     * @example
     * // Get one Hall
     * const hall = await prisma.hall.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HallFindFirstOrThrowArgs>(args?: SelectSubset<T, HallFindFirstOrThrowArgs<ExtArgs>>): Prisma__HallClient<$Result.GetResult<Prisma.$HallPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Halls that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HallFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Halls
     * const halls = await prisma.hall.findMany()
     * 
     * // Get first 10 Halls
     * const halls = await prisma.hall.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const hallWithIdOnly = await prisma.hall.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HallFindManyArgs>(args?: SelectSubset<T, HallFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HallPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Hall.
     * @param {HallCreateArgs} args - Arguments to create a Hall.
     * @example
     * // Create one Hall
     * const Hall = await prisma.hall.create({
     *   data: {
     *     // ... data to create a Hall
     *   }
     * })
     * 
     */
    create<T extends HallCreateArgs>(args: SelectSubset<T, HallCreateArgs<ExtArgs>>): Prisma__HallClient<$Result.GetResult<Prisma.$HallPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Halls.
     * @param {HallCreateManyArgs} args - Arguments to create many Halls.
     * @example
     * // Create many Halls
     * const hall = await prisma.hall.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HallCreateManyArgs>(args?: SelectSubset<T, HallCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Halls and returns the data saved in the database.
     * @param {HallCreateManyAndReturnArgs} args - Arguments to create many Halls.
     * @example
     * // Create many Halls
     * const hall = await prisma.hall.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Halls and only return the `id`
     * const hallWithIdOnly = await prisma.hall.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HallCreateManyAndReturnArgs>(args?: SelectSubset<T, HallCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HallPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Hall.
     * @param {HallDeleteArgs} args - Arguments to delete one Hall.
     * @example
     * // Delete one Hall
     * const Hall = await prisma.hall.delete({
     *   where: {
     *     // ... filter to delete one Hall
     *   }
     * })
     * 
     */
    delete<T extends HallDeleteArgs>(args: SelectSubset<T, HallDeleteArgs<ExtArgs>>): Prisma__HallClient<$Result.GetResult<Prisma.$HallPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Hall.
     * @param {HallUpdateArgs} args - Arguments to update one Hall.
     * @example
     * // Update one Hall
     * const hall = await prisma.hall.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HallUpdateArgs>(args: SelectSubset<T, HallUpdateArgs<ExtArgs>>): Prisma__HallClient<$Result.GetResult<Prisma.$HallPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Halls.
     * @param {HallDeleteManyArgs} args - Arguments to filter Halls to delete.
     * @example
     * // Delete a few Halls
     * const { count } = await prisma.hall.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HallDeleteManyArgs>(args?: SelectSubset<T, HallDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Halls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HallUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Halls
     * const hall = await prisma.hall.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HallUpdateManyArgs>(args: SelectSubset<T, HallUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Hall.
     * @param {HallUpsertArgs} args - Arguments to update or create a Hall.
     * @example
     * // Update or create a Hall
     * const hall = await prisma.hall.upsert({
     *   create: {
     *     // ... data to create a Hall
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Hall we want to update
     *   }
     * })
     */
    upsert<T extends HallUpsertArgs>(args: SelectSubset<T, HallUpsertArgs<ExtArgs>>): Prisma__HallClient<$Result.GetResult<Prisma.$HallPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Halls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HallCountArgs} args - Arguments to filter Halls to count.
     * @example
     * // Count the number of Halls
     * const count = await prisma.hall.count({
     *   where: {
     *     // ... the filter for the Halls we want to count
     *   }
     * })
    **/
    count<T extends HallCountArgs>(
      args?: Subset<T, HallCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HallCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Hall.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HallAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HallAggregateArgs>(args: Subset<T, HallAggregateArgs>): Prisma.PrismaPromise<GetHallAggregateType<T>>

    /**
     * Group by Hall.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HallGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HallGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HallGroupByArgs['orderBy'] }
        : { orderBy?: HallGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HallGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHallGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Hall model
   */
  readonly fields: HallFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Hall.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HallClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    zones<T extends Hall$zonesArgs<ExtArgs> = {}>(args?: Subset<T, Hall$zonesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ZonePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Hall model
   */ 
  interface HallFieldRefs {
    readonly id: FieldRef<"Hall", 'Int'>
    readonly name: FieldRef<"Hall", 'String'>
    readonly description: FieldRef<"Hall", 'String'>
    readonly type: FieldRef<"Hall", 'HallType'>
    readonly imageUrl: FieldRef<"Hall", 'String'>
    readonly isActive: FieldRef<"Hall", 'Boolean'>
    readonly sortOrder: FieldRef<"Hall", 'Int'>
    readonly createdAt: FieldRef<"Hall", 'DateTime'>
    readonly updatedAt: FieldRef<"Hall", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Hall findUnique
   */
  export type HallFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hall
     */
    select?: HallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HallInclude<ExtArgs> | null
    /**
     * Filter, which Hall to fetch.
     */
    where: HallWhereUniqueInput
  }

  /**
   * Hall findUniqueOrThrow
   */
  export type HallFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hall
     */
    select?: HallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HallInclude<ExtArgs> | null
    /**
     * Filter, which Hall to fetch.
     */
    where: HallWhereUniqueInput
  }

  /**
   * Hall findFirst
   */
  export type HallFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hall
     */
    select?: HallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HallInclude<ExtArgs> | null
    /**
     * Filter, which Hall to fetch.
     */
    where?: HallWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Halls to fetch.
     */
    orderBy?: HallOrderByWithRelationInput | HallOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Halls.
     */
    cursor?: HallWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Halls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Halls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Halls.
     */
    distinct?: HallScalarFieldEnum | HallScalarFieldEnum[]
  }

  /**
   * Hall findFirstOrThrow
   */
  export type HallFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hall
     */
    select?: HallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HallInclude<ExtArgs> | null
    /**
     * Filter, which Hall to fetch.
     */
    where?: HallWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Halls to fetch.
     */
    orderBy?: HallOrderByWithRelationInput | HallOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Halls.
     */
    cursor?: HallWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Halls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Halls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Halls.
     */
    distinct?: HallScalarFieldEnum | HallScalarFieldEnum[]
  }

  /**
   * Hall findMany
   */
  export type HallFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hall
     */
    select?: HallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HallInclude<ExtArgs> | null
    /**
     * Filter, which Halls to fetch.
     */
    where?: HallWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Halls to fetch.
     */
    orderBy?: HallOrderByWithRelationInput | HallOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Halls.
     */
    cursor?: HallWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Halls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Halls.
     */
    skip?: number
    distinct?: HallScalarFieldEnum | HallScalarFieldEnum[]
  }

  /**
   * Hall create
   */
  export type HallCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hall
     */
    select?: HallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HallInclude<ExtArgs> | null
    /**
     * The data needed to create a Hall.
     */
    data: XOR<HallCreateInput, HallUncheckedCreateInput>
  }

  /**
   * Hall createMany
   */
  export type HallCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Halls.
     */
    data: HallCreateManyInput | HallCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Hall createManyAndReturn
   */
  export type HallCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hall
     */
    select?: HallSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Halls.
     */
    data: HallCreateManyInput | HallCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Hall update
   */
  export type HallUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hall
     */
    select?: HallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HallInclude<ExtArgs> | null
    /**
     * The data needed to update a Hall.
     */
    data: XOR<HallUpdateInput, HallUncheckedUpdateInput>
    /**
     * Choose, which Hall to update.
     */
    where: HallWhereUniqueInput
  }

  /**
   * Hall updateMany
   */
  export type HallUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Halls.
     */
    data: XOR<HallUpdateManyMutationInput, HallUncheckedUpdateManyInput>
    /**
     * Filter which Halls to update
     */
    where?: HallWhereInput
  }

  /**
   * Hall upsert
   */
  export type HallUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hall
     */
    select?: HallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HallInclude<ExtArgs> | null
    /**
     * The filter to search for the Hall to update in case it exists.
     */
    where: HallWhereUniqueInput
    /**
     * In case the Hall found by the `where` argument doesn't exist, create a new Hall with this data.
     */
    create: XOR<HallCreateInput, HallUncheckedCreateInput>
    /**
     * In case the Hall was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HallUpdateInput, HallUncheckedUpdateInput>
  }

  /**
   * Hall delete
   */
  export type HallDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hall
     */
    select?: HallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HallInclude<ExtArgs> | null
    /**
     * Filter which Hall to delete.
     */
    where: HallWhereUniqueInput
  }

  /**
   * Hall deleteMany
   */
  export type HallDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Halls to delete
     */
    where?: HallWhereInput
  }

  /**
   * Hall.zones
   */
  export type Hall$zonesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zone
     */
    select?: ZoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneInclude<ExtArgs> | null
    where?: ZoneWhereInput
    orderBy?: ZoneOrderByWithRelationInput | ZoneOrderByWithRelationInput[]
    cursor?: ZoneWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ZoneScalarFieldEnum | ZoneScalarFieldEnum[]
  }

  /**
   * Hall without action
   */
  export type HallDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hall
     */
    select?: HallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HallInclude<ExtArgs> | null
  }


  /**
   * Model Zone
   */

  export type AggregateZone = {
    _count: ZoneCountAggregateOutputType | null
    _avg: ZoneAvgAggregateOutputType | null
    _sum: ZoneSumAggregateOutputType | null
    _min: ZoneMinAggregateOutputType | null
    _max: ZoneMaxAggregateOutputType | null
  }

  export type ZoneAvgAggregateOutputType = {
    id: number | null
    hallId: number | null
    sortOrder: number | null
  }

  export type ZoneSumAggregateOutputType = {
    id: number | null
    hallId: number | null
    sortOrder: number | null
  }

  export type ZoneMinAggregateOutputType = {
    id: number | null
    name: string | null
    type: $Enums.ZoneType | null
    hallId: number | null
    openTime: string | null
    closeTime: string | null
    imageUrl: string | null
    description: string | null
    isActive: boolean | null
    sortOrder: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ZoneMaxAggregateOutputType = {
    id: number | null
    name: string | null
    type: $Enums.ZoneType | null
    hallId: number | null
    openTime: string | null
    closeTime: string | null
    imageUrl: string | null
    description: string | null
    isActive: boolean | null
    sortOrder: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ZoneCountAggregateOutputType = {
    id: number
    name: number
    type: number
    hallId: number
    openTime: number
    closeTime: number
    imageUrl: number
    description: number
    isActive: number
    sortOrder: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ZoneAvgAggregateInputType = {
    id?: true
    hallId?: true
    sortOrder?: true
  }

  export type ZoneSumAggregateInputType = {
    id?: true
    hallId?: true
    sortOrder?: true
  }

  export type ZoneMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    hallId?: true
    openTime?: true
    closeTime?: true
    imageUrl?: true
    description?: true
    isActive?: true
    sortOrder?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ZoneMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    hallId?: true
    openTime?: true
    closeTime?: true
    imageUrl?: true
    description?: true
    isActive?: true
    sortOrder?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ZoneCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    hallId?: true
    openTime?: true
    closeTime?: true
    imageUrl?: true
    description?: true
    isActive?: true
    sortOrder?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ZoneAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Zone to aggregate.
     */
    where?: ZoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Zones to fetch.
     */
    orderBy?: ZoneOrderByWithRelationInput | ZoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ZoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Zones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Zones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Zones
    **/
    _count?: true | ZoneCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ZoneAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ZoneSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ZoneMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ZoneMaxAggregateInputType
  }

  export type GetZoneAggregateType<T extends ZoneAggregateArgs> = {
        [P in keyof T & keyof AggregateZone]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateZone[P]>
      : GetScalarType<T[P], AggregateZone[P]>
  }




  export type ZoneGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ZoneWhereInput
    orderBy?: ZoneOrderByWithAggregationInput | ZoneOrderByWithAggregationInput[]
    by: ZoneScalarFieldEnum[] | ZoneScalarFieldEnum
    having?: ZoneScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ZoneCountAggregateInputType | true
    _avg?: ZoneAvgAggregateInputType
    _sum?: ZoneSumAggregateInputType
    _min?: ZoneMinAggregateInputType
    _max?: ZoneMaxAggregateInputType
  }

  export type ZoneGroupByOutputType = {
    id: number
    name: string
    type: $Enums.ZoneType
    hallId: number
    openTime: string
    closeTime: string
    imageUrl: string | null
    description: string | null
    isActive: boolean
    sortOrder: number
    createdAt: Date
    updatedAt: Date
    _count: ZoneCountAggregateOutputType | null
    _avg: ZoneAvgAggregateOutputType | null
    _sum: ZoneSumAggregateOutputType | null
    _min: ZoneMinAggregateOutputType | null
    _max: ZoneMaxAggregateOutputType | null
  }

  type GetZoneGroupByPayload<T extends ZoneGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ZoneGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ZoneGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ZoneGroupByOutputType[P]>
            : GetScalarType<T[P], ZoneGroupByOutputType[P]>
        }
      >
    >


  export type ZoneSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    hallId?: boolean
    openTime?: boolean
    closeTime?: boolean
    imageUrl?: boolean
    description?: boolean
    isActive?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    hall?: boolean | HallDefaultArgs<ExtArgs>
    items?: boolean | Zone$itemsArgs<ExtArgs>
    _count?: boolean | ZoneCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["zone"]>

  export type ZoneSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    hallId?: boolean
    openTime?: boolean
    closeTime?: boolean
    imageUrl?: boolean
    description?: boolean
    isActive?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    hall?: boolean | HallDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["zone"]>

  export type ZoneSelectScalar = {
    id?: boolean
    name?: boolean
    type?: boolean
    hallId?: boolean
    openTime?: boolean
    closeTime?: boolean
    imageUrl?: boolean
    description?: boolean
    isActive?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ZoneInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hall?: boolean | HallDefaultArgs<ExtArgs>
    items?: boolean | Zone$itemsArgs<ExtArgs>
    _count?: boolean | ZoneCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ZoneIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hall?: boolean | HallDefaultArgs<ExtArgs>
  }

  export type $ZonePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Zone"
    objects: {
      hall: Prisma.$HallPayload<ExtArgs>
      items: Prisma.$ZoneItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      type: $Enums.ZoneType
      hallId: number
      openTime: string
      closeTime: string
      imageUrl: string | null
      description: string | null
      isActive: boolean
      sortOrder: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["zone"]>
    composites: {}
  }

  type ZoneGetPayload<S extends boolean | null | undefined | ZoneDefaultArgs> = $Result.GetResult<Prisma.$ZonePayload, S>

  type ZoneCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ZoneFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ZoneCountAggregateInputType | true
    }

  export interface ZoneDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Zone'], meta: { name: 'Zone' } }
    /**
     * Find zero or one Zone that matches the filter.
     * @param {ZoneFindUniqueArgs} args - Arguments to find a Zone
     * @example
     * // Get one Zone
     * const zone = await prisma.zone.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ZoneFindUniqueArgs>(args: SelectSubset<T, ZoneFindUniqueArgs<ExtArgs>>): Prisma__ZoneClient<$Result.GetResult<Prisma.$ZonePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Zone that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ZoneFindUniqueOrThrowArgs} args - Arguments to find a Zone
     * @example
     * // Get one Zone
     * const zone = await prisma.zone.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ZoneFindUniqueOrThrowArgs>(args: SelectSubset<T, ZoneFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ZoneClient<$Result.GetResult<Prisma.$ZonePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Zone that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZoneFindFirstArgs} args - Arguments to find a Zone
     * @example
     * // Get one Zone
     * const zone = await prisma.zone.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ZoneFindFirstArgs>(args?: SelectSubset<T, ZoneFindFirstArgs<ExtArgs>>): Prisma__ZoneClient<$Result.GetResult<Prisma.$ZonePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Zone that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZoneFindFirstOrThrowArgs} args - Arguments to find a Zone
     * @example
     * // Get one Zone
     * const zone = await prisma.zone.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ZoneFindFirstOrThrowArgs>(args?: SelectSubset<T, ZoneFindFirstOrThrowArgs<ExtArgs>>): Prisma__ZoneClient<$Result.GetResult<Prisma.$ZonePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Zones that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZoneFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Zones
     * const zones = await prisma.zone.findMany()
     * 
     * // Get first 10 Zones
     * const zones = await prisma.zone.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const zoneWithIdOnly = await prisma.zone.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ZoneFindManyArgs>(args?: SelectSubset<T, ZoneFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ZonePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Zone.
     * @param {ZoneCreateArgs} args - Arguments to create a Zone.
     * @example
     * // Create one Zone
     * const Zone = await prisma.zone.create({
     *   data: {
     *     // ... data to create a Zone
     *   }
     * })
     * 
     */
    create<T extends ZoneCreateArgs>(args: SelectSubset<T, ZoneCreateArgs<ExtArgs>>): Prisma__ZoneClient<$Result.GetResult<Prisma.$ZonePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Zones.
     * @param {ZoneCreateManyArgs} args - Arguments to create many Zones.
     * @example
     * // Create many Zones
     * const zone = await prisma.zone.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ZoneCreateManyArgs>(args?: SelectSubset<T, ZoneCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Zones and returns the data saved in the database.
     * @param {ZoneCreateManyAndReturnArgs} args - Arguments to create many Zones.
     * @example
     * // Create many Zones
     * const zone = await prisma.zone.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Zones and only return the `id`
     * const zoneWithIdOnly = await prisma.zone.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ZoneCreateManyAndReturnArgs>(args?: SelectSubset<T, ZoneCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ZonePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Zone.
     * @param {ZoneDeleteArgs} args - Arguments to delete one Zone.
     * @example
     * // Delete one Zone
     * const Zone = await prisma.zone.delete({
     *   where: {
     *     // ... filter to delete one Zone
     *   }
     * })
     * 
     */
    delete<T extends ZoneDeleteArgs>(args: SelectSubset<T, ZoneDeleteArgs<ExtArgs>>): Prisma__ZoneClient<$Result.GetResult<Prisma.$ZonePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Zone.
     * @param {ZoneUpdateArgs} args - Arguments to update one Zone.
     * @example
     * // Update one Zone
     * const zone = await prisma.zone.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ZoneUpdateArgs>(args: SelectSubset<T, ZoneUpdateArgs<ExtArgs>>): Prisma__ZoneClient<$Result.GetResult<Prisma.$ZonePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Zones.
     * @param {ZoneDeleteManyArgs} args - Arguments to filter Zones to delete.
     * @example
     * // Delete a few Zones
     * const { count } = await prisma.zone.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ZoneDeleteManyArgs>(args?: SelectSubset<T, ZoneDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Zones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZoneUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Zones
     * const zone = await prisma.zone.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ZoneUpdateManyArgs>(args: SelectSubset<T, ZoneUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Zone.
     * @param {ZoneUpsertArgs} args - Arguments to update or create a Zone.
     * @example
     * // Update or create a Zone
     * const zone = await prisma.zone.upsert({
     *   create: {
     *     // ... data to create a Zone
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Zone we want to update
     *   }
     * })
     */
    upsert<T extends ZoneUpsertArgs>(args: SelectSubset<T, ZoneUpsertArgs<ExtArgs>>): Prisma__ZoneClient<$Result.GetResult<Prisma.$ZonePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Zones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZoneCountArgs} args - Arguments to filter Zones to count.
     * @example
     * // Count the number of Zones
     * const count = await prisma.zone.count({
     *   where: {
     *     // ... the filter for the Zones we want to count
     *   }
     * })
    **/
    count<T extends ZoneCountArgs>(
      args?: Subset<T, ZoneCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ZoneCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Zone.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZoneAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ZoneAggregateArgs>(args: Subset<T, ZoneAggregateArgs>): Prisma.PrismaPromise<GetZoneAggregateType<T>>

    /**
     * Group by Zone.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZoneGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ZoneGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ZoneGroupByArgs['orderBy'] }
        : { orderBy?: ZoneGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ZoneGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetZoneGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Zone model
   */
  readonly fields: ZoneFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Zone.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ZoneClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    hall<T extends HallDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HallDefaultArgs<ExtArgs>>): Prisma__HallClient<$Result.GetResult<Prisma.$HallPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    items<T extends Zone$itemsArgs<ExtArgs> = {}>(args?: Subset<T, Zone$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ZoneItemPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Zone model
   */ 
  interface ZoneFieldRefs {
    readonly id: FieldRef<"Zone", 'Int'>
    readonly name: FieldRef<"Zone", 'String'>
    readonly type: FieldRef<"Zone", 'ZoneType'>
    readonly hallId: FieldRef<"Zone", 'Int'>
    readonly openTime: FieldRef<"Zone", 'String'>
    readonly closeTime: FieldRef<"Zone", 'String'>
    readonly imageUrl: FieldRef<"Zone", 'String'>
    readonly description: FieldRef<"Zone", 'String'>
    readonly isActive: FieldRef<"Zone", 'Boolean'>
    readonly sortOrder: FieldRef<"Zone", 'Int'>
    readonly createdAt: FieldRef<"Zone", 'DateTime'>
    readonly updatedAt: FieldRef<"Zone", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Zone findUnique
   */
  export type ZoneFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zone
     */
    select?: ZoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneInclude<ExtArgs> | null
    /**
     * Filter, which Zone to fetch.
     */
    where: ZoneWhereUniqueInput
  }

  /**
   * Zone findUniqueOrThrow
   */
  export type ZoneFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zone
     */
    select?: ZoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneInclude<ExtArgs> | null
    /**
     * Filter, which Zone to fetch.
     */
    where: ZoneWhereUniqueInput
  }

  /**
   * Zone findFirst
   */
  export type ZoneFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zone
     */
    select?: ZoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneInclude<ExtArgs> | null
    /**
     * Filter, which Zone to fetch.
     */
    where?: ZoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Zones to fetch.
     */
    orderBy?: ZoneOrderByWithRelationInput | ZoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Zones.
     */
    cursor?: ZoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Zones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Zones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Zones.
     */
    distinct?: ZoneScalarFieldEnum | ZoneScalarFieldEnum[]
  }

  /**
   * Zone findFirstOrThrow
   */
  export type ZoneFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zone
     */
    select?: ZoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneInclude<ExtArgs> | null
    /**
     * Filter, which Zone to fetch.
     */
    where?: ZoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Zones to fetch.
     */
    orderBy?: ZoneOrderByWithRelationInput | ZoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Zones.
     */
    cursor?: ZoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Zones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Zones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Zones.
     */
    distinct?: ZoneScalarFieldEnum | ZoneScalarFieldEnum[]
  }

  /**
   * Zone findMany
   */
  export type ZoneFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zone
     */
    select?: ZoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneInclude<ExtArgs> | null
    /**
     * Filter, which Zones to fetch.
     */
    where?: ZoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Zones to fetch.
     */
    orderBy?: ZoneOrderByWithRelationInput | ZoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Zones.
     */
    cursor?: ZoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Zones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Zones.
     */
    skip?: number
    distinct?: ZoneScalarFieldEnum | ZoneScalarFieldEnum[]
  }

  /**
   * Zone create
   */
  export type ZoneCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zone
     */
    select?: ZoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneInclude<ExtArgs> | null
    /**
     * The data needed to create a Zone.
     */
    data: XOR<ZoneCreateInput, ZoneUncheckedCreateInput>
  }

  /**
   * Zone createMany
   */
  export type ZoneCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Zones.
     */
    data: ZoneCreateManyInput | ZoneCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Zone createManyAndReturn
   */
  export type ZoneCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zone
     */
    select?: ZoneSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Zones.
     */
    data: ZoneCreateManyInput | ZoneCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Zone update
   */
  export type ZoneUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zone
     */
    select?: ZoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneInclude<ExtArgs> | null
    /**
     * The data needed to update a Zone.
     */
    data: XOR<ZoneUpdateInput, ZoneUncheckedUpdateInput>
    /**
     * Choose, which Zone to update.
     */
    where: ZoneWhereUniqueInput
  }

  /**
   * Zone updateMany
   */
  export type ZoneUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Zones.
     */
    data: XOR<ZoneUpdateManyMutationInput, ZoneUncheckedUpdateManyInput>
    /**
     * Filter which Zones to update
     */
    where?: ZoneWhereInput
  }

  /**
   * Zone upsert
   */
  export type ZoneUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zone
     */
    select?: ZoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneInclude<ExtArgs> | null
    /**
     * The filter to search for the Zone to update in case it exists.
     */
    where: ZoneWhereUniqueInput
    /**
     * In case the Zone found by the `where` argument doesn't exist, create a new Zone with this data.
     */
    create: XOR<ZoneCreateInput, ZoneUncheckedCreateInput>
    /**
     * In case the Zone was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ZoneUpdateInput, ZoneUncheckedUpdateInput>
  }

  /**
   * Zone delete
   */
  export type ZoneDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zone
     */
    select?: ZoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneInclude<ExtArgs> | null
    /**
     * Filter which Zone to delete.
     */
    where: ZoneWhereUniqueInput
  }

  /**
   * Zone deleteMany
   */
  export type ZoneDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Zones to delete
     */
    where?: ZoneWhereInput
  }

  /**
   * Zone.items
   */
  export type Zone$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZoneItem
     */
    select?: ZoneItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneItemInclude<ExtArgs> | null
    where?: ZoneItemWhereInput
    orderBy?: ZoneItemOrderByWithRelationInput | ZoneItemOrderByWithRelationInput[]
    cursor?: ZoneItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ZoneItemScalarFieldEnum | ZoneItemScalarFieldEnum[]
  }

  /**
   * Zone without action
   */
  export type ZoneDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zone
     */
    select?: ZoneSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneInclude<ExtArgs> | null
  }


  /**
   * Model ZoneItem
   */

  export type AggregateZoneItem = {
    _count: ZoneItemCountAggregateOutputType | null
    _avg: ZoneItemAvgAggregateOutputType | null
    _sum: ZoneItemSumAggregateOutputType | null
    _min: ZoneItemMinAggregateOutputType | null
    _max: ZoneItemMaxAggregateOutputType | null
  }

  export type ZoneItemAvgAggregateOutputType = {
    id: number | null
    zoneId: number | null
    floor: number | null
    x: number | null
    y: number | null
    width: number | null
    height: number | null
    seats: number | null
    capacity: number | null
    pricePerHour: Decimal | null
    pricePerSeat: Decimal | null
    pricePerSlot: Decimal | null
    minDuration: number | null
    maxDuration: number | null
  }

  export type ZoneItemSumAggregateOutputType = {
    id: number | null
    zoneId: number | null
    floor: number | null
    x: number | null
    y: number | null
    width: number | null
    height: number | null
    seats: number | null
    capacity: number | null
    pricePerHour: Decimal | null
    pricePerSeat: Decimal | null
    pricePerSlot: Decimal | null
    minDuration: number | null
    maxDuration: number | null
  }

  export type ZoneItemMinAggregateOutputType = {
    id: number | null
    zoneId: number | null
    floor: number | null
    label: string | null
    type: $Enums.ZoneItemType | null
    isBooking: boolean | null
    isActive: boolean | null
    x: number | null
    y: number | null
    width: number | null
    height: number | null
    seats: number | null
    capacity: number | null
    pricePerHour: Decimal | null
    pricePerSeat: Decimal | null
    pricePerSlot: Decimal | null
    minDuration: number | null
    maxDuration: number | null
    description: string | null
  }

  export type ZoneItemMaxAggregateOutputType = {
    id: number | null
    zoneId: number | null
    floor: number | null
    label: string | null
    type: $Enums.ZoneItemType | null
    isBooking: boolean | null
    isActive: boolean | null
    x: number | null
    y: number | null
    width: number | null
    height: number | null
    seats: number | null
    capacity: number | null
    pricePerHour: Decimal | null
    pricePerSeat: Decimal | null
    pricePerSlot: Decimal | null
    minDuration: number | null
    maxDuration: number | null
    description: string | null
  }

  export type ZoneItemCountAggregateOutputType = {
    id: number
    zoneId: number
    floor: number
    label: number
    type: number
    isBooking: number
    isActive: number
    x: number
    y: number
    width: number
    height: number
    seats: number
    capacity: number
    pricePerHour: number
    pricePerSeat: number
    pricePerSlot: number
    minDuration: number
    maxDuration: number
    timeSlots: number
    description: number
    features: number
    _all: number
  }


  export type ZoneItemAvgAggregateInputType = {
    id?: true
    zoneId?: true
    floor?: true
    x?: true
    y?: true
    width?: true
    height?: true
    seats?: true
    capacity?: true
    pricePerHour?: true
    pricePerSeat?: true
    pricePerSlot?: true
    minDuration?: true
    maxDuration?: true
  }

  export type ZoneItemSumAggregateInputType = {
    id?: true
    zoneId?: true
    floor?: true
    x?: true
    y?: true
    width?: true
    height?: true
    seats?: true
    capacity?: true
    pricePerHour?: true
    pricePerSeat?: true
    pricePerSlot?: true
    minDuration?: true
    maxDuration?: true
  }

  export type ZoneItemMinAggregateInputType = {
    id?: true
    zoneId?: true
    floor?: true
    label?: true
    type?: true
    isBooking?: true
    isActive?: true
    x?: true
    y?: true
    width?: true
    height?: true
    seats?: true
    capacity?: true
    pricePerHour?: true
    pricePerSeat?: true
    pricePerSlot?: true
    minDuration?: true
    maxDuration?: true
    description?: true
  }

  export type ZoneItemMaxAggregateInputType = {
    id?: true
    zoneId?: true
    floor?: true
    label?: true
    type?: true
    isBooking?: true
    isActive?: true
    x?: true
    y?: true
    width?: true
    height?: true
    seats?: true
    capacity?: true
    pricePerHour?: true
    pricePerSeat?: true
    pricePerSlot?: true
    minDuration?: true
    maxDuration?: true
    description?: true
  }

  export type ZoneItemCountAggregateInputType = {
    id?: true
    zoneId?: true
    floor?: true
    label?: true
    type?: true
    isBooking?: true
    isActive?: true
    x?: true
    y?: true
    width?: true
    height?: true
    seats?: true
    capacity?: true
    pricePerHour?: true
    pricePerSeat?: true
    pricePerSlot?: true
    minDuration?: true
    maxDuration?: true
    timeSlots?: true
    description?: true
    features?: true
    _all?: true
  }

  export type ZoneItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ZoneItem to aggregate.
     */
    where?: ZoneItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ZoneItems to fetch.
     */
    orderBy?: ZoneItemOrderByWithRelationInput | ZoneItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ZoneItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ZoneItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ZoneItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ZoneItems
    **/
    _count?: true | ZoneItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ZoneItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ZoneItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ZoneItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ZoneItemMaxAggregateInputType
  }

  export type GetZoneItemAggregateType<T extends ZoneItemAggregateArgs> = {
        [P in keyof T & keyof AggregateZoneItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateZoneItem[P]>
      : GetScalarType<T[P], AggregateZoneItem[P]>
  }




  export type ZoneItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ZoneItemWhereInput
    orderBy?: ZoneItemOrderByWithAggregationInput | ZoneItemOrderByWithAggregationInput[]
    by: ZoneItemScalarFieldEnum[] | ZoneItemScalarFieldEnum
    having?: ZoneItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ZoneItemCountAggregateInputType | true
    _avg?: ZoneItemAvgAggregateInputType
    _sum?: ZoneItemSumAggregateInputType
    _min?: ZoneItemMinAggregateInputType
    _max?: ZoneItemMaxAggregateInputType
  }

  export type ZoneItemGroupByOutputType = {
    id: number
    zoneId: number
    floor: number
    label: string
    type: $Enums.ZoneItemType
    isBooking: boolean
    isActive: boolean
    x: number
    y: number
    width: number
    height: number
    seats: number | null
    capacity: number | null
    pricePerHour: Decimal | null
    pricePerSeat: Decimal | null
    pricePerSlot: Decimal | null
    minDuration: number | null
    maxDuration: number | null
    timeSlots: string[]
    description: string | null
    features: string[]
    _count: ZoneItemCountAggregateOutputType | null
    _avg: ZoneItemAvgAggregateOutputType | null
    _sum: ZoneItemSumAggregateOutputType | null
    _min: ZoneItemMinAggregateOutputType | null
    _max: ZoneItemMaxAggregateOutputType | null
  }

  type GetZoneItemGroupByPayload<T extends ZoneItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ZoneItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ZoneItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ZoneItemGroupByOutputType[P]>
            : GetScalarType<T[P], ZoneItemGroupByOutputType[P]>
        }
      >
    >


  export type ZoneItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    zoneId?: boolean
    floor?: boolean
    label?: boolean
    type?: boolean
    isBooking?: boolean
    isActive?: boolean
    x?: boolean
    y?: boolean
    width?: boolean
    height?: boolean
    seats?: boolean
    capacity?: boolean
    pricePerHour?: boolean
    pricePerSeat?: boolean
    pricePerSlot?: boolean
    minDuration?: boolean
    maxDuration?: boolean
    timeSlots?: boolean
    description?: boolean
    features?: boolean
    reservations?: boolean | ZoneItem$reservationsArgs<ExtArgs>
    zone?: boolean | ZoneDefaultArgs<ExtArgs>
    _count?: boolean | ZoneItemCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["zoneItem"]>

  export type ZoneItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    zoneId?: boolean
    floor?: boolean
    label?: boolean
    type?: boolean
    isBooking?: boolean
    isActive?: boolean
    x?: boolean
    y?: boolean
    width?: boolean
    height?: boolean
    seats?: boolean
    capacity?: boolean
    pricePerHour?: boolean
    pricePerSeat?: boolean
    pricePerSlot?: boolean
    minDuration?: boolean
    maxDuration?: boolean
    timeSlots?: boolean
    description?: boolean
    features?: boolean
    zone?: boolean | ZoneDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["zoneItem"]>

  export type ZoneItemSelectScalar = {
    id?: boolean
    zoneId?: boolean
    floor?: boolean
    label?: boolean
    type?: boolean
    isBooking?: boolean
    isActive?: boolean
    x?: boolean
    y?: boolean
    width?: boolean
    height?: boolean
    seats?: boolean
    capacity?: boolean
    pricePerHour?: boolean
    pricePerSeat?: boolean
    pricePerSlot?: boolean
    minDuration?: boolean
    maxDuration?: boolean
    timeSlots?: boolean
    description?: boolean
    features?: boolean
  }

  export type ZoneItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reservations?: boolean | ZoneItem$reservationsArgs<ExtArgs>
    zone?: boolean | ZoneDefaultArgs<ExtArgs>
    _count?: boolean | ZoneItemCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ZoneItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    zone?: boolean | ZoneDefaultArgs<ExtArgs>
  }

  export type $ZoneItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ZoneItem"
    objects: {
      reservations: Prisma.$ReservationPayload<ExtArgs>[]
      zone: Prisma.$ZonePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      zoneId: number
      floor: number
      label: string
      type: $Enums.ZoneItemType
      isBooking: boolean
      isActive: boolean
      x: number
      y: number
      width: number
      height: number
      seats: number | null
      capacity: number | null
      pricePerHour: Prisma.Decimal | null
      pricePerSeat: Prisma.Decimal | null
      pricePerSlot: Prisma.Decimal | null
      minDuration: number | null
      maxDuration: number | null
      timeSlots: string[]
      description: string | null
      features: string[]
    }, ExtArgs["result"]["zoneItem"]>
    composites: {}
  }

  type ZoneItemGetPayload<S extends boolean | null | undefined | ZoneItemDefaultArgs> = $Result.GetResult<Prisma.$ZoneItemPayload, S>

  type ZoneItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ZoneItemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ZoneItemCountAggregateInputType | true
    }

  export interface ZoneItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ZoneItem'], meta: { name: 'ZoneItem' } }
    /**
     * Find zero or one ZoneItem that matches the filter.
     * @param {ZoneItemFindUniqueArgs} args - Arguments to find a ZoneItem
     * @example
     * // Get one ZoneItem
     * const zoneItem = await prisma.zoneItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ZoneItemFindUniqueArgs>(args: SelectSubset<T, ZoneItemFindUniqueArgs<ExtArgs>>): Prisma__ZoneItemClient<$Result.GetResult<Prisma.$ZoneItemPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ZoneItem that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ZoneItemFindUniqueOrThrowArgs} args - Arguments to find a ZoneItem
     * @example
     * // Get one ZoneItem
     * const zoneItem = await prisma.zoneItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ZoneItemFindUniqueOrThrowArgs>(args: SelectSubset<T, ZoneItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ZoneItemClient<$Result.GetResult<Prisma.$ZoneItemPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ZoneItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZoneItemFindFirstArgs} args - Arguments to find a ZoneItem
     * @example
     * // Get one ZoneItem
     * const zoneItem = await prisma.zoneItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ZoneItemFindFirstArgs>(args?: SelectSubset<T, ZoneItemFindFirstArgs<ExtArgs>>): Prisma__ZoneItemClient<$Result.GetResult<Prisma.$ZoneItemPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ZoneItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZoneItemFindFirstOrThrowArgs} args - Arguments to find a ZoneItem
     * @example
     * // Get one ZoneItem
     * const zoneItem = await prisma.zoneItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ZoneItemFindFirstOrThrowArgs>(args?: SelectSubset<T, ZoneItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__ZoneItemClient<$Result.GetResult<Prisma.$ZoneItemPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ZoneItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZoneItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ZoneItems
     * const zoneItems = await prisma.zoneItem.findMany()
     * 
     * // Get first 10 ZoneItems
     * const zoneItems = await prisma.zoneItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const zoneItemWithIdOnly = await prisma.zoneItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ZoneItemFindManyArgs>(args?: SelectSubset<T, ZoneItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ZoneItemPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ZoneItem.
     * @param {ZoneItemCreateArgs} args - Arguments to create a ZoneItem.
     * @example
     * // Create one ZoneItem
     * const ZoneItem = await prisma.zoneItem.create({
     *   data: {
     *     // ... data to create a ZoneItem
     *   }
     * })
     * 
     */
    create<T extends ZoneItemCreateArgs>(args: SelectSubset<T, ZoneItemCreateArgs<ExtArgs>>): Prisma__ZoneItemClient<$Result.GetResult<Prisma.$ZoneItemPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ZoneItems.
     * @param {ZoneItemCreateManyArgs} args - Arguments to create many ZoneItems.
     * @example
     * // Create many ZoneItems
     * const zoneItem = await prisma.zoneItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ZoneItemCreateManyArgs>(args?: SelectSubset<T, ZoneItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ZoneItems and returns the data saved in the database.
     * @param {ZoneItemCreateManyAndReturnArgs} args - Arguments to create many ZoneItems.
     * @example
     * // Create many ZoneItems
     * const zoneItem = await prisma.zoneItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ZoneItems and only return the `id`
     * const zoneItemWithIdOnly = await prisma.zoneItem.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ZoneItemCreateManyAndReturnArgs>(args?: SelectSubset<T, ZoneItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ZoneItemPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ZoneItem.
     * @param {ZoneItemDeleteArgs} args - Arguments to delete one ZoneItem.
     * @example
     * // Delete one ZoneItem
     * const ZoneItem = await prisma.zoneItem.delete({
     *   where: {
     *     // ... filter to delete one ZoneItem
     *   }
     * })
     * 
     */
    delete<T extends ZoneItemDeleteArgs>(args: SelectSubset<T, ZoneItemDeleteArgs<ExtArgs>>): Prisma__ZoneItemClient<$Result.GetResult<Prisma.$ZoneItemPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ZoneItem.
     * @param {ZoneItemUpdateArgs} args - Arguments to update one ZoneItem.
     * @example
     * // Update one ZoneItem
     * const zoneItem = await prisma.zoneItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ZoneItemUpdateArgs>(args: SelectSubset<T, ZoneItemUpdateArgs<ExtArgs>>): Prisma__ZoneItemClient<$Result.GetResult<Prisma.$ZoneItemPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ZoneItems.
     * @param {ZoneItemDeleteManyArgs} args - Arguments to filter ZoneItems to delete.
     * @example
     * // Delete a few ZoneItems
     * const { count } = await prisma.zoneItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ZoneItemDeleteManyArgs>(args?: SelectSubset<T, ZoneItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ZoneItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZoneItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ZoneItems
     * const zoneItem = await prisma.zoneItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ZoneItemUpdateManyArgs>(args: SelectSubset<T, ZoneItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ZoneItem.
     * @param {ZoneItemUpsertArgs} args - Arguments to update or create a ZoneItem.
     * @example
     * // Update or create a ZoneItem
     * const zoneItem = await prisma.zoneItem.upsert({
     *   create: {
     *     // ... data to create a ZoneItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ZoneItem we want to update
     *   }
     * })
     */
    upsert<T extends ZoneItemUpsertArgs>(args: SelectSubset<T, ZoneItemUpsertArgs<ExtArgs>>): Prisma__ZoneItemClient<$Result.GetResult<Prisma.$ZoneItemPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ZoneItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZoneItemCountArgs} args - Arguments to filter ZoneItems to count.
     * @example
     * // Count the number of ZoneItems
     * const count = await prisma.zoneItem.count({
     *   where: {
     *     // ... the filter for the ZoneItems we want to count
     *   }
     * })
    **/
    count<T extends ZoneItemCountArgs>(
      args?: Subset<T, ZoneItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ZoneItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ZoneItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZoneItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ZoneItemAggregateArgs>(args: Subset<T, ZoneItemAggregateArgs>): Prisma.PrismaPromise<GetZoneItemAggregateType<T>>

    /**
     * Group by ZoneItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZoneItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ZoneItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ZoneItemGroupByArgs['orderBy'] }
        : { orderBy?: ZoneItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ZoneItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetZoneItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ZoneItem model
   */
  readonly fields: ZoneItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ZoneItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ZoneItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    reservations<T extends ZoneItem$reservationsArgs<ExtArgs> = {}>(args?: Subset<T, ZoneItem$reservationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, "findMany"> | Null>
    zone<T extends ZoneDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ZoneDefaultArgs<ExtArgs>>): Prisma__ZoneClient<$Result.GetResult<Prisma.$ZonePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ZoneItem model
   */ 
  interface ZoneItemFieldRefs {
    readonly id: FieldRef<"ZoneItem", 'Int'>
    readonly zoneId: FieldRef<"ZoneItem", 'Int'>
    readonly floor: FieldRef<"ZoneItem", 'Int'>
    readonly label: FieldRef<"ZoneItem", 'String'>
    readonly type: FieldRef<"ZoneItem", 'ZoneItemType'>
    readonly isBooking: FieldRef<"ZoneItem", 'Boolean'>
    readonly isActive: FieldRef<"ZoneItem", 'Boolean'>
    readonly x: FieldRef<"ZoneItem", 'Float'>
    readonly y: FieldRef<"ZoneItem", 'Float'>
    readonly width: FieldRef<"ZoneItem", 'Float'>
    readonly height: FieldRef<"ZoneItem", 'Float'>
    readonly seats: FieldRef<"ZoneItem", 'Int'>
    readonly capacity: FieldRef<"ZoneItem", 'Int'>
    readonly pricePerHour: FieldRef<"ZoneItem", 'Decimal'>
    readonly pricePerSeat: FieldRef<"ZoneItem", 'Decimal'>
    readonly pricePerSlot: FieldRef<"ZoneItem", 'Decimal'>
    readonly minDuration: FieldRef<"ZoneItem", 'Int'>
    readonly maxDuration: FieldRef<"ZoneItem", 'Int'>
    readonly timeSlots: FieldRef<"ZoneItem", 'String[]'>
    readonly description: FieldRef<"ZoneItem", 'String'>
    readonly features: FieldRef<"ZoneItem", 'String[]'>
  }
    

  // Custom InputTypes
  /**
   * ZoneItem findUnique
   */
  export type ZoneItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZoneItem
     */
    select?: ZoneItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneItemInclude<ExtArgs> | null
    /**
     * Filter, which ZoneItem to fetch.
     */
    where: ZoneItemWhereUniqueInput
  }

  /**
   * ZoneItem findUniqueOrThrow
   */
  export type ZoneItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZoneItem
     */
    select?: ZoneItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneItemInclude<ExtArgs> | null
    /**
     * Filter, which ZoneItem to fetch.
     */
    where: ZoneItemWhereUniqueInput
  }

  /**
   * ZoneItem findFirst
   */
  export type ZoneItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZoneItem
     */
    select?: ZoneItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneItemInclude<ExtArgs> | null
    /**
     * Filter, which ZoneItem to fetch.
     */
    where?: ZoneItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ZoneItems to fetch.
     */
    orderBy?: ZoneItemOrderByWithRelationInput | ZoneItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ZoneItems.
     */
    cursor?: ZoneItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ZoneItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ZoneItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ZoneItems.
     */
    distinct?: ZoneItemScalarFieldEnum | ZoneItemScalarFieldEnum[]
  }

  /**
   * ZoneItem findFirstOrThrow
   */
  export type ZoneItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZoneItem
     */
    select?: ZoneItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneItemInclude<ExtArgs> | null
    /**
     * Filter, which ZoneItem to fetch.
     */
    where?: ZoneItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ZoneItems to fetch.
     */
    orderBy?: ZoneItemOrderByWithRelationInput | ZoneItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ZoneItems.
     */
    cursor?: ZoneItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ZoneItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ZoneItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ZoneItems.
     */
    distinct?: ZoneItemScalarFieldEnum | ZoneItemScalarFieldEnum[]
  }

  /**
   * ZoneItem findMany
   */
  export type ZoneItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZoneItem
     */
    select?: ZoneItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneItemInclude<ExtArgs> | null
    /**
     * Filter, which ZoneItems to fetch.
     */
    where?: ZoneItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ZoneItems to fetch.
     */
    orderBy?: ZoneItemOrderByWithRelationInput | ZoneItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ZoneItems.
     */
    cursor?: ZoneItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ZoneItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ZoneItems.
     */
    skip?: number
    distinct?: ZoneItemScalarFieldEnum | ZoneItemScalarFieldEnum[]
  }

  /**
   * ZoneItem create
   */
  export type ZoneItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZoneItem
     */
    select?: ZoneItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneItemInclude<ExtArgs> | null
    /**
     * The data needed to create a ZoneItem.
     */
    data: XOR<ZoneItemCreateInput, ZoneItemUncheckedCreateInput>
  }

  /**
   * ZoneItem createMany
   */
  export type ZoneItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ZoneItems.
     */
    data: ZoneItemCreateManyInput | ZoneItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ZoneItem createManyAndReturn
   */
  export type ZoneItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZoneItem
     */
    select?: ZoneItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ZoneItems.
     */
    data: ZoneItemCreateManyInput | ZoneItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ZoneItem update
   */
  export type ZoneItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZoneItem
     */
    select?: ZoneItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneItemInclude<ExtArgs> | null
    /**
     * The data needed to update a ZoneItem.
     */
    data: XOR<ZoneItemUpdateInput, ZoneItemUncheckedUpdateInput>
    /**
     * Choose, which ZoneItem to update.
     */
    where: ZoneItemWhereUniqueInput
  }

  /**
   * ZoneItem updateMany
   */
  export type ZoneItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ZoneItems.
     */
    data: XOR<ZoneItemUpdateManyMutationInput, ZoneItemUncheckedUpdateManyInput>
    /**
     * Filter which ZoneItems to update
     */
    where?: ZoneItemWhereInput
  }

  /**
   * ZoneItem upsert
   */
  export type ZoneItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZoneItem
     */
    select?: ZoneItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneItemInclude<ExtArgs> | null
    /**
     * The filter to search for the ZoneItem to update in case it exists.
     */
    where: ZoneItemWhereUniqueInput
    /**
     * In case the ZoneItem found by the `where` argument doesn't exist, create a new ZoneItem with this data.
     */
    create: XOR<ZoneItemCreateInput, ZoneItemUncheckedCreateInput>
    /**
     * In case the ZoneItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ZoneItemUpdateInput, ZoneItemUncheckedUpdateInput>
  }

  /**
   * ZoneItem delete
   */
  export type ZoneItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZoneItem
     */
    select?: ZoneItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneItemInclude<ExtArgs> | null
    /**
     * Filter which ZoneItem to delete.
     */
    where: ZoneItemWhereUniqueInput
  }

  /**
   * ZoneItem deleteMany
   */
  export type ZoneItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ZoneItems to delete
     */
    where?: ZoneItemWhereInput
  }

  /**
   * ZoneItem.reservations
   */
  export type ZoneItem$reservationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservationInclude<ExtArgs> | null
    where?: ReservationWhereInput
    orderBy?: ReservationOrderByWithRelationInput | ReservationOrderByWithRelationInput[]
    cursor?: ReservationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReservationScalarFieldEnum | ReservationScalarFieldEnum[]
  }

  /**
   * ZoneItem without action
   */
  export type ZoneItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZoneItem
     */
    select?: ZoneItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneItemInclude<ExtArgs> | null
  }


  /**
   * Model Reservation
   */

  export type AggregateReservation = {
    _count: ReservationCountAggregateOutputType | null
    _avg: ReservationAvgAggregateOutputType | null
    _sum: ReservationSumAggregateOutputType | null
    _min: ReservationMinAggregateOutputType | null
    _max: ReservationMaxAggregateOutputType | null
  }

  export type ReservationAvgAggregateOutputType = {
    id: number | null
    zoneItemId: number | null
    deposit: Decimal | null
    seatsCount: number | null
    guestsCount: number | null
    duration: number | null
    totalPrice: Decimal | null
  }

  export type ReservationSumAggregateOutputType = {
    id: number | null
    zoneItemId: number | null
    deposit: Decimal | null
    seatsCount: number | null
    guestsCount: number | null
    duration: number | null
    totalPrice: Decimal | null
  }

  export type ReservationMinAggregateOutputType = {
    id: number | null
    zoneItemId: number | null
    type: $Enums.ReservationType | null
    userName: string | null
    phone: string | null
    startsAt: Date | null
    endsAt: Date | null
    deposit: Decimal | null
    status: $Enums.ReservationStatus | null
    seatsCount: number | null
    guestsCount: number | null
    duration: number | null
    comment: string | null
    specialRequests: string | null
    totalPrice: Decimal | null
  }

  export type ReservationMaxAggregateOutputType = {
    id: number | null
    zoneItemId: number | null
    type: $Enums.ReservationType | null
    userName: string | null
    phone: string | null
    startsAt: Date | null
    endsAt: Date | null
    deposit: Decimal | null
    status: $Enums.ReservationStatus | null
    seatsCount: number | null
    guestsCount: number | null
    duration: number | null
    comment: string | null
    specialRequests: string | null
    totalPrice: Decimal | null
  }

  export type ReservationCountAggregateOutputType = {
    id: number
    zoneItemId: number
    type: number
    userName: number
    phone: number
    startsAt: number
    endsAt: number
    deposit: number
    status: number
    seatsCount: number
    guestsCount: number
    duration: number
    comment: number
    specialRequests: number
    totalPrice: number
    _all: number
  }


  export type ReservationAvgAggregateInputType = {
    id?: true
    zoneItemId?: true
    deposit?: true
    seatsCount?: true
    guestsCount?: true
    duration?: true
    totalPrice?: true
  }

  export type ReservationSumAggregateInputType = {
    id?: true
    zoneItemId?: true
    deposit?: true
    seatsCount?: true
    guestsCount?: true
    duration?: true
    totalPrice?: true
  }

  export type ReservationMinAggregateInputType = {
    id?: true
    zoneItemId?: true
    type?: true
    userName?: true
    phone?: true
    startsAt?: true
    endsAt?: true
    deposit?: true
    status?: true
    seatsCount?: true
    guestsCount?: true
    duration?: true
    comment?: true
    specialRequests?: true
    totalPrice?: true
  }

  export type ReservationMaxAggregateInputType = {
    id?: true
    zoneItemId?: true
    type?: true
    userName?: true
    phone?: true
    startsAt?: true
    endsAt?: true
    deposit?: true
    status?: true
    seatsCount?: true
    guestsCount?: true
    duration?: true
    comment?: true
    specialRequests?: true
    totalPrice?: true
  }

  export type ReservationCountAggregateInputType = {
    id?: true
    zoneItemId?: true
    type?: true
    userName?: true
    phone?: true
    startsAt?: true
    endsAt?: true
    deposit?: true
    status?: true
    seatsCount?: true
    guestsCount?: true
    duration?: true
    comment?: true
    specialRequests?: true
    totalPrice?: true
    _all?: true
  }

  export type ReservationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reservation to aggregate.
     */
    where?: ReservationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reservations to fetch.
     */
    orderBy?: ReservationOrderByWithRelationInput | ReservationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReservationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reservations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reservations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reservations
    **/
    _count?: true | ReservationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReservationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReservationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReservationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReservationMaxAggregateInputType
  }

  export type GetReservationAggregateType<T extends ReservationAggregateArgs> = {
        [P in keyof T & keyof AggregateReservation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReservation[P]>
      : GetScalarType<T[P], AggregateReservation[P]>
  }




  export type ReservationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReservationWhereInput
    orderBy?: ReservationOrderByWithAggregationInput | ReservationOrderByWithAggregationInput[]
    by: ReservationScalarFieldEnum[] | ReservationScalarFieldEnum
    having?: ReservationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReservationCountAggregateInputType | true
    _avg?: ReservationAvgAggregateInputType
    _sum?: ReservationSumAggregateInputType
    _min?: ReservationMinAggregateInputType
    _max?: ReservationMaxAggregateInputType
  }

  export type ReservationGroupByOutputType = {
    id: number
    zoneItemId: number
    type: $Enums.ReservationType
    userName: string
    phone: string
    startsAt: Date
    endsAt: Date
    deposit: Decimal
    status: $Enums.ReservationStatus
    seatsCount: number | null
    guestsCount: number | null
    duration: number | null
    comment: string | null
    specialRequests: string | null
    totalPrice: Decimal | null
    _count: ReservationCountAggregateOutputType | null
    _avg: ReservationAvgAggregateOutputType | null
    _sum: ReservationSumAggregateOutputType | null
    _min: ReservationMinAggregateOutputType | null
    _max: ReservationMaxAggregateOutputType | null
  }

  type GetReservationGroupByPayload<T extends ReservationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReservationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReservationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReservationGroupByOutputType[P]>
            : GetScalarType<T[P], ReservationGroupByOutputType[P]>
        }
      >
    >


  export type ReservationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    zoneItemId?: boolean
    type?: boolean
    userName?: boolean
    phone?: boolean
    startsAt?: boolean
    endsAt?: boolean
    deposit?: boolean
    status?: boolean
    seatsCount?: boolean
    guestsCount?: boolean
    duration?: boolean
    comment?: boolean
    specialRequests?: boolean
    totalPrice?: boolean
    payments?: boolean | Reservation$paymentsArgs<ExtArgs>
    zoneItem?: boolean | ZoneItemDefaultArgs<ExtArgs>
    _count?: boolean | ReservationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reservation"]>

  export type ReservationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    zoneItemId?: boolean
    type?: boolean
    userName?: boolean
    phone?: boolean
    startsAt?: boolean
    endsAt?: boolean
    deposit?: boolean
    status?: boolean
    seatsCount?: boolean
    guestsCount?: boolean
    duration?: boolean
    comment?: boolean
    specialRequests?: boolean
    totalPrice?: boolean
    zoneItem?: boolean | ZoneItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reservation"]>

  export type ReservationSelectScalar = {
    id?: boolean
    zoneItemId?: boolean
    type?: boolean
    userName?: boolean
    phone?: boolean
    startsAt?: boolean
    endsAt?: boolean
    deposit?: boolean
    status?: boolean
    seatsCount?: boolean
    guestsCount?: boolean
    duration?: boolean
    comment?: boolean
    specialRequests?: boolean
    totalPrice?: boolean
  }

  export type ReservationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payments?: boolean | Reservation$paymentsArgs<ExtArgs>
    zoneItem?: boolean | ZoneItemDefaultArgs<ExtArgs>
    _count?: boolean | ReservationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ReservationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    zoneItem?: boolean | ZoneItemDefaultArgs<ExtArgs>
  }

  export type $ReservationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Reservation"
    objects: {
      payments: Prisma.$PaymentPayload<ExtArgs>[]
      zoneItem: Prisma.$ZoneItemPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      zoneItemId: number
      type: $Enums.ReservationType
      userName: string
      phone: string
      startsAt: Date
      endsAt: Date
      deposit: Prisma.Decimal
      status: $Enums.ReservationStatus
      seatsCount: number | null
      guestsCount: number | null
      duration: number | null
      comment: string | null
      specialRequests: string | null
      totalPrice: Prisma.Decimal | null
    }, ExtArgs["result"]["reservation"]>
    composites: {}
  }

  type ReservationGetPayload<S extends boolean | null | undefined | ReservationDefaultArgs> = $Result.GetResult<Prisma.$ReservationPayload, S>

  type ReservationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ReservationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReservationCountAggregateInputType | true
    }

  export interface ReservationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Reservation'], meta: { name: 'Reservation' } }
    /**
     * Find zero or one Reservation that matches the filter.
     * @param {ReservationFindUniqueArgs} args - Arguments to find a Reservation
     * @example
     * // Get one Reservation
     * const reservation = await prisma.reservation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReservationFindUniqueArgs>(args: SelectSubset<T, ReservationFindUniqueArgs<ExtArgs>>): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Reservation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ReservationFindUniqueOrThrowArgs} args - Arguments to find a Reservation
     * @example
     * // Get one Reservation
     * const reservation = await prisma.reservation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReservationFindUniqueOrThrowArgs>(args: SelectSubset<T, ReservationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Reservation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationFindFirstArgs} args - Arguments to find a Reservation
     * @example
     * // Get one Reservation
     * const reservation = await prisma.reservation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReservationFindFirstArgs>(args?: SelectSubset<T, ReservationFindFirstArgs<ExtArgs>>): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Reservation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationFindFirstOrThrowArgs} args - Arguments to find a Reservation
     * @example
     * // Get one Reservation
     * const reservation = await prisma.reservation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReservationFindFirstOrThrowArgs>(args?: SelectSubset<T, ReservationFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Reservations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reservations
     * const reservations = await prisma.reservation.findMany()
     * 
     * // Get first 10 Reservations
     * const reservations = await prisma.reservation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reservationWithIdOnly = await prisma.reservation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReservationFindManyArgs>(args?: SelectSubset<T, ReservationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Reservation.
     * @param {ReservationCreateArgs} args - Arguments to create a Reservation.
     * @example
     * // Create one Reservation
     * const Reservation = await prisma.reservation.create({
     *   data: {
     *     // ... data to create a Reservation
     *   }
     * })
     * 
     */
    create<T extends ReservationCreateArgs>(args: SelectSubset<T, ReservationCreateArgs<ExtArgs>>): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Reservations.
     * @param {ReservationCreateManyArgs} args - Arguments to create many Reservations.
     * @example
     * // Create many Reservations
     * const reservation = await prisma.reservation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReservationCreateManyArgs>(args?: SelectSubset<T, ReservationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Reservations and returns the data saved in the database.
     * @param {ReservationCreateManyAndReturnArgs} args - Arguments to create many Reservations.
     * @example
     * // Create many Reservations
     * const reservation = await prisma.reservation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Reservations and only return the `id`
     * const reservationWithIdOnly = await prisma.reservation.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReservationCreateManyAndReturnArgs>(args?: SelectSubset<T, ReservationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Reservation.
     * @param {ReservationDeleteArgs} args - Arguments to delete one Reservation.
     * @example
     * // Delete one Reservation
     * const Reservation = await prisma.reservation.delete({
     *   where: {
     *     // ... filter to delete one Reservation
     *   }
     * })
     * 
     */
    delete<T extends ReservationDeleteArgs>(args: SelectSubset<T, ReservationDeleteArgs<ExtArgs>>): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Reservation.
     * @param {ReservationUpdateArgs} args - Arguments to update one Reservation.
     * @example
     * // Update one Reservation
     * const reservation = await prisma.reservation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReservationUpdateArgs>(args: SelectSubset<T, ReservationUpdateArgs<ExtArgs>>): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Reservations.
     * @param {ReservationDeleteManyArgs} args - Arguments to filter Reservations to delete.
     * @example
     * // Delete a few Reservations
     * const { count } = await prisma.reservation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReservationDeleteManyArgs>(args?: SelectSubset<T, ReservationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reservations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reservations
     * const reservation = await prisma.reservation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReservationUpdateManyArgs>(args: SelectSubset<T, ReservationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Reservation.
     * @param {ReservationUpsertArgs} args - Arguments to update or create a Reservation.
     * @example
     * // Update or create a Reservation
     * const reservation = await prisma.reservation.upsert({
     *   create: {
     *     // ... data to create a Reservation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reservation we want to update
     *   }
     * })
     */
    upsert<T extends ReservationUpsertArgs>(args: SelectSubset<T, ReservationUpsertArgs<ExtArgs>>): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Reservations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationCountArgs} args - Arguments to filter Reservations to count.
     * @example
     * // Count the number of Reservations
     * const count = await prisma.reservation.count({
     *   where: {
     *     // ... the filter for the Reservations we want to count
     *   }
     * })
    **/
    count<T extends ReservationCountArgs>(
      args?: Subset<T, ReservationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReservationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reservation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReservationAggregateArgs>(args: Subset<T, ReservationAggregateArgs>): Prisma.PrismaPromise<GetReservationAggregateType<T>>

    /**
     * Group by Reservation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReservationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReservationGroupByArgs['orderBy'] }
        : { orderBy?: ReservationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReservationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReservationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Reservation model
   */
  readonly fields: ReservationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Reservation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReservationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    payments<T extends Reservation$paymentsArgs<ExtArgs> = {}>(args?: Subset<T, Reservation$paymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany"> | Null>
    zoneItem<T extends ZoneItemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ZoneItemDefaultArgs<ExtArgs>>): Prisma__ZoneItemClient<$Result.GetResult<Prisma.$ZoneItemPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Reservation model
   */ 
  interface ReservationFieldRefs {
    readonly id: FieldRef<"Reservation", 'Int'>
    readonly zoneItemId: FieldRef<"Reservation", 'Int'>
    readonly type: FieldRef<"Reservation", 'ReservationType'>
    readonly userName: FieldRef<"Reservation", 'String'>
    readonly phone: FieldRef<"Reservation", 'String'>
    readonly startsAt: FieldRef<"Reservation", 'DateTime'>
    readonly endsAt: FieldRef<"Reservation", 'DateTime'>
    readonly deposit: FieldRef<"Reservation", 'Decimal'>
    readonly status: FieldRef<"Reservation", 'ReservationStatus'>
    readonly seatsCount: FieldRef<"Reservation", 'Int'>
    readonly guestsCount: FieldRef<"Reservation", 'Int'>
    readonly duration: FieldRef<"Reservation", 'Int'>
    readonly comment: FieldRef<"Reservation", 'String'>
    readonly specialRequests: FieldRef<"Reservation", 'String'>
    readonly totalPrice: FieldRef<"Reservation", 'Decimal'>
  }
    

  // Custom InputTypes
  /**
   * Reservation findUnique
   */
  export type ReservationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * Filter, which Reservation to fetch.
     */
    where: ReservationWhereUniqueInput
  }

  /**
   * Reservation findUniqueOrThrow
   */
  export type ReservationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * Filter, which Reservation to fetch.
     */
    where: ReservationWhereUniqueInput
  }

  /**
   * Reservation findFirst
   */
  export type ReservationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * Filter, which Reservation to fetch.
     */
    where?: ReservationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reservations to fetch.
     */
    orderBy?: ReservationOrderByWithRelationInput | ReservationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reservations.
     */
    cursor?: ReservationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reservations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reservations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reservations.
     */
    distinct?: ReservationScalarFieldEnum | ReservationScalarFieldEnum[]
  }

  /**
   * Reservation findFirstOrThrow
   */
  export type ReservationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * Filter, which Reservation to fetch.
     */
    where?: ReservationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reservations to fetch.
     */
    orderBy?: ReservationOrderByWithRelationInput | ReservationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reservations.
     */
    cursor?: ReservationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reservations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reservations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reservations.
     */
    distinct?: ReservationScalarFieldEnum | ReservationScalarFieldEnum[]
  }

  /**
   * Reservation findMany
   */
  export type ReservationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * Filter, which Reservations to fetch.
     */
    where?: ReservationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reservations to fetch.
     */
    orderBy?: ReservationOrderByWithRelationInput | ReservationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reservations.
     */
    cursor?: ReservationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reservations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reservations.
     */
    skip?: number
    distinct?: ReservationScalarFieldEnum | ReservationScalarFieldEnum[]
  }

  /**
   * Reservation create
   */
  export type ReservationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * The data needed to create a Reservation.
     */
    data: XOR<ReservationCreateInput, ReservationUncheckedCreateInput>
  }

  /**
   * Reservation createMany
   */
  export type ReservationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reservations.
     */
    data: ReservationCreateManyInput | ReservationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Reservation createManyAndReturn
   */
  export type ReservationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Reservations.
     */
    data: ReservationCreateManyInput | ReservationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Reservation update
   */
  export type ReservationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * The data needed to update a Reservation.
     */
    data: XOR<ReservationUpdateInput, ReservationUncheckedUpdateInput>
    /**
     * Choose, which Reservation to update.
     */
    where: ReservationWhereUniqueInput
  }

  /**
   * Reservation updateMany
   */
  export type ReservationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reservations.
     */
    data: XOR<ReservationUpdateManyMutationInput, ReservationUncheckedUpdateManyInput>
    /**
     * Filter which Reservations to update
     */
    where?: ReservationWhereInput
  }

  /**
   * Reservation upsert
   */
  export type ReservationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * The filter to search for the Reservation to update in case it exists.
     */
    where: ReservationWhereUniqueInput
    /**
     * In case the Reservation found by the `where` argument doesn't exist, create a new Reservation with this data.
     */
    create: XOR<ReservationCreateInput, ReservationUncheckedCreateInput>
    /**
     * In case the Reservation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReservationUpdateInput, ReservationUncheckedUpdateInput>
  }

  /**
   * Reservation delete
   */
  export type ReservationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * Filter which Reservation to delete.
     */
    where: ReservationWhereUniqueInput
  }

  /**
   * Reservation deleteMany
   */
  export type ReservationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reservations to delete
     */
    where?: ReservationWhereInput
  }

  /**
   * Reservation.payments
   */
  export type Reservation$paymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    cursor?: PaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Reservation without action
   */
  export type ReservationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservationInclude<ExtArgs> | null
  }


  /**
   * Model Payment
   */

  export type AggregatePayment = {
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  export type PaymentAvgAggregateOutputType = {
    id: number | null
    reservationId: number | null
    amount: Decimal | null
  }

  export type PaymentSumAggregateOutputType = {
    id: number | null
    reservationId: number | null
    amount: Decimal | null
  }

  export type PaymentMinAggregateOutputType = {
    id: number | null
    reservationId: number | null
    amount: Decimal | null
    payDate: Date | null
    refunded: boolean | null
  }

  export type PaymentMaxAggregateOutputType = {
    id: number | null
    reservationId: number | null
    amount: Decimal | null
    payDate: Date | null
    refunded: boolean | null
  }

  export type PaymentCountAggregateOutputType = {
    id: number
    reservationId: number
    amount: number
    payDate: number
    refunded: number
    _all: number
  }


  export type PaymentAvgAggregateInputType = {
    id?: true
    reservationId?: true
    amount?: true
  }

  export type PaymentSumAggregateInputType = {
    id?: true
    reservationId?: true
    amount?: true
  }

  export type PaymentMinAggregateInputType = {
    id?: true
    reservationId?: true
    amount?: true
    payDate?: true
    refunded?: true
  }

  export type PaymentMaxAggregateInputType = {
    id?: true
    reservationId?: true
    amount?: true
    payDate?: true
    refunded?: true
  }

  export type PaymentCountAggregateInputType = {
    id?: true
    reservationId?: true
    amount?: true
    payDate?: true
    refunded?: true
    _all?: true
  }

  export type PaymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payment to aggregate.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Payments
    **/
    _count?: true | PaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentMaxAggregateInputType
  }

  export type GetPaymentAggregateType<T extends PaymentAggregateArgs> = {
        [P in keyof T & keyof AggregatePayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayment[P]>
      : GetScalarType<T[P], AggregatePayment[P]>
  }




  export type PaymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithAggregationInput | PaymentOrderByWithAggregationInput[]
    by: PaymentScalarFieldEnum[] | PaymentScalarFieldEnum
    having?: PaymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentCountAggregateInputType | true
    _avg?: PaymentAvgAggregateInputType
    _sum?: PaymentSumAggregateInputType
    _min?: PaymentMinAggregateInputType
    _max?: PaymentMaxAggregateInputType
  }

  export type PaymentGroupByOutputType = {
    id: number
    reservationId: number
    amount: Decimal
    payDate: Date
    refunded: boolean
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  type GetPaymentGroupByPayload<T extends PaymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentGroupByOutputType[P]>
        }
      >
    >


  export type PaymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reservationId?: boolean
    amount?: boolean
    payDate?: boolean
    refunded?: boolean
    reservation?: boolean | ReservationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reservationId?: boolean
    amount?: boolean
    payDate?: boolean
    refunded?: boolean
    reservation?: boolean | ReservationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectScalar = {
    id?: boolean
    reservationId?: boolean
    amount?: boolean
    payDate?: boolean
    refunded?: boolean
  }

  export type PaymentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reservation?: boolean | ReservationDefaultArgs<ExtArgs>
  }
  export type PaymentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reservation?: boolean | ReservationDefaultArgs<ExtArgs>
  }

  export type $PaymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Payment"
    objects: {
      reservation: Prisma.$ReservationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      reservationId: number
      amount: Prisma.Decimal
      payDate: Date
      refunded: boolean
    }, ExtArgs["result"]["payment"]>
    composites: {}
  }

  type PaymentGetPayload<S extends boolean | null | undefined | PaymentDefaultArgs> = $Result.GetResult<Prisma.$PaymentPayload, S>

  type PaymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PaymentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PaymentCountAggregateInputType | true
    }

  export interface PaymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Payment'], meta: { name: 'Payment' } }
    /**
     * Find zero or one Payment that matches the filter.
     * @param {PaymentFindUniqueArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaymentFindUniqueArgs>(args: SelectSubset<T, PaymentFindUniqueArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Payment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PaymentFindUniqueOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaymentFindUniqueOrThrowArgs>(args: SelectSubset<T, PaymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Payment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaymentFindFirstArgs>(args?: SelectSubset<T, PaymentFindFirstArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Payment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaymentFindFirstOrThrowArgs>(args?: SelectSubset<T, PaymentFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Payments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payments
     * const payments = await prisma.payment.findMany()
     * 
     * // Get first 10 Payments
     * const payments = await prisma.payment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentWithIdOnly = await prisma.payment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PaymentFindManyArgs>(args?: SelectSubset<T, PaymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Payment.
     * @param {PaymentCreateArgs} args - Arguments to create a Payment.
     * @example
     * // Create one Payment
     * const Payment = await prisma.payment.create({
     *   data: {
     *     // ... data to create a Payment
     *   }
     * })
     * 
     */
    create<T extends PaymentCreateArgs>(args: SelectSubset<T, PaymentCreateArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Payments.
     * @param {PaymentCreateManyArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaymentCreateManyArgs>(args?: SelectSubset<T, PaymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Payments and returns the data saved in the database.
     * @param {PaymentCreateManyAndReturnArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Payments and only return the `id`
     * const paymentWithIdOnly = await prisma.payment.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PaymentCreateManyAndReturnArgs>(args?: SelectSubset<T, PaymentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Payment.
     * @param {PaymentDeleteArgs} args - Arguments to delete one Payment.
     * @example
     * // Delete one Payment
     * const Payment = await prisma.payment.delete({
     *   where: {
     *     // ... filter to delete one Payment
     *   }
     * })
     * 
     */
    delete<T extends PaymentDeleteArgs>(args: SelectSubset<T, PaymentDeleteArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Payment.
     * @param {PaymentUpdateArgs} args - Arguments to update one Payment.
     * @example
     * // Update one Payment
     * const payment = await prisma.payment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaymentUpdateArgs>(args: SelectSubset<T, PaymentUpdateArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Payments.
     * @param {PaymentDeleteManyArgs} args - Arguments to filter Payments to delete.
     * @example
     * // Delete a few Payments
     * const { count } = await prisma.payment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaymentDeleteManyArgs>(args?: SelectSubset<T, PaymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaymentUpdateManyArgs>(args: SelectSubset<T, PaymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Payment.
     * @param {PaymentUpsertArgs} args - Arguments to update or create a Payment.
     * @example
     * // Update or create a Payment
     * const payment = await prisma.payment.upsert({
     *   create: {
     *     // ... data to create a Payment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payment we want to update
     *   }
     * })
     */
    upsert<T extends PaymentUpsertArgs>(args: SelectSubset<T, PaymentUpsertArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentCountArgs} args - Arguments to filter Payments to count.
     * @example
     * // Count the number of Payments
     * const count = await prisma.payment.count({
     *   where: {
     *     // ... the filter for the Payments we want to count
     *   }
     * })
    **/
    count<T extends PaymentCountArgs>(
      args?: Subset<T, PaymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentAggregateArgs>(args: Subset<T, PaymentAggregateArgs>): Prisma.PrismaPromise<GetPaymentAggregateType<T>>

    /**
     * Group by Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentGroupByArgs['orderBy'] }
        : { orderBy?: PaymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Payment model
   */
  readonly fields: PaymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Payment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    reservation<T extends ReservationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ReservationDefaultArgs<ExtArgs>>): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Payment model
   */ 
  interface PaymentFieldRefs {
    readonly id: FieldRef<"Payment", 'Int'>
    readonly reservationId: FieldRef<"Payment", 'Int'>
    readonly amount: FieldRef<"Payment", 'Decimal'>
    readonly payDate: FieldRef<"Payment", 'DateTime'>
    readonly refunded: FieldRef<"Payment", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Payment findUnique
   */
  export type PaymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findUniqueOrThrow
   */
  export type PaymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findFirst
   */
  export type PaymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment findFirstOrThrow
   */
  export type PaymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment findMany
   */
  export type PaymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payments to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment create
   */
  export type PaymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to create a Payment.
     */
    data: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
  }

  /**
   * Payment createMany
   */
  export type PaymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Payments.
     */
    data: PaymentCreateManyInput | PaymentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Payment createManyAndReturn
   */
  export type PaymentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Payments.
     */
    data: PaymentCreateManyInput | PaymentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Payment update
   */
  export type PaymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to update a Payment.
     */
    data: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
    /**
     * Choose, which Payment to update.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment updateMany
   */
  export type PaymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Payments.
     */
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyInput>
    /**
     * Filter which Payments to update
     */
    where?: PaymentWhereInput
  }

  /**
   * Payment upsert
   */
  export type PaymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The filter to search for the Payment to update in case it exists.
     */
    where: PaymentWhereUniqueInput
    /**
     * In case the Payment found by the `where` argument doesn't exist, create a new Payment with this data.
     */
    create: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
    /**
     * In case the Payment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
  }

  /**
   * Payment delete
   */
  export type PaymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter which Payment to delete.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment deleteMany
   */
  export type PaymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payments to delete
     */
    where?: PaymentWhereInput
  }

  /**
   * Payment without action
   */
  export type PaymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
  }


  /**
   * Model MenuType
   */

  export type AggregateMenuType = {
    _count: MenuTypeCountAggregateOutputType | null
    _avg: MenuTypeAvgAggregateOutputType | null
    _sum: MenuTypeSumAggregateOutputType | null
    _min: MenuTypeMinAggregateOutputType | null
    _max: MenuTypeMaxAggregateOutputType | null
  }

  export type MenuTypeAvgAggregateOutputType = {
    id: number | null
    sortOrder: number | null
  }

  export type MenuTypeSumAggregateOutputType = {
    id: number | null
    sortOrder: number | null
  }

  export type MenuTypeMinAggregateOutputType = {
    id: number | null
    name: string | null
    slug: string | null
    description: string | null
    isActive: boolean | null
    sortOrder: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MenuTypeMaxAggregateOutputType = {
    id: number | null
    name: string | null
    slug: string | null
    description: string | null
    isActive: boolean | null
    sortOrder: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MenuTypeCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    description: number
    isActive: number
    sortOrder: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MenuTypeAvgAggregateInputType = {
    id?: true
    sortOrder?: true
  }

  export type MenuTypeSumAggregateInputType = {
    id?: true
    sortOrder?: true
  }

  export type MenuTypeMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    description?: true
    isActive?: true
    sortOrder?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MenuTypeMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    description?: true
    isActive?: true
    sortOrder?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MenuTypeCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    description?: true
    isActive?: true
    sortOrder?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MenuTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MenuType to aggregate.
     */
    where?: MenuTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MenuTypes to fetch.
     */
    orderBy?: MenuTypeOrderByWithRelationInput | MenuTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MenuTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MenuTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MenuTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MenuTypes
    **/
    _count?: true | MenuTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MenuTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MenuTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MenuTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MenuTypeMaxAggregateInputType
  }

  export type GetMenuTypeAggregateType<T extends MenuTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateMenuType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMenuType[P]>
      : GetScalarType<T[P], AggregateMenuType[P]>
  }




  export type MenuTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MenuTypeWhereInput
    orderBy?: MenuTypeOrderByWithAggregationInput | MenuTypeOrderByWithAggregationInput[]
    by: MenuTypeScalarFieldEnum[] | MenuTypeScalarFieldEnum
    having?: MenuTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MenuTypeCountAggregateInputType | true
    _avg?: MenuTypeAvgAggregateInputType
    _sum?: MenuTypeSumAggregateInputType
    _min?: MenuTypeMinAggregateInputType
    _max?: MenuTypeMaxAggregateInputType
  }

  export type MenuTypeGroupByOutputType = {
    id: number
    name: string
    slug: string
    description: string | null
    isActive: boolean
    sortOrder: number
    createdAt: Date
    updatedAt: Date
    _count: MenuTypeCountAggregateOutputType | null
    _avg: MenuTypeAvgAggregateOutputType | null
    _sum: MenuTypeSumAggregateOutputType | null
    _min: MenuTypeMinAggregateOutputType | null
    _max: MenuTypeMaxAggregateOutputType | null
  }

  type GetMenuTypeGroupByPayload<T extends MenuTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MenuTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MenuTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MenuTypeGroupByOutputType[P]>
            : GetScalarType<T[P], MenuTypeGroupByOutputType[P]>
        }
      >
    >


  export type MenuTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    description?: boolean
    isActive?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    categories?: boolean | MenuType$categoriesArgs<ExtArgs>
    _count?: boolean | MenuTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["menuType"]>

  export type MenuTypeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    description?: boolean
    isActive?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["menuType"]>

  export type MenuTypeSelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    description?: boolean
    isActive?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MenuTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categories?: boolean | MenuType$categoriesArgs<ExtArgs>
    _count?: boolean | MenuTypeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MenuTypeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $MenuTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MenuType"
    objects: {
      categories: Prisma.$MenuCategoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      slug: string
      description: string | null
      isActive: boolean
      sortOrder: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["menuType"]>
    composites: {}
  }

  type MenuTypeGetPayload<S extends boolean | null | undefined | MenuTypeDefaultArgs> = $Result.GetResult<Prisma.$MenuTypePayload, S>

  type MenuTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MenuTypeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MenuTypeCountAggregateInputType | true
    }

  export interface MenuTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MenuType'], meta: { name: 'MenuType' } }
    /**
     * Find zero or one MenuType that matches the filter.
     * @param {MenuTypeFindUniqueArgs} args - Arguments to find a MenuType
     * @example
     * // Get one MenuType
     * const menuType = await prisma.menuType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MenuTypeFindUniqueArgs>(args: SelectSubset<T, MenuTypeFindUniqueArgs<ExtArgs>>): Prisma__MenuTypeClient<$Result.GetResult<Prisma.$MenuTypePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MenuType that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MenuTypeFindUniqueOrThrowArgs} args - Arguments to find a MenuType
     * @example
     * // Get one MenuType
     * const menuType = await prisma.menuType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MenuTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, MenuTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MenuTypeClient<$Result.GetResult<Prisma.$MenuTypePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MenuType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuTypeFindFirstArgs} args - Arguments to find a MenuType
     * @example
     * // Get one MenuType
     * const menuType = await prisma.menuType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MenuTypeFindFirstArgs>(args?: SelectSubset<T, MenuTypeFindFirstArgs<ExtArgs>>): Prisma__MenuTypeClient<$Result.GetResult<Prisma.$MenuTypePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MenuType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuTypeFindFirstOrThrowArgs} args - Arguments to find a MenuType
     * @example
     * // Get one MenuType
     * const menuType = await prisma.menuType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MenuTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, MenuTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__MenuTypeClient<$Result.GetResult<Prisma.$MenuTypePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MenuTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MenuTypes
     * const menuTypes = await prisma.menuType.findMany()
     * 
     * // Get first 10 MenuTypes
     * const menuTypes = await prisma.menuType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const menuTypeWithIdOnly = await prisma.menuType.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MenuTypeFindManyArgs>(args?: SelectSubset<T, MenuTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MenuTypePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MenuType.
     * @param {MenuTypeCreateArgs} args - Arguments to create a MenuType.
     * @example
     * // Create one MenuType
     * const MenuType = await prisma.menuType.create({
     *   data: {
     *     // ... data to create a MenuType
     *   }
     * })
     * 
     */
    create<T extends MenuTypeCreateArgs>(args: SelectSubset<T, MenuTypeCreateArgs<ExtArgs>>): Prisma__MenuTypeClient<$Result.GetResult<Prisma.$MenuTypePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MenuTypes.
     * @param {MenuTypeCreateManyArgs} args - Arguments to create many MenuTypes.
     * @example
     * // Create many MenuTypes
     * const menuType = await prisma.menuType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MenuTypeCreateManyArgs>(args?: SelectSubset<T, MenuTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MenuTypes and returns the data saved in the database.
     * @param {MenuTypeCreateManyAndReturnArgs} args - Arguments to create many MenuTypes.
     * @example
     * // Create many MenuTypes
     * const menuType = await prisma.menuType.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MenuTypes and only return the `id`
     * const menuTypeWithIdOnly = await prisma.menuType.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MenuTypeCreateManyAndReturnArgs>(args?: SelectSubset<T, MenuTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MenuTypePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a MenuType.
     * @param {MenuTypeDeleteArgs} args - Arguments to delete one MenuType.
     * @example
     * // Delete one MenuType
     * const MenuType = await prisma.menuType.delete({
     *   where: {
     *     // ... filter to delete one MenuType
     *   }
     * })
     * 
     */
    delete<T extends MenuTypeDeleteArgs>(args: SelectSubset<T, MenuTypeDeleteArgs<ExtArgs>>): Prisma__MenuTypeClient<$Result.GetResult<Prisma.$MenuTypePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MenuType.
     * @param {MenuTypeUpdateArgs} args - Arguments to update one MenuType.
     * @example
     * // Update one MenuType
     * const menuType = await prisma.menuType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MenuTypeUpdateArgs>(args: SelectSubset<T, MenuTypeUpdateArgs<ExtArgs>>): Prisma__MenuTypeClient<$Result.GetResult<Prisma.$MenuTypePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MenuTypes.
     * @param {MenuTypeDeleteManyArgs} args - Arguments to filter MenuTypes to delete.
     * @example
     * // Delete a few MenuTypes
     * const { count } = await prisma.menuType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MenuTypeDeleteManyArgs>(args?: SelectSubset<T, MenuTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MenuTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MenuTypes
     * const menuType = await prisma.menuType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MenuTypeUpdateManyArgs>(args: SelectSubset<T, MenuTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MenuType.
     * @param {MenuTypeUpsertArgs} args - Arguments to update or create a MenuType.
     * @example
     * // Update or create a MenuType
     * const menuType = await prisma.menuType.upsert({
     *   create: {
     *     // ... data to create a MenuType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MenuType we want to update
     *   }
     * })
     */
    upsert<T extends MenuTypeUpsertArgs>(args: SelectSubset<T, MenuTypeUpsertArgs<ExtArgs>>): Prisma__MenuTypeClient<$Result.GetResult<Prisma.$MenuTypePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of MenuTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuTypeCountArgs} args - Arguments to filter MenuTypes to count.
     * @example
     * // Count the number of MenuTypes
     * const count = await prisma.menuType.count({
     *   where: {
     *     // ... the filter for the MenuTypes we want to count
     *   }
     * })
    **/
    count<T extends MenuTypeCountArgs>(
      args?: Subset<T, MenuTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MenuTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MenuType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MenuTypeAggregateArgs>(args: Subset<T, MenuTypeAggregateArgs>): Prisma.PrismaPromise<GetMenuTypeAggregateType<T>>

    /**
     * Group by MenuType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MenuTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MenuTypeGroupByArgs['orderBy'] }
        : { orderBy?: MenuTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MenuTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMenuTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MenuType model
   */
  readonly fields: MenuTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MenuType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MenuTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    categories<T extends MenuType$categoriesArgs<ExtArgs> = {}>(args?: Subset<T, MenuType$categoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MenuCategoryPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MenuType model
   */ 
  interface MenuTypeFieldRefs {
    readonly id: FieldRef<"MenuType", 'Int'>
    readonly name: FieldRef<"MenuType", 'String'>
    readonly slug: FieldRef<"MenuType", 'String'>
    readonly description: FieldRef<"MenuType", 'String'>
    readonly isActive: FieldRef<"MenuType", 'Boolean'>
    readonly sortOrder: FieldRef<"MenuType", 'Int'>
    readonly createdAt: FieldRef<"MenuType", 'DateTime'>
    readonly updatedAt: FieldRef<"MenuType", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MenuType findUnique
   */
  export type MenuTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuType
     */
    select?: MenuTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuTypeInclude<ExtArgs> | null
    /**
     * Filter, which MenuType to fetch.
     */
    where: MenuTypeWhereUniqueInput
  }

  /**
   * MenuType findUniqueOrThrow
   */
  export type MenuTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuType
     */
    select?: MenuTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuTypeInclude<ExtArgs> | null
    /**
     * Filter, which MenuType to fetch.
     */
    where: MenuTypeWhereUniqueInput
  }

  /**
   * MenuType findFirst
   */
  export type MenuTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuType
     */
    select?: MenuTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuTypeInclude<ExtArgs> | null
    /**
     * Filter, which MenuType to fetch.
     */
    where?: MenuTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MenuTypes to fetch.
     */
    orderBy?: MenuTypeOrderByWithRelationInput | MenuTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MenuTypes.
     */
    cursor?: MenuTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MenuTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MenuTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MenuTypes.
     */
    distinct?: MenuTypeScalarFieldEnum | MenuTypeScalarFieldEnum[]
  }

  /**
   * MenuType findFirstOrThrow
   */
  export type MenuTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuType
     */
    select?: MenuTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuTypeInclude<ExtArgs> | null
    /**
     * Filter, which MenuType to fetch.
     */
    where?: MenuTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MenuTypes to fetch.
     */
    orderBy?: MenuTypeOrderByWithRelationInput | MenuTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MenuTypes.
     */
    cursor?: MenuTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MenuTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MenuTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MenuTypes.
     */
    distinct?: MenuTypeScalarFieldEnum | MenuTypeScalarFieldEnum[]
  }

  /**
   * MenuType findMany
   */
  export type MenuTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuType
     */
    select?: MenuTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuTypeInclude<ExtArgs> | null
    /**
     * Filter, which MenuTypes to fetch.
     */
    where?: MenuTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MenuTypes to fetch.
     */
    orderBy?: MenuTypeOrderByWithRelationInput | MenuTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MenuTypes.
     */
    cursor?: MenuTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MenuTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MenuTypes.
     */
    skip?: number
    distinct?: MenuTypeScalarFieldEnum | MenuTypeScalarFieldEnum[]
  }

  /**
   * MenuType create
   */
  export type MenuTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuType
     */
    select?: MenuTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a MenuType.
     */
    data: XOR<MenuTypeCreateInput, MenuTypeUncheckedCreateInput>
  }

  /**
   * MenuType createMany
   */
  export type MenuTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MenuTypes.
     */
    data: MenuTypeCreateManyInput | MenuTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MenuType createManyAndReturn
   */
  export type MenuTypeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuType
     */
    select?: MenuTypeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many MenuTypes.
     */
    data: MenuTypeCreateManyInput | MenuTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MenuType update
   */
  export type MenuTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuType
     */
    select?: MenuTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a MenuType.
     */
    data: XOR<MenuTypeUpdateInput, MenuTypeUncheckedUpdateInput>
    /**
     * Choose, which MenuType to update.
     */
    where: MenuTypeWhereUniqueInput
  }

  /**
   * MenuType updateMany
   */
  export type MenuTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MenuTypes.
     */
    data: XOR<MenuTypeUpdateManyMutationInput, MenuTypeUncheckedUpdateManyInput>
    /**
     * Filter which MenuTypes to update
     */
    where?: MenuTypeWhereInput
  }

  /**
   * MenuType upsert
   */
  export type MenuTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuType
     */
    select?: MenuTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the MenuType to update in case it exists.
     */
    where: MenuTypeWhereUniqueInput
    /**
     * In case the MenuType found by the `where` argument doesn't exist, create a new MenuType with this data.
     */
    create: XOR<MenuTypeCreateInput, MenuTypeUncheckedCreateInput>
    /**
     * In case the MenuType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MenuTypeUpdateInput, MenuTypeUncheckedUpdateInput>
  }

  /**
   * MenuType delete
   */
  export type MenuTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuType
     */
    select?: MenuTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuTypeInclude<ExtArgs> | null
    /**
     * Filter which MenuType to delete.
     */
    where: MenuTypeWhereUniqueInput
  }

  /**
   * MenuType deleteMany
   */
  export type MenuTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MenuTypes to delete
     */
    where?: MenuTypeWhereInput
  }

  /**
   * MenuType.categories
   */
  export type MenuType$categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuCategory
     */
    select?: MenuCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuCategoryInclude<ExtArgs> | null
    where?: MenuCategoryWhereInput
    orderBy?: MenuCategoryOrderByWithRelationInput | MenuCategoryOrderByWithRelationInput[]
    cursor?: MenuCategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MenuCategoryScalarFieldEnum | MenuCategoryScalarFieldEnum[]
  }

  /**
   * MenuType without action
   */
  export type MenuTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuType
     */
    select?: MenuTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuTypeInclude<ExtArgs> | null
  }


  /**
   * Model MenuCategory
   */

  export type AggregateMenuCategory = {
    _count: MenuCategoryCountAggregateOutputType | null
    _avg: MenuCategoryAvgAggregateOutputType | null
    _sum: MenuCategorySumAggregateOutputType | null
    _min: MenuCategoryMinAggregateOutputType | null
    _max: MenuCategoryMaxAggregateOutputType | null
  }

  export type MenuCategoryAvgAggregateOutputType = {
    id: number | null
    menuTypeId: number | null
    sortOrder: number | null
  }

  export type MenuCategorySumAggregateOutputType = {
    id: number | null
    menuTypeId: number | null
    sortOrder: number | null
  }

  export type MenuCategoryMinAggregateOutputType = {
    id: number | null
    menuTypeId: number | null
    name: string | null
    slug: string | null
    description: string | null
    isActive: boolean | null
    sortOrder: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MenuCategoryMaxAggregateOutputType = {
    id: number | null
    menuTypeId: number | null
    name: string | null
    slug: string | null
    description: string | null
    isActive: boolean | null
    sortOrder: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MenuCategoryCountAggregateOutputType = {
    id: number
    menuTypeId: number
    name: number
    slug: number
    description: number
    isActive: number
    sortOrder: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MenuCategoryAvgAggregateInputType = {
    id?: true
    menuTypeId?: true
    sortOrder?: true
  }

  export type MenuCategorySumAggregateInputType = {
    id?: true
    menuTypeId?: true
    sortOrder?: true
  }

  export type MenuCategoryMinAggregateInputType = {
    id?: true
    menuTypeId?: true
    name?: true
    slug?: true
    description?: true
    isActive?: true
    sortOrder?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MenuCategoryMaxAggregateInputType = {
    id?: true
    menuTypeId?: true
    name?: true
    slug?: true
    description?: true
    isActive?: true
    sortOrder?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MenuCategoryCountAggregateInputType = {
    id?: true
    menuTypeId?: true
    name?: true
    slug?: true
    description?: true
    isActive?: true
    sortOrder?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MenuCategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MenuCategory to aggregate.
     */
    where?: MenuCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MenuCategories to fetch.
     */
    orderBy?: MenuCategoryOrderByWithRelationInput | MenuCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MenuCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MenuCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MenuCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MenuCategories
    **/
    _count?: true | MenuCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MenuCategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MenuCategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MenuCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MenuCategoryMaxAggregateInputType
  }

  export type GetMenuCategoryAggregateType<T extends MenuCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateMenuCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMenuCategory[P]>
      : GetScalarType<T[P], AggregateMenuCategory[P]>
  }




  export type MenuCategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MenuCategoryWhereInput
    orderBy?: MenuCategoryOrderByWithAggregationInput | MenuCategoryOrderByWithAggregationInput[]
    by: MenuCategoryScalarFieldEnum[] | MenuCategoryScalarFieldEnum
    having?: MenuCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MenuCategoryCountAggregateInputType | true
    _avg?: MenuCategoryAvgAggregateInputType
    _sum?: MenuCategorySumAggregateInputType
    _min?: MenuCategoryMinAggregateInputType
    _max?: MenuCategoryMaxAggregateInputType
  }

  export type MenuCategoryGroupByOutputType = {
    id: number
    menuTypeId: number
    name: string
    slug: string
    description: string | null
    isActive: boolean
    sortOrder: number
    createdAt: Date
    updatedAt: Date
    _count: MenuCategoryCountAggregateOutputType | null
    _avg: MenuCategoryAvgAggregateOutputType | null
    _sum: MenuCategorySumAggregateOutputType | null
    _min: MenuCategoryMinAggregateOutputType | null
    _max: MenuCategoryMaxAggregateOutputType | null
  }

  type GetMenuCategoryGroupByPayload<T extends MenuCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MenuCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MenuCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MenuCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], MenuCategoryGroupByOutputType[P]>
        }
      >
    >


  export type MenuCategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    menuTypeId?: boolean
    name?: boolean
    slug?: boolean
    description?: boolean
    isActive?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    menuType?: boolean | MenuTypeDefaultArgs<ExtArgs>
    items?: boolean | MenuCategory$itemsArgs<ExtArgs>
    _count?: boolean | MenuCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["menuCategory"]>

  export type MenuCategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    menuTypeId?: boolean
    name?: boolean
    slug?: boolean
    description?: boolean
    isActive?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    menuType?: boolean | MenuTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["menuCategory"]>

  export type MenuCategorySelectScalar = {
    id?: boolean
    menuTypeId?: boolean
    name?: boolean
    slug?: boolean
    description?: boolean
    isActive?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MenuCategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    menuType?: boolean | MenuTypeDefaultArgs<ExtArgs>
    items?: boolean | MenuCategory$itemsArgs<ExtArgs>
    _count?: boolean | MenuCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MenuCategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    menuType?: boolean | MenuTypeDefaultArgs<ExtArgs>
  }

  export type $MenuCategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MenuCategory"
    objects: {
      menuType: Prisma.$MenuTypePayload<ExtArgs>
      items: Prisma.$MenuItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      menuTypeId: number
      name: string
      slug: string
      description: string | null
      isActive: boolean
      sortOrder: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["menuCategory"]>
    composites: {}
  }

  type MenuCategoryGetPayload<S extends boolean | null | undefined | MenuCategoryDefaultArgs> = $Result.GetResult<Prisma.$MenuCategoryPayload, S>

  type MenuCategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MenuCategoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MenuCategoryCountAggregateInputType | true
    }

  export interface MenuCategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MenuCategory'], meta: { name: 'MenuCategory' } }
    /**
     * Find zero or one MenuCategory that matches the filter.
     * @param {MenuCategoryFindUniqueArgs} args - Arguments to find a MenuCategory
     * @example
     * // Get one MenuCategory
     * const menuCategory = await prisma.menuCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MenuCategoryFindUniqueArgs>(args: SelectSubset<T, MenuCategoryFindUniqueArgs<ExtArgs>>): Prisma__MenuCategoryClient<$Result.GetResult<Prisma.$MenuCategoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MenuCategory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MenuCategoryFindUniqueOrThrowArgs} args - Arguments to find a MenuCategory
     * @example
     * // Get one MenuCategory
     * const menuCategory = await prisma.menuCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MenuCategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, MenuCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MenuCategoryClient<$Result.GetResult<Prisma.$MenuCategoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MenuCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuCategoryFindFirstArgs} args - Arguments to find a MenuCategory
     * @example
     * // Get one MenuCategory
     * const menuCategory = await prisma.menuCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MenuCategoryFindFirstArgs>(args?: SelectSubset<T, MenuCategoryFindFirstArgs<ExtArgs>>): Prisma__MenuCategoryClient<$Result.GetResult<Prisma.$MenuCategoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MenuCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuCategoryFindFirstOrThrowArgs} args - Arguments to find a MenuCategory
     * @example
     * // Get one MenuCategory
     * const menuCategory = await prisma.menuCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MenuCategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, MenuCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__MenuCategoryClient<$Result.GetResult<Prisma.$MenuCategoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MenuCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MenuCategories
     * const menuCategories = await prisma.menuCategory.findMany()
     * 
     * // Get first 10 MenuCategories
     * const menuCategories = await prisma.menuCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const menuCategoryWithIdOnly = await prisma.menuCategory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MenuCategoryFindManyArgs>(args?: SelectSubset<T, MenuCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MenuCategoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MenuCategory.
     * @param {MenuCategoryCreateArgs} args - Arguments to create a MenuCategory.
     * @example
     * // Create one MenuCategory
     * const MenuCategory = await prisma.menuCategory.create({
     *   data: {
     *     // ... data to create a MenuCategory
     *   }
     * })
     * 
     */
    create<T extends MenuCategoryCreateArgs>(args: SelectSubset<T, MenuCategoryCreateArgs<ExtArgs>>): Prisma__MenuCategoryClient<$Result.GetResult<Prisma.$MenuCategoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MenuCategories.
     * @param {MenuCategoryCreateManyArgs} args - Arguments to create many MenuCategories.
     * @example
     * // Create many MenuCategories
     * const menuCategory = await prisma.menuCategory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MenuCategoryCreateManyArgs>(args?: SelectSubset<T, MenuCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MenuCategories and returns the data saved in the database.
     * @param {MenuCategoryCreateManyAndReturnArgs} args - Arguments to create many MenuCategories.
     * @example
     * // Create many MenuCategories
     * const menuCategory = await prisma.menuCategory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MenuCategories and only return the `id`
     * const menuCategoryWithIdOnly = await prisma.menuCategory.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MenuCategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, MenuCategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MenuCategoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a MenuCategory.
     * @param {MenuCategoryDeleteArgs} args - Arguments to delete one MenuCategory.
     * @example
     * // Delete one MenuCategory
     * const MenuCategory = await prisma.menuCategory.delete({
     *   where: {
     *     // ... filter to delete one MenuCategory
     *   }
     * })
     * 
     */
    delete<T extends MenuCategoryDeleteArgs>(args: SelectSubset<T, MenuCategoryDeleteArgs<ExtArgs>>): Prisma__MenuCategoryClient<$Result.GetResult<Prisma.$MenuCategoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MenuCategory.
     * @param {MenuCategoryUpdateArgs} args - Arguments to update one MenuCategory.
     * @example
     * // Update one MenuCategory
     * const menuCategory = await prisma.menuCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MenuCategoryUpdateArgs>(args: SelectSubset<T, MenuCategoryUpdateArgs<ExtArgs>>): Prisma__MenuCategoryClient<$Result.GetResult<Prisma.$MenuCategoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MenuCategories.
     * @param {MenuCategoryDeleteManyArgs} args - Arguments to filter MenuCategories to delete.
     * @example
     * // Delete a few MenuCategories
     * const { count } = await prisma.menuCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MenuCategoryDeleteManyArgs>(args?: SelectSubset<T, MenuCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MenuCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MenuCategories
     * const menuCategory = await prisma.menuCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MenuCategoryUpdateManyArgs>(args: SelectSubset<T, MenuCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MenuCategory.
     * @param {MenuCategoryUpsertArgs} args - Arguments to update or create a MenuCategory.
     * @example
     * // Update or create a MenuCategory
     * const menuCategory = await prisma.menuCategory.upsert({
     *   create: {
     *     // ... data to create a MenuCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MenuCategory we want to update
     *   }
     * })
     */
    upsert<T extends MenuCategoryUpsertArgs>(args: SelectSubset<T, MenuCategoryUpsertArgs<ExtArgs>>): Prisma__MenuCategoryClient<$Result.GetResult<Prisma.$MenuCategoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of MenuCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuCategoryCountArgs} args - Arguments to filter MenuCategories to count.
     * @example
     * // Count the number of MenuCategories
     * const count = await prisma.menuCategory.count({
     *   where: {
     *     // ... the filter for the MenuCategories we want to count
     *   }
     * })
    **/
    count<T extends MenuCategoryCountArgs>(
      args?: Subset<T, MenuCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MenuCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MenuCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MenuCategoryAggregateArgs>(args: Subset<T, MenuCategoryAggregateArgs>): Prisma.PrismaPromise<GetMenuCategoryAggregateType<T>>

    /**
     * Group by MenuCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MenuCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MenuCategoryGroupByArgs['orderBy'] }
        : { orderBy?: MenuCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MenuCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMenuCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MenuCategory model
   */
  readonly fields: MenuCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MenuCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MenuCategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    menuType<T extends MenuTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MenuTypeDefaultArgs<ExtArgs>>): Prisma__MenuTypeClient<$Result.GetResult<Prisma.$MenuTypePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    items<T extends MenuCategory$itemsArgs<ExtArgs> = {}>(args?: Subset<T, MenuCategory$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MenuItemPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MenuCategory model
   */ 
  interface MenuCategoryFieldRefs {
    readonly id: FieldRef<"MenuCategory", 'Int'>
    readonly menuTypeId: FieldRef<"MenuCategory", 'Int'>
    readonly name: FieldRef<"MenuCategory", 'String'>
    readonly slug: FieldRef<"MenuCategory", 'String'>
    readonly description: FieldRef<"MenuCategory", 'String'>
    readonly isActive: FieldRef<"MenuCategory", 'Boolean'>
    readonly sortOrder: FieldRef<"MenuCategory", 'Int'>
    readonly createdAt: FieldRef<"MenuCategory", 'DateTime'>
    readonly updatedAt: FieldRef<"MenuCategory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MenuCategory findUnique
   */
  export type MenuCategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuCategory
     */
    select?: MenuCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuCategoryInclude<ExtArgs> | null
    /**
     * Filter, which MenuCategory to fetch.
     */
    where: MenuCategoryWhereUniqueInput
  }

  /**
   * MenuCategory findUniqueOrThrow
   */
  export type MenuCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuCategory
     */
    select?: MenuCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuCategoryInclude<ExtArgs> | null
    /**
     * Filter, which MenuCategory to fetch.
     */
    where: MenuCategoryWhereUniqueInput
  }

  /**
   * MenuCategory findFirst
   */
  export type MenuCategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuCategory
     */
    select?: MenuCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuCategoryInclude<ExtArgs> | null
    /**
     * Filter, which MenuCategory to fetch.
     */
    where?: MenuCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MenuCategories to fetch.
     */
    orderBy?: MenuCategoryOrderByWithRelationInput | MenuCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MenuCategories.
     */
    cursor?: MenuCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MenuCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MenuCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MenuCategories.
     */
    distinct?: MenuCategoryScalarFieldEnum | MenuCategoryScalarFieldEnum[]
  }

  /**
   * MenuCategory findFirstOrThrow
   */
  export type MenuCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuCategory
     */
    select?: MenuCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuCategoryInclude<ExtArgs> | null
    /**
     * Filter, which MenuCategory to fetch.
     */
    where?: MenuCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MenuCategories to fetch.
     */
    orderBy?: MenuCategoryOrderByWithRelationInput | MenuCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MenuCategories.
     */
    cursor?: MenuCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MenuCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MenuCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MenuCategories.
     */
    distinct?: MenuCategoryScalarFieldEnum | MenuCategoryScalarFieldEnum[]
  }

  /**
   * MenuCategory findMany
   */
  export type MenuCategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuCategory
     */
    select?: MenuCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuCategoryInclude<ExtArgs> | null
    /**
     * Filter, which MenuCategories to fetch.
     */
    where?: MenuCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MenuCategories to fetch.
     */
    orderBy?: MenuCategoryOrderByWithRelationInput | MenuCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MenuCategories.
     */
    cursor?: MenuCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MenuCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MenuCategories.
     */
    skip?: number
    distinct?: MenuCategoryScalarFieldEnum | MenuCategoryScalarFieldEnum[]
  }

  /**
   * MenuCategory create
   */
  export type MenuCategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuCategory
     */
    select?: MenuCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a MenuCategory.
     */
    data: XOR<MenuCategoryCreateInput, MenuCategoryUncheckedCreateInput>
  }

  /**
   * MenuCategory createMany
   */
  export type MenuCategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MenuCategories.
     */
    data: MenuCategoryCreateManyInput | MenuCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MenuCategory createManyAndReturn
   */
  export type MenuCategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuCategory
     */
    select?: MenuCategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many MenuCategories.
     */
    data: MenuCategoryCreateManyInput | MenuCategoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuCategoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MenuCategory update
   */
  export type MenuCategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuCategory
     */
    select?: MenuCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a MenuCategory.
     */
    data: XOR<MenuCategoryUpdateInput, MenuCategoryUncheckedUpdateInput>
    /**
     * Choose, which MenuCategory to update.
     */
    where: MenuCategoryWhereUniqueInput
  }

  /**
   * MenuCategory updateMany
   */
  export type MenuCategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MenuCategories.
     */
    data: XOR<MenuCategoryUpdateManyMutationInput, MenuCategoryUncheckedUpdateManyInput>
    /**
     * Filter which MenuCategories to update
     */
    where?: MenuCategoryWhereInput
  }

  /**
   * MenuCategory upsert
   */
  export type MenuCategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuCategory
     */
    select?: MenuCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the MenuCategory to update in case it exists.
     */
    where: MenuCategoryWhereUniqueInput
    /**
     * In case the MenuCategory found by the `where` argument doesn't exist, create a new MenuCategory with this data.
     */
    create: XOR<MenuCategoryCreateInput, MenuCategoryUncheckedCreateInput>
    /**
     * In case the MenuCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MenuCategoryUpdateInput, MenuCategoryUncheckedUpdateInput>
  }

  /**
   * MenuCategory delete
   */
  export type MenuCategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuCategory
     */
    select?: MenuCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuCategoryInclude<ExtArgs> | null
    /**
     * Filter which MenuCategory to delete.
     */
    where: MenuCategoryWhereUniqueInput
  }

  /**
   * MenuCategory deleteMany
   */
  export type MenuCategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MenuCategories to delete
     */
    where?: MenuCategoryWhereInput
  }

  /**
   * MenuCategory.items
   */
  export type MenuCategory$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuItem
     */
    select?: MenuItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuItemInclude<ExtArgs> | null
    where?: MenuItemWhereInput
    orderBy?: MenuItemOrderByWithRelationInput | MenuItemOrderByWithRelationInput[]
    cursor?: MenuItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MenuItemScalarFieldEnum | MenuItemScalarFieldEnum[]
  }

  /**
   * MenuCategory without action
   */
  export type MenuCategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuCategory
     */
    select?: MenuCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuCategoryInclude<ExtArgs> | null
  }


  /**
   * Model MenuItem
   */

  export type AggregateMenuItem = {
    _count: MenuItemCountAggregateOutputType | null
    _avg: MenuItemAvgAggregateOutputType | null
    _sum: MenuItemSumAggregateOutputType | null
    _min: MenuItemMinAggregateOutputType | null
    _max: MenuItemMaxAggregateOutputType | null
  }

  export type MenuItemAvgAggregateOutputType = {
    id: number | null
    categoryId: number | null
    price: Decimal | null
    sortOrder: number | null
  }

  export type MenuItemSumAggregateOutputType = {
    id: number | null
    categoryId: number | null
    price: Decimal | null
    sortOrder: number | null
  }

  export type MenuItemMinAggregateOutputType = {
    id: number | null
    categoryId: number | null
    name: string | null
    description: string | null
    price: Decimal | null
    imageUrl: string | null
    isActive: boolean | null
    sortOrder: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MenuItemMaxAggregateOutputType = {
    id: number | null
    categoryId: number | null
    name: string | null
    description: string | null
    price: Decimal | null
    imageUrl: string | null
    isActive: boolean | null
    sortOrder: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MenuItemCountAggregateOutputType = {
    id: number
    categoryId: number
    name: number
    description: number
    price: number
    imageUrl: number
    isActive: number
    sortOrder: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MenuItemAvgAggregateInputType = {
    id?: true
    categoryId?: true
    price?: true
    sortOrder?: true
  }

  export type MenuItemSumAggregateInputType = {
    id?: true
    categoryId?: true
    price?: true
    sortOrder?: true
  }

  export type MenuItemMinAggregateInputType = {
    id?: true
    categoryId?: true
    name?: true
    description?: true
    price?: true
    imageUrl?: true
    isActive?: true
    sortOrder?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MenuItemMaxAggregateInputType = {
    id?: true
    categoryId?: true
    name?: true
    description?: true
    price?: true
    imageUrl?: true
    isActive?: true
    sortOrder?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MenuItemCountAggregateInputType = {
    id?: true
    categoryId?: true
    name?: true
    description?: true
    price?: true
    imageUrl?: true
    isActive?: true
    sortOrder?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MenuItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MenuItem to aggregate.
     */
    where?: MenuItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MenuItems to fetch.
     */
    orderBy?: MenuItemOrderByWithRelationInput | MenuItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MenuItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MenuItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MenuItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MenuItems
    **/
    _count?: true | MenuItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MenuItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MenuItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MenuItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MenuItemMaxAggregateInputType
  }

  export type GetMenuItemAggregateType<T extends MenuItemAggregateArgs> = {
        [P in keyof T & keyof AggregateMenuItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMenuItem[P]>
      : GetScalarType<T[P], AggregateMenuItem[P]>
  }




  export type MenuItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MenuItemWhereInput
    orderBy?: MenuItemOrderByWithAggregationInput | MenuItemOrderByWithAggregationInput[]
    by: MenuItemScalarFieldEnum[] | MenuItemScalarFieldEnum
    having?: MenuItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MenuItemCountAggregateInputType | true
    _avg?: MenuItemAvgAggregateInputType
    _sum?: MenuItemSumAggregateInputType
    _min?: MenuItemMinAggregateInputType
    _max?: MenuItemMaxAggregateInputType
  }

  export type MenuItemGroupByOutputType = {
    id: number
    categoryId: number
    name: string
    description: string | null
    price: Decimal
    imageUrl: string | null
    isActive: boolean
    sortOrder: number
    createdAt: Date
    updatedAt: Date
    _count: MenuItemCountAggregateOutputType | null
    _avg: MenuItemAvgAggregateOutputType | null
    _sum: MenuItemSumAggregateOutputType | null
    _min: MenuItemMinAggregateOutputType | null
    _max: MenuItemMaxAggregateOutputType | null
  }

  type GetMenuItemGroupByPayload<T extends MenuItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MenuItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MenuItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MenuItemGroupByOutputType[P]>
            : GetScalarType<T[P], MenuItemGroupByOutputType[P]>
        }
      >
    >


  export type MenuItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    categoryId?: boolean
    name?: boolean
    description?: boolean
    price?: boolean
    imageUrl?: boolean
    isActive?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    category?: boolean | MenuCategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["menuItem"]>

  export type MenuItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    categoryId?: boolean
    name?: boolean
    description?: boolean
    price?: boolean
    imageUrl?: boolean
    isActive?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    category?: boolean | MenuCategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["menuItem"]>

  export type MenuItemSelectScalar = {
    id?: boolean
    categoryId?: boolean
    name?: boolean
    description?: boolean
    price?: boolean
    imageUrl?: boolean
    isActive?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MenuItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | MenuCategoryDefaultArgs<ExtArgs>
  }
  export type MenuItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | MenuCategoryDefaultArgs<ExtArgs>
  }

  export type $MenuItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MenuItem"
    objects: {
      category: Prisma.$MenuCategoryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      categoryId: number
      name: string
      description: string | null
      price: Prisma.Decimal
      imageUrl: string | null
      isActive: boolean
      sortOrder: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["menuItem"]>
    composites: {}
  }

  type MenuItemGetPayload<S extends boolean | null | undefined | MenuItemDefaultArgs> = $Result.GetResult<Prisma.$MenuItemPayload, S>

  type MenuItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MenuItemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MenuItemCountAggregateInputType | true
    }

  export interface MenuItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MenuItem'], meta: { name: 'MenuItem' } }
    /**
     * Find zero or one MenuItem that matches the filter.
     * @param {MenuItemFindUniqueArgs} args - Arguments to find a MenuItem
     * @example
     * // Get one MenuItem
     * const menuItem = await prisma.menuItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MenuItemFindUniqueArgs>(args: SelectSubset<T, MenuItemFindUniqueArgs<ExtArgs>>): Prisma__MenuItemClient<$Result.GetResult<Prisma.$MenuItemPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MenuItem that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MenuItemFindUniqueOrThrowArgs} args - Arguments to find a MenuItem
     * @example
     * // Get one MenuItem
     * const menuItem = await prisma.menuItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MenuItemFindUniqueOrThrowArgs>(args: SelectSubset<T, MenuItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MenuItemClient<$Result.GetResult<Prisma.$MenuItemPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MenuItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuItemFindFirstArgs} args - Arguments to find a MenuItem
     * @example
     * // Get one MenuItem
     * const menuItem = await prisma.menuItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MenuItemFindFirstArgs>(args?: SelectSubset<T, MenuItemFindFirstArgs<ExtArgs>>): Prisma__MenuItemClient<$Result.GetResult<Prisma.$MenuItemPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MenuItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuItemFindFirstOrThrowArgs} args - Arguments to find a MenuItem
     * @example
     * // Get one MenuItem
     * const menuItem = await prisma.menuItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MenuItemFindFirstOrThrowArgs>(args?: SelectSubset<T, MenuItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__MenuItemClient<$Result.GetResult<Prisma.$MenuItemPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MenuItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MenuItems
     * const menuItems = await prisma.menuItem.findMany()
     * 
     * // Get first 10 MenuItems
     * const menuItems = await prisma.menuItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const menuItemWithIdOnly = await prisma.menuItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MenuItemFindManyArgs>(args?: SelectSubset<T, MenuItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MenuItemPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MenuItem.
     * @param {MenuItemCreateArgs} args - Arguments to create a MenuItem.
     * @example
     * // Create one MenuItem
     * const MenuItem = await prisma.menuItem.create({
     *   data: {
     *     // ... data to create a MenuItem
     *   }
     * })
     * 
     */
    create<T extends MenuItemCreateArgs>(args: SelectSubset<T, MenuItemCreateArgs<ExtArgs>>): Prisma__MenuItemClient<$Result.GetResult<Prisma.$MenuItemPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MenuItems.
     * @param {MenuItemCreateManyArgs} args - Arguments to create many MenuItems.
     * @example
     * // Create many MenuItems
     * const menuItem = await prisma.menuItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MenuItemCreateManyArgs>(args?: SelectSubset<T, MenuItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MenuItems and returns the data saved in the database.
     * @param {MenuItemCreateManyAndReturnArgs} args - Arguments to create many MenuItems.
     * @example
     * // Create many MenuItems
     * const menuItem = await prisma.menuItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MenuItems and only return the `id`
     * const menuItemWithIdOnly = await prisma.menuItem.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MenuItemCreateManyAndReturnArgs>(args?: SelectSubset<T, MenuItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MenuItemPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a MenuItem.
     * @param {MenuItemDeleteArgs} args - Arguments to delete one MenuItem.
     * @example
     * // Delete one MenuItem
     * const MenuItem = await prisma.menuItem.delete({
     *   where: {
     *     // ... filter to delete one MenuItem
     *   }
     * })
     * 
     */
    delete<T extends MenuItemDeleteArgs>(args: SelectSubset<T, MenuItemDeleteArgs<ExtArgs>>): Prisma__MenuItemClient<$Result.GetResult<Prisma.$MenuItemPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MenuItem.
     * @param {MenuItemUpdateArgs} args - Arguments to update one MenuItem.
     * @example
     * // Update one MenuItem
     * const menuItem = await prisma.menuItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MenuItemUpdateArgs>(args: SelectSubset<T, MenuItemUpdateArgs<ExtArgs>>): Prisma__MenuItemClient<$Result.GetResult<Prisma.$MenuItemPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MenuItems.
     * @param {MenuItemDeleteManyArgs} args - Arguments to filter MenuItems to delete.
     * @example
     * // Delete a few MenuItems
     * const { count } = await prisma.menuItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MenuItemDeleteManyArgs>(args?: SelectSubset<T, MenuItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MenuItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MenuItems
     * const menuItem = await prisma.menuItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MenuItemUpdateManyArgs>(args: SelectSubset<T, MenuItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MenuItem.
     * @param {MenuItemUpsertArgs} args - Arguments to update or create a MenuItem.
     * @example
     * // Update or create a MenuItem
     * const menuItem = await prisma.menuItem.upsert({
     *   create: {
     *     // ... data to create a MenuItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MenuItem we want to update
     *   }
     * })
     */
    upsert<T extends MenuItemUpsertArgs>(args: SelectSubset<T, MenuItemUpsertArgs<ExtArgs>>): Prisma__MenuItemClient<$Result.GetResult<Prisma.$MenuItemPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of MenuItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuItemCountArgs} args - Arguments to filter MenuItems to count.
     * @example
     * // Count the number of MenuItems
     * const count = await prisma.menuItem.count({
     *   where: {
     *     // ... the filter for the MenuItems we want to count
     *   }
     * })
    **/
    count<T extends MenuItemCountArgs>(
      args?: Subset<T, MenuItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MenuItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MenuItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MenuItemAggregateArgs>(args: Subset<T, MenuItemAggregateArgs>): Prisma.PrismaPromise<GetMenuItemAggregateType<T>>

    /**
     * Group by MenuItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MenuItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MenuItemGroupByArgs['orderBy'] }
        : { orderBy?: MenuItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MenuItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMenuItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MenuItem model
   */
  readonly fields: MenuItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MenuItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MenuItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    category<T extends MenuCategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MenuCategoryDefaultArgs<ExtArgs>>): Prisma__MenuCategoryClient<$Result.GetResult<Prisma.$MenuCategoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MenuItem model
   */ 
  interface MenuItemFieldRefs {
    readonly id: FieldRef<"MenuItem", 'Int'>
    readonly categoryId: FieldRef<"MenuItem", 'Int'>
    readonly name: FieldRef<"MenuItem", 'String'>
    readonly description: FieldRef<"MenuItem", 'String'>
    readonly price: FieldRef<"MenuItem", 'Decimal'>
    readonly imageUrl: FieldRef<"MenuItem", 'String'>
    readonly isActive: FieldRef<"MenuItem", 'Boolean'>
    readonly sortOrder: FieldRef<"MenuItem", 'Int'>
    readonly createdAt: FieldRef<"MenuItem", 'DateTime'>
    readonly updatedAt: FieldRef<"MenuItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MenuItem findUnique
   */
  export type MenuItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuItem
     */
    select?: MenuItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuItemInclude<ExtArgs> | null
    /**
     * Filter, which MenuItem to fetch.
     */
    where: MenuItemWhereUniqueInput
  }

  /**
   * MenuItem findUniqueOrThrow
   */
  export type MenuItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuItem
     */
    select?: MenuItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuItemInclude<ExtArgs> | null
    /**
     * Filter, which MenuItem to fetch.
     */
    where: MenuItemWhereUniqueInput
  }

  /**
   * MenuItem findFirst
   */
  export type MenuItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuItem
     */
    select?: MenuItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuItemInclude<ExtArgs> | null
    /**
     * Filter, which MenuItem to fetch.
     */
    where?: MenuItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MenuItems to fetch.
     */
    orderBy?: MenuItemOrderByWithRelationInput | MenuItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MenuItems.
     */
    cursor?: MenuItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MenuItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MenuItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MenuItems.
     */
    distinct?: MenuItemScalarFieldEnum | MenuItemScalarFieldEnum[]
  }

  /**
   * MenuItem findFirstOrThrow
   */
  export type MenuItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuItem
     */
    select?: MenuItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuItemInclude<ExtArgs> | null
    /**
     * Filter, which MenuItem to fetch.
     */
    where?: MenuItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MenuItems to fetch.
     */
    orderBy?: MenuItemOrderByWithRelationInput | MenuItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MenuItems.
     */
    cursor?: MenuItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MenuItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MenuItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MenuItems.
     */
    distinct?: MenuItemScalarFieldEnum | MenuItemScalarFieldEnum[]
  }

  /**
   * MenuItem findMany
   */
  export type MenuItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuItem
     */
    select?: MenuItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuItemInclude<ExtArgs> | null
    /**
     * Filter, which MenuItems to fetch.
     */
    where?: MenuItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MenuItems to fetch.
     */
    orderBy?: MenuItemOrderByWithRelationInput | MenuItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MenuItems.
     */
    cursor?: MenuItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MenuItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MenuItems.
     */
    skip?: number
    distinct?: MenuItemScalarFieldEnum | MenuItemScalarFieldEnum[]
  }

  /**
   * MenuItem create
   */
  export type MenuItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuItem
     */
    select?: MenuItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuItemInclude<ExtArgs> | null
    /**
     * The data needed to create a MenuItem.
     */
    data: XOR<MenuItemCreateInput, MenuItemUncheckedCreateInput>
  }

  /**
   * MenuItem createMany
   */
  export type MenuItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MenuItems.
     */
    data: MenuItemCreateManyInput | MenuItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MenuItem createManyAndReturn
   */
  export type MenuItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuItem
     */
    select?: MenuItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many MenuItems.
     */
    data: MenuItemCreateManyInput | MenuItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MenuItem update
   */
  export type MenuItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuItem
     */
    select?: MenuItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuItemInclude<ExtArgs> | null
    /**
     * The data needed to update a MenuItem.
     */
    data: XOR<MenuItemUpdateInput, MenuItemUncheckedUpdateInput>
    /**
     * Choose, which MenuItem to update.
     */
    where: MenuItemWhereUniqueInput
  }

  /**
   * MenuItem updateMany
   */
  export type MenuItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MenuItems.
     */
    data: XOR<MenuItemUpdateManyMutationInput, MenuItemUncheckedUpdateManyInput>
    /**
     * Filter which MenuItems to update
     */
    where?: MenuItemWhereInput
  }

  /**
   * MenuItem upsert
   */
  export type MenuItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuItem
     */
    select?: MenuItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuItemInclude<ExtArgs> | null
    /**
     * The filter to search for the MenuItem to update in case it exists.
     */
    where: MenuItemWhereUniqueInput
    /**
     * In case the MenuItem found by the `where` argument doesn't exist, create a new MenuItem with this data.
     */
    create: XOR<MenuItemCreateInput, MenuItemUncheckedCreateInput>
    /**
     * In case the MenuItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MenuItemUpdateInput, MenuItemUncheckedUpdateInput>
  }

  /**
   * MenuItem delete
   */
  export type MenuItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuItem
     */
    select?: MenuItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuItemInclude<ExtArgs> | null
    /**
     * Filter which MenuItem to delete.
     */
    where: MenuItemWhereUniqueInput
  }

  /**
   * MenuItem deleteMany
   */
  export type MenuItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MenuItems to delete
     */
    where?: MenuItemWhereInput
  }

  /**
   * MenuItem without action
   */
  export type MenuItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MenuItem
     */
    select?: MenuItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MenuItemInclude<ExtArgs> | null
  }


  /**
   * Model Hookah
   */

  export type AggregateHookah = {
    _count: HookahCountAggregateOutputType | null
    _avg: HookahAvgAggregateOutputType | null
    _sum: HookahSumAggregateOutputType | null
    _min: HookahMinAggregateOutputType | null
    _max: HookahMaxAggregateOutputType | null
  }

  export type HookahAvgAggregateOutputType = {
    id: number | null
    price: Decimal | null
    sortOrder: number | null
  }

  export type HookahSumAggregateOutputType = {
    id: number | null
    price: Decimal | null
    sortOrder: number | null
  }

  export type HookahMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    price: Decimal | null
    isActive: boolean | null
    sortOrder: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type HookahMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    price: Decimal | null
    isActive: boolean | null
    sortOrder: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type HookahCountAggregateOutputType = {
    id: number
    name: number
    description: number
    price: number
    features: number
    isActive: number
    sortOrder: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type HookahAvgAggregateInputType = {
    id?: true
    price?: true
    sortOrder?: true
  }

  export type HookahSumAggregateInputType = {
    id?: true
    price?: true
    sortOrder?: true
  }

  export type HookahMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    price?: true
    isActive?: true
    sortOrder?: true
    createdAt?: true
    updatedAt?: true
  }

  export type HookahMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    price?: true
    isActive?: true
    sortOrder?: true
    createdAt?: true
    updatedAt?: true
  }

  export type HookahCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    price?: true
    features?: true
    isActive?: true
    sortOrder?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type HookahAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Hookah to aggregate.
     */
    where?: HookahWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Hookahs to fetch.
     */
    orderBy?: HookahOrderByWithRelationInput | HookahOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HookahWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hookahs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hookahs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Hookahs
    **/
    _count?: true | HookahCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HookahAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HookahSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HookahMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HookahMaxAggregateInputType
  }

  export type GetHookahAggregateType<T extends HookahAggregateArgs> = {
        [P in keyof T & keyof AggregateHookah]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHookah[P]>
      : GetScalarType<T[P], AggregateHookah[P]>
  }




  export type HookahGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HookahWhereInput
    orderBy?: HookahOrderByWithAggregationInput | HookahOrderByWithAggregationInput[]
    by: HookahScalarFieldEnum[] | HookahScalarFieldEnum
    having?: HookahScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HookahCountAggregateInputType | true
    _avg?: HookahAvgAggregateInputType
    _sum?: HookahSumAggregateInputType
    _min?: HookahMinAggregateInputType
    _max?: HookahMaxAggregateInputType
  }

  export type HookahGroupByOutputType = {
    id: number
    name: string
    description: string | null
    price: Decimal
    features: string[]
    isActive: boolean
    sortOrder: number
    createdAt: Date
    updatedAt: Date
    _count: HookahCountAggregateOutputType | null
    _avg: HookahAvgAggregateOutputType | null
    _sum: HookahSumAggregateOutputType | null
    _min: HookahMinAggregateOutputType | null
    _max: HookahMaxAggregateOutputType | null
  }

  type GetHookahGroupByPayload<T extends HookahGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HookahGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HookahGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HookahGroupByOutputType[P]>
            : GetScalarType<T[P], HookahGroupByOutputType[P]>
        }
      >
    >


  export type HookahSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    price?: boolean
    features?: boolean
    isActive?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["hookah"]>

  export type HookahSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    price?: boolean
    features?: boolean
    isActive?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["hookah"]>

  export type HookahSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    price?: boolean
    features?: boolean
    isActive?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $HookahPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Hookah"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string | null
      price: Prisma.Decimal
      features: string[]
      isActive: boolean
      sortOrder: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["hookah"]>
    composites: {}
  }

  type HookahGetPayload<S extends boolean | null | undefined | HookahDefaultArgs> = $Result.GetResult<Prisma.$HookahPayload, S>

  type HookahCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<HookahFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: HookahCountAggregateInputType | true
    }

  export interface HookahDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Hookah'], meta: { name: 'Hookah' } }
    /**
     * Find zero or one Hookah that matches the filter.
     * @param {HookahFindUniqueArgs} args - Arguments to find a Hookah
     * @example
     * // Get one Hookah
     * const hookah = await prisma.hookah.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HookahFindUniqueArgs>(args: SelectSubset<T, HookahFindUniqueArgs<ExtArgs>>): Prisma__HookahClient<$Result.GetResult<Prisma.$HookahPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Hookah that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {HookahFindUniqueOrThrowArgs} args - Arguments to find a Hookah
     * @example
     * // Get one Hookah
     * const hookah = await prisma.hookah.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HookahFindUniqueOrThrowArgs>(args: SelectSubset<T, HookahFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HookahClient<$Result.GetResult<Prisma.$HookahPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Hookah that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HookahFindFirstArgs} args - Arguments to find a Hookah
     * @example
     * // Get one Hookah
     * const hookah = await prisma.hookah.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HookahFindFirstArgs>(args?: SelectSubset<T, HookahFindFirstArgs<ExtArgs>>): Prisma__HookahClient<$Result.GetResult<Prisma.$HookahPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Hookah that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HookahFindFirstOrThrowArgs} args - Arguments to find a Hookah
     * @example
     * // Get one Hookah
     * const hookah = await prisma.hookah.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HookahFindFirstOrThrowArgs>(args?: SelectSubset<T, HookahFindFirstOrThrowArgs<ExtArgs>>): Prisma__HookahClient<$Result.GetResult<Prisma.$HookahPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Hookahs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HookahFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Hookahs
     * const hookahs = await prisma.hookah.findMany()
     * 
     * // Get first 10 Hookahs
     * const hookahs = await prisma.hookah.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const hookahWithIdOnly = await prisma.hookah.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HookahFindManyArgs>(args?: SelectSubset<T, HookahFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HookahPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Hookah.
     * @param {HookahCreateArgs} args - Arguments to create a Hookah.
     * @example
     * // Create one Hookah
     * const Hookah = await prisma.hookah.create({
     *   data: {
     *     // ... data to create a Hookah
     *   }
     * })
     * 
     */
    create<T extends HookahCreateArgs>(args: SelectSubset<T, HookahCreateArgs<ExtArgs>>): Prisma__HookahClient<$Result.GetResult<Prisma.$HookahPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Hookahs.
     * @param {HookahCreateManyArgs} args - Arguments to create many Hookahs.
     * @example
     * // Create many Hookahs
     * const hookah = await prisma.hookah.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HookahCreateManyArgs>(args?: SelectSubset<T, HookahCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Hookahs and returns the data saved in the database.
     * @param {HookahCreateManyAndReturnArgs} args - Arguments to create many Hookahs.
     * @example
     * // Create many Hookahs
     * const hookah = await prisma.hookah.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Hookahs and only return the `id`
     * const hookahWithIdOnly = await prisma.hookah.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HookahCreateManyAndReturnArgs>(args?: SelectSubset<T, HookahCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HookahPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Hookah.
     * @param {HookahDeleteArgs} args - Arguments to delete one Hookah.
     * @example
     * // Delete one Hookah
     * const Hookah = await prisma.hookah.delete({
     *   where: {
     *     // ... filter to delete one Hookah
     *   }
     * })
     * 
     */
    delete<T extends HookahDeleteArgs>(args: SelectSubset<T, HookahDeleteArgs<ExtArgs>>): Prisma__HookahClient<$Result.GetResult<Prisma.$HookahPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Hookah.
     * @param {HookahUpdateArgs} args - Arguments to update one Hookah.
     * @example
     * // Update one Hookah
     * const hookah = await prisma.hookah.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HookahUpdateArgs>(args: SelectSubset<T, HookahUpdateArgs<ExtArgs>>): Prisma__HookahClient<$Result.GetResult<Prisma.$HookahPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Hookahs.
     * @param {HookahDeleteManyArgs} args - Arguments to filter Hookahs to delete.
     * @example
     * // Delete a few Hookahs
     * const { count } = await prisma.hookah.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HookahDeleteManyArgs>(args?: SelectSubset<T, HookahDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Hookahs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HookahUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Hookahs
     * const hookah = await prisma.hookah.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HookahUpdateManyArgs>(args: SelectSubset<T, HookahUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Hookah.
     * @param {HookahUpsertArgs} args - Arguments to update or create a Hookah.
     * @example
     * // Update or create a Hookah
     * const hookah = await prisma.hookah.upsert({
     *   create: {
     *     // ... data to create a Hookah
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Hookah we want to update
     *   }
     * })
     */
    upsert<T extends HookahUpsertArgs>(args: SelectSubset<T, HookahUpsertArgs<ExtArgs>>): Prisma__HookahClient<$Result.GetResult<Prisma.$HookahPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Hookahs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HookahCountArgs} args - Arguments to filter Hookahs to count.
     * @example
     * // Count the number of Hookahs
     * const count = await prisma.hookah.count({
     *   where: {
     *     // ... the filter for the Hookahs we want to count
     *   }
     * })
    **/
    count<T extends HookahCountArgs>(
      args?: Subset<T, HookahCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HookahCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Hookah.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HookahAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HookahAggregateArgs>(args: Subset<T, HookahAggregateArgs>): Prisma.PrismaPromise<GetHookahAggregateType<T>>

    /**
     * Group by Hookah.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HookahGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HookahGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HookahGroupByArgs['orderBy'] }
        : { orderBy?: HookahGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HookahGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHookahGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Hookah model
   */
  readonly fields: HookahFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Hookah.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HookahClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Hookah model
   */ 
  interface HookahFieldRefs {
    readonly id: FieldRef<"Hookah", 'Int'>
    readonly name: FieldRef<"Hookah", 'String'>
    readonly description: FieldRef<"Hookah", 'String'>
    readonly price: FieldRef<"Hookah", 'Decimal'>
    readonly features: FieldRef<"Hookah", 'String[]'>
    readonly isActive: FieldRef<"Hookah", 'Boolean'>
    readonly sortOrder: FieldRef<"Hookah", 'Int'>
    readonly createdAt: FieldRef<"Hookah", 'DateTime'>
    readonly updatedAt: FieldRef<"Hookah", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Hookah findUnique
   */
  export type HookahFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hookah
     */
    select?: HookahSelect<ExtArgs> | null
    /**
     * Filter, which Hookah to fetch.
     */
    where: HookahWhereUniqueInput
  }

  /**
   * Hookah findUniqueOrThrow
   */
  export type HookahFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hookah
     */
    select?: HookahSelect<ExtArgs> | null
    /**
     * Filter, which Hookah to fetch.
     */
    where: HookahWhereUniqueInput
  }

  /**
   * Hookah findFirst
   */
  export type HookahFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hookah
     */
    select?: HookahSelect<ExtArgs> | null
    /**
     * Filter, which Hookah to fetch.
     */
    where?: HookahWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Hookahs to fetch.
     */
    orderBy?: HookahOrderByWithRelationInput | HookahOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Hookahs.
     */
    cursor?: HookahWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hookahs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hookahs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Hookahs.
     */
    distinct?: HookahScalarFieldEnum | HookahScalarFieldEnum[]
  }

  /**
   * Hookah findFirstOrThrow
   */
  export type HookahFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hookah
     */
    select?: HookahSelect<ExtArgs> | null
    /**
     * Filter, which Hookah to fetch.
     */
    where?: HookahWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Hookahs to fetch.
     */
    orderBy?: HookahOrderByWithRelationInput | HookahOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Hookahs.
     */
    cursor?: HookahWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hookahs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hookahs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Hookahs.
     */
    distinct?: HookahScalarFieldEnum | HookahScalarFieldEnum[]
  }

  /**
   * Hookah findMany
   */
  export type HookahFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hookah
     */
    select?: HookahSelect<ExtArgs> | null
    /**
     * Filter, which Hookahs to fetch.
     */
    where?: HookahWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Hookahs to fetch.
     */
    orderBy?: HookahOrderByWithRelationInput | HookahOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Hookahs.
     */
    cursor?: HookahWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hookahs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hookahs.
     */
    skip?: number
    distinct?: HookahScalarFieldEnum | HookahScalarFieldEnum[]
  }

  /**
   * Hookah create
   */
  export type HookahCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hookah
     */
    select?: HookahSelect<ExtArgs> | null
    /**
     * The data needed to create a Hookah.
     */
    data: XOR<HookahCreateInput, HookahUncheckedCreateInput>
  }

  /**
   * Hookah createMany
   */
  export type HookahCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Hookahs.
     */
    data: HookahCreateManyInput | HookahCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Hookah createManyAndReturn
   */
  export type HookahCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hookah
     */
    select?: HookahSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Hookahs.
     */
    data: HookahCreateManyInput | HookahCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Hookah update
   */
  export type HookahUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hookah
     */
    select?: HookahSelect<ExtArgs> | null
    /**
     * The data needed to update a Hookah.
     */
    data: XOR<HookahUpdateInput, HookahUncheckedUpdateInput>
    /**
     * Choose, which Hookah to update.
     */
    where: HookahWhereUniqueInput
  }

  /**
   * Hookah updateMany
   */
  export type HookahUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Hookahs.
     */
    data: XOR<HookahUpdateManyMutationInput, HookahUncheckedUpdateManyInput>
    /**
     * Filter which Hookahs to update
     */
    where?: HookahWhereInput
  }

  /**
   * Hookah upsert
   */
  export type HookahUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hookah
     */
    select?: HookahSelect<ExtArgs> | null
    /**
     * The filter to search for the Hookah to update in case it exists.
     */
    where: HookahWhereUniqueInput
    /**
     * In case the Hookah found by the `where` argument doesn't exist, create a new Hookah with this data.
     */
    create: XOR<HookahCreateInput, HookahUncheckedCreateInput>
    /**
     * In case the Hookah was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HookahUpdateInput, HookahUncheckedUpdateInput>
  }

  /**
   * Hookah delete
   */
  export type HookahDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hookah
     */
    select?: HookahSelect<ExtArgs> | null
    /**
     * Filter which Hookah to delete.
     */
    where: HookahWhereUniqueInput
  }

  /**
   * Hookah deleteMany
   */
  export type HookahDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Hookahs to delete
     */
    where?: HookahWhereInput
  }

  /**
   * Hookah without action
   */
  export type HookahDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Hookah
     */
    select?: HookahSelect<ExtArgs> | null
  }


  /**
   * Model BoardGame
   */

  export type AggregateBoardGame = {
    _count: BoardGameCountAggregateOutputType | null
    _avg: BoardGameAvgAggregateOutputType | null
    _sum: BoardGameSumAggregateOutputType | null
    _min: BoardGameMinAggregateOutputType | null
    _max: BoardGameMaxAggregateOutputType | null
  }

  export type BoardGameAvgAggregateOutputType = {
    id: number | null
    price: Decimal | null
    sortOrder: number | null
  }

  export type BoardGameSumAggregateOutputType = {
    id: number | null
    price: Decimal | null
    sortOrder: number | null
  }

  export type BoardGameMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    price: Decimal | null
    duration: string | null
    players: string | null
    difficulty: string | null
    category: string | null
    imageUrl: string | null
    isActive: boolean | null
    sortOrder: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BoardGameMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    price: Decimal | null
    duration: string | null
    players: string | null
    difficulty: string | null
    category: string | null
    imageUrl: string | null
    isActive: boolean | null
    sortOrder: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BoardGameCountAggregateOutputType = {
    id: number
    name: number
    description: number
    price: number
    duration: number
    players: number
    difficulty: number
    category: number
    imageUrl: number
    isActive: number
    sortOrder: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BoardGameAvgAggregateInputType = {
    id?: true
    price?: true
    sortOrder?: true
  }

  export type BoardGameSumAggregateInputType = {
    id?: true
    price?: true
    sortOrder?: true
  }

  export type BoardGameMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    price?: true
    duration?: true
    players?: true
    difficulty?: true
    category?: true
    imageUrl?: true
    isActive?: true
    sortOrder?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BoardGameMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    price?: true
    duration?: true
    players?: true
    difficulty?: true
    category?: true
    imageUrl?: true
    isActive?: true
    sortOrder?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BoardGameCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    price?: true
    duration?: true
    players?: true
    difficulty?: true
    category?: true
    imageUrl?: true
    isActive?: true
    sortOrder?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BoardGameAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BoardGame to aggregate.
     */
    where?: BoardGameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BoardGames to fetch.
     */
    orderBy?: BoardGameOrderByWithRelationInput | BoardGameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BoardGameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BoardGames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BoardGames.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BoardGames
    **/
    _count?: true | BoardGameCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BoardGameAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BoardGameSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BoardGameMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BoardGameMaxAggregateInputType
  }

  export type GetBoardGameAggregateType<T extends BoardGameAggregateArgs> = {
        [P in keyof T & keyof AggregateBoardGame]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBoardGame[P]>
      : GetScalarType<T[P], AggregateBoardGame[P]>
  }




  export type BoardGameGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BoardGameWhereInput
    orderBy?: BoardGameOrderByWithAggregationInput | BoardGameOrderByWithAggregationInput[]
    by: BoardGameScalarFieldEnum[] | BoardGameScalarFieldEnum
    having?: BoardGameScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BoardGameCountAggregateInputType | true
    _avg?: BoardGameAvgAggregateInputType
    _sum?: BoardGameSumAggregateInputType
    _min?: BoardGameMinAggregateInputType
    _max?: BoardGameMaxAggregateInputType
  }

  export type BoardGameGroupByOutputType = {
    id: number
    name: string
    description: string | null
    price: Decimal
    duration: string | null
    players: string | null
    difficulty: string | null
    category: string | null
    imageUrl: string | null
    isActive: boolean
    sortOrder: number
    createdAt: Date
    updatedAt: Date
    _count: BoardGameCountAggregateOutputType | null
    _avg: BoardGameAvgAggregateOutputType | null
    _sum: BoardGameSumAggregateOutputType | null
    _min: BoardGameMinAggregateOutputType | null
    _max: BoardGameMaxAggregateOutputType | null
  }

  type GetBoardGameGroupByPayload<T extends BoardGameGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BoardGameGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BoardGameGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BoardGameGroupByOutputType[P]>
            : GetScalarType<T[P], BoardGameGroupByOutputType[P]>
        }
      >
    >


  export type BoardGameSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    price?: boolean
    duration?: boolean
    players?: boolean
    difficulty?: boolean
    category?: boolean
    imageUrl?: boolean
    isActive?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["boardGame"]>

  export type BoardGameSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    price?: boolean
    duration?: boolean
    players?: boolean
    difficulty?: boolean
    category?: boolean
    imageUrl?: boolean
    isActive?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["boardGame"]>

  export type BoardGameSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    price?: boolean
    duration?: boolean
    players?: boolean
    difficulty?: boolean
    category?: boolean
    imageUrl?: boolean
    isActive?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $BoardGamePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BoardGame"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string | null
      price: Prisma.Decimal
      duration: string | null
      players: string | null
      difficulty: string | null
      category: string | null
      imageUrl: string | null
      isActive: boolean
      sortOrder: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["boardGame"]>
    composites: {}
  }

  type BoardGameGetPayload<S extends boolean | null | undefined | BoardGameDefaultArgs> = $Result.GetResult<Prisma.$BoardGamePayload, S>

  type BoardGameCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BoardGameFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BoardGameCountAggregateInputType | true
    }

  export interface BoardGameDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BoardGame'], meta: { name: 'BoardGame' } }
    /**
     * Find zero or one BoardGame that matches the filter.
     * @param {BoardGameFindUniqueArgs} args - Arguments to find a BoardGame
     * @example
     * // Get one BoardGame
     * const boardGame = await prisma.boardGame.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BoardGameFindUniqueArgs>(args: SelectSubset<T, BoardGameFindUniqueArgs<ExtArgs>>): Prisma__BoardGameClient<$Result.GetResult<Prisma.$BoardGamePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one BoardGame that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BoardGameFindUniqueOrThrowArgs} args - Arguments to find a BoardGame
     * @example
     * // Get one BoardGame
     * const boardGame = await prisma.boardGame.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BoardGameFindUniqueOrThrowArgs>(args: SelectSubset<T, BoardGameFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BoardGameClient<$Result.GetResult<Prisma.$BoardGamePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first BoardGame that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardGameFindFirstArgs} args - Arguments to find a BoardGame
     * @example
     * // Get one BoardGame
     * const boardGame = await prisma.boardGame.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BoardGameFindFirstArgs>(args?: SelectSubset<T, BoardGameFindFirstArgs<ExtArgs>>): Prisma__BoardGameClient<$Result.GetResult<Prisma.$BoardGamePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first BoardGame that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardGameFindFirstOrThrowArgs} args - Arguments to find a BoardGame
     * @example
     * // Get one BoardGame
     * const boardGame = await prisma.boardGame.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BoardGameFindFirstOrThrowArgs>(args?: SelectSubset<T, BoardGameFindFirstOrThrowArgs<ExtArgs>>): Prisma__BoardGameClient<$Result.GetResult<Prisma.$BoardGamePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more BoardGames that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardGameFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BoardGames
     * const boardGames = await prisma.boardGame.findMany()
     * 
     * // Get first 10 BoardGames
     * const boardGames = await prisma.boardGame.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const boardGameWithIdOnly = await prisma.boardGame.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BoardGameFindManyArgs>(args?: SelectSubset<T, BoardGameFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BoardGamePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a BoardGame.
     * @param {BoardGameCreateArgs} args - Arguments to create a BoardGame.
     * @example
     * // Create one BoardGame
     * const BoardGame = await prisma.boardGame.create({
     *   data: {
     *     // ... data to create a BoardGame
     *   }
     * })
     * 
     */
    create<T extends BoardGameCreateArgs>(args: SelectSubset<T, BoardGameCreateArgs<ExtArgs>>): Prisma__BoardGameClient<$Result.GetResult<Prisma.$BoardGamePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many BoardGames.
     * @param {BoardGameCreateManyArgs} args - Arguments to create many BoardGames.
     * @example
     * // Create many BoardGames
     * const boardGame = await prisma.boardGame.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BoardGameCreateManyArgs>(args?: SelectSubset<T, BoardGameCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BoardGames and returns the data saved in the database.
     * @param {BoardGameCreateManyAndReturnArgs} args - Arguments to create many BoardGames.
     * @example
     * // Create many BoardGames
     * const boardGame = await prisma.boardGame.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BoardGames and only return the `id`
     * const boardGameWithIdOnly = await prisma.boardGame.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BoardGameCreateManyAndReturnArgs>(args?: SelectSubset<T, BoardGameCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BoardGamePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a BoardGame.
     * @param {BoardGameDeleteArgs} args - Arguments to delete one BoardGame.
     * @example
     * // Delete one BoardGame
     * const BoardGame = await prisma.boardGame.delete({
     *   where: {
     *     // ... filter to delete one BoardGame
     *   }
     * })
     * 
     */
    delete<T extends BoardGameDeleteArgs>(args: SelectSubset<T, BoardGameDeleteArgs<ExtArgs>>): Prisma__BoardGameClient<$Result.GetResult<Prisma.$BoardGamePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one BoardGame.
     * @param {BoardGameUpdateArgs} args - Arguments to update one BoardGame.
     * @example
     * // Update one BoardGame
     * const boardGame = await prisma.boardGame.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BoardGameUpdateArgs>(args: SelectSubset<T, BoardGameUpdateArgs<ExtArgs>>): Prisma__BoardGameClient<$Result.GetResult<Prisma.$BoardGamePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more BoardGames.
     * @param {BoardGameDeleteManyArgs} args - Arguments to filter BoardGames to delete.
     * @example
     * // Delete a few BoardGames
     * const { count } = await prisma.boardGame.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BoardGameDeleteManyArgs>(args?: SelectSubset<T, BoardGameDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BoardGames.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardGameUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BoardGames
     * const boardGame = await prisma.boardGame.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BoardGameUpdateManyArgs>(args: SelectSubset<T, BoardGameUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BoardGame.
     * @param {BoardGameUpsertArgs} args - Arguments to update or create a BoardGame.
     * @example
     * // Update or create a BoardGame
     * const boardGame = await prisma.boardGame.upsert({
     *   create: {
     *     // ... data to create a BoardGame
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BoardGame we want to update
     *   }
     * })
     */
    upsert<T extends BoardGameUpsertArgs>(args: SelectSubset<T, BoardGameUpsertArgs<ExtArgs>>): Prisma__BoardGameClient<$Result.GetResult<Prisma.$BoardGamePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of BoardGames.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardGameCountArgs} args - Arguments to filter BoardGames to count.
     * @example
     * // Count the number of BoardGames
     * const count = await prisma.boardGame.count({
     *   where: {
     *     // ... the filter for the BoardGames we want to count
     *   }
     * })
    **/
    count<T extends BoardGameCountArgs>(
      args?: Subset<T, BoardGameCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BoardGameCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BoardGame.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardGameAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BoardGameAggregateArgs>(args: Subset<T, BoardGameAggregateArgs>): Prisma.PrismaPromise<GetBoardGameAggregateType<T>>

    /**
     * Group by BoardGame.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardGameGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BoardGameGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BoardGameGroupByArgs['orderBy'] }
        : { orderBy?: BoardGameGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BoardGameGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBoardGameGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BoardGame model
   */
  readonly fields: BoardGameFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BoardGame.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BoardGameClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BoardGame model
   */ 
  interface BoardGameFieldRefs {
    readonly id: FieldRef<"BoardGame", 'Int'>
    readonly name: FieldRef<"BoardGame", 'String'>
    readonly description: FieldRef<"BoardGame", 'String'>
    readonly price: FieldRef<"BoardGame", 'Decimal'>
    readonly duration: FieldRef<"BoardGame", 'String'>
    readonly players: FieldRef<"BoardGame", 'String'>
    readonly difficulty: FieldRef<"BoardGame", 'String'>
    readonly category: FieldRef<"BoardGame", 'String'>
    readonly imageUrl: FieldRef<"BoardGame", 'String'>
    readonly isActive: FieldRef<"BoardGame", 'Boolean'>
    readonly sortOrder: FieldRef<"BoardGame", 'Int'>
    readonly createdAt: FieldRef<"BoardGame", 'DateTime'>
    readonly updatedAt: FieldRef<"BoardGame", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BoardGame findUnique
   */
  export type BoardGameFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardGame
     */
    select?: BoardGameSelect<ExtArgs> | null
    /**
     * Filter, which BoardGame to fetch.
     */
    where: BoardGameWhereUniqueInput
  }

  /**
   * BoardGame findUniqueOrThrow
   */
  export type BoardGameFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardGame
     */
    select?: BoardGameSelect<ExtArgs> | null
    /**
     * Filter, which BoardGame to fetch.
     */
    where: BoardGameWhereUniqueInput
  }

  /**
   * BoardGame findFirst
   */
  export type BoardGameFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardGame
     */
    select?: BoardGameSelect<ExtArgs> | null
    /**
     * Filter, which BoardGame to fetch.
     */
    where?: BoardGameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BoardGames to fetch.
     */
    orderBy?: BoardGameOrderByWithRelationInput | BoardGameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BoardGames.
     */
    cursor?: BoardGameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BoardGames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BoardGames.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BoardGames.
     */
    distinct?: BoardGameScalarFieldEnum | BoardGameScalarFieldEnum[]
  }

  /**
   * BoardGame findFirstOrThrow
   */
  export type BoardGameFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardGame
     */
    select?: BoardGameSelect<ExtArgs> | null
    /**
     * Filter, which BoardGame to fetch.
     */
    where?: BoardGameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BoardGames to fetch.
     */
    orderBy?: BoardGameOrderByWithRelationInput | BoardGameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BoardGames.
     */
    cursor?: BoardGameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BoardGames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BoardGames.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BoardGames.
     */
    distinct?: BoardGameScalarFieldEnum | BoardGameScalarFieldEnum[]
  }

  /**
   * BoardGame findMany
   */
  export type BoardGameFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardGame
     */
    select?: BoardGameSelect<ExtArgs> | null
    /**
     * Filter, which BoardGames to fetch.
     */
    where?: BoardGameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BoardGames to fetch.
     */
    orderBy?: BoardGameOrderByWithRelationInput | BoardGameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BoardGames.
     */
    cursor?: BoardGameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BoardGames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BoardGames.
     */
    skip?: number
    distinct?: BoardGameScalarFieldEnum | BoardGameScalarFieldEnum[]
  }

  /**
   * BoardGame create
   */
  export type BoardGameCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardGame
     */
    select?: BoardGameSelect<ExtArgs> | null
    /**
     * The data needed to create a BoardGame.
     */
    data: XOR<BoardGameCreateInput, BoardGameUncheckedCreateInput>
  }

  /**
   * BoardGame createMany
   */
  export type BoardGameCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BoardGames.
     */
    data: BoardGameCreateManyInput | BoardGameCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BoardGame createManyAndReturn
   */
  export type BoardGameCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardGame
     */
    select?: BoardGameSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many BoardGames.
     */
    data: BoardGameCreateManyInput | BoardGameCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BoardGame update
   */
  export type BoardGameUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardGame
     */
    select?: BoardGameSelect<ExtArgs> | null
    /**
     * The data needed to update a BoardGame.
     */
    data: XOR<BoardGameUpdateInput, BoardGameUncheckedUpdateInput>
    /**
     * Choose, which BoardGame to update.
     */
    where: BoardGameWhereUniqueInput
  }

  /**
   * BoardGame updateMany
   */
  export type BoardGameUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BoardGames.
     */
    data: XOR<BoardGameUpdateManyMutationInput, BoardGameUncheckedUpdateManyInput>
    /**
     * Filter which BoardGames to update
     */
    where?: BoardGameWhereInput
  }

  /**
   * BoardGame upsert
   */
  export type BoardGameUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardGame
     */
    select?: BoardGameSelect<ExtArgs> | null
    /**
     * The filter to search for the BoardGame to update in case it exists.
     */
    where: BoardGameWhereUniqueInput
    /**
     * In case the BoardGame found by the `where` argument doesn't exist, create a new BoardGame with this data.
     */
    create: XOR<BoardGameCreateInput, BoardGameUncheckedCreateInput>
    /**
     * In case the BoardGame was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BoardGameUpdateInput, BoardGameUncheckedUpdateInput>
  }

  /**
   * BoardGame delete
   */
  export type BoardGameDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardGame
     */
    select?: BoardGameSelect<ExtArgs> | null
    /**
     * Filter which BoardGame to delete.
     */
    where: BoardGameWhereUniqueInput
  }

  /**
   * BoardGame deleteMany
   */
  export type BoardGameDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BoardGames to delete
     */
    where?: BoardGameWhereInput
  }

  /**
   * BoardGame without action
   */
  export type BoardGameDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardGame
     */
    select?: BoardGameSelect<ExtArgs> | null
  }


  /**
   * Model BilliardsService
   */

  export type AggregateBilliardsService = {
    _count: BilliardsServiceCountAggregateOutputType | null
    _avg: BilliardsServiceAvgAggregateOutputType | null
    _sum: BilliardsServiceSumAggregateOutputType | null
    _min: BilliardsServiceMinAggregateOutputType | null
    _max: BilliardsServiceMaxAggregateOutputType | null
  }

  export type BilliardsServiceAvgAggregateOutputType = {
    id: number | null
    price: Decimal | null
    sortOrder: number | null
  }

  export type BilliardsServiceSumAggregateOutputType = {
    id: number | null
    price: Decimal | null
    sortOrder: number | null
  }

  export type BilliardsServiceMinAggregateOutputType = {
    id: number | null
    name: string | null
    type: string | null
    price: Decimal | null
    description: string | null
    imageUrl: string | null
    isActive: boolean | null
    sortOrder: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BilliardsServiceMaxAggregateOutputType = {
    id: number | null
    name: string | null
    type: string | null
    price: Decimal | null
    description: string | null
    imageUrl: string | null
    isActive: boolean | null
    sortOrder: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BilliardsServiceCountAggregateOutputType = {
    id: number
    name: number
    type: number
    price: number
    description: number
    imageUrl: number
    isActive: number
    sortOrder: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BilliardsServiceAvgAggregateInputType = {
    id?: true
    price?: true
    sortOrder?: true
  }

  export type BilliardsServiceSumAggregateInputType = {
    id?: true
    price?: true
    sortOrder?: true
  }

  export type BilliardsServiceMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    price?: true
    description?: true
    imageUrl?: true
    isActive?: true
    sortOrder?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BilliardsServiceMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    price?: true
    description?: true
    imageUrl?: true
    isActive?: true
    sortOrder?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BilliardsServiceCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    price?: true
    description?: true
    imageUrl?: true
    isActive?: true
    sortOrder?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BilliardsServiceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BilliardsService to aggregate.
     */
    where?: BilliardsServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BilliardsServices to fetch.
     */
    orderBy?: BilliardsServiceOrderByWithRelationInput | BilliardsServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BilliardsServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BilliardsServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BilliardsServices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BilliardsServices
    **/
    _count?: true | BilliardsServiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BilliardsServiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BilliardsServiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BilliardsServiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BilliardsServiceMaxAggregateInputType
  }

  export type GetBilliardsServiceAggregateType<T extends BilliardsServiceAggregateArgs> = {
        [P in keyof T & keyof AggregateBilliardsService]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBilliardsService[P]>
      : GetScalarType<T[P], AggregateBilliardsService[P]>
  }




  export type BilliardsServiceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BilliardsServiceWhereInput
    orderBy?: BilliardsServiceOrderByWithAggregationInput | BilliardsServiceOrderByWithAggregationInput[]
    by: BilliardsServiceScalarFieldEnum[] | BilliardsServiceScalarFieldEnum
    having?: BilliardsServiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BilliardsServiceCountAggregateInputType | true
    _avg?: BilliardsServiceAvgAggregateInputType
    _sum?: BilliardsServiceSumAggregateInputType
    _min?: BilliardsServiceMinAggregateInputType
    _max?: BilliardsServiceMaxAggregateInputType
  }

  export type BilliardsServiceGroupByOutputType = {
    id: number
    name: string
    type: string
    price: Decimal
    description: string | null
    imageUrl: string | null
    isActive: boolean | null
    sortOrder: number | null
    createdAt: Date | null
    updatedAt: Date | null
    _count: BilliardsServiceCountAggregateOutputType | null
    _avg: BilliardsServiceAvgAggregateOutputType | null
    _sum: BilliardsServiceSumAggregateOutputType | null
    _min: BilliardsServiceMinAggregateOutputType | null
    _max: BilliardsServiceMaxAggregateOutputType | null
  }

  type GetBilliardsServiceGroupByPayload<T extends BilliardsServiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BilliardsServiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BilliardsServiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BilliardsServiceGroupByOutputType[P]>
            : GetScalarType<T[P], BilliardsServiceGroupByOutputType[P]>
        }
      >
    >


  export type BilliardsServiceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    price?: boolean
    description?: boolean
    imageUrl?: boolean
    isActive?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["billiardsService"]>

  export type BilliardsServiceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    price?: boolean
    description?: boolean
    imageUrl?: boolean
    isActive?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["billiardsService"]>

  export type BilliardsServiceSelectScalar = {
    id?: boolean
    name?: boolean
    type?: boolean
    price?: boolean
    description?: boolean
    imageUrl?: boolean
    isActive?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $BilliardsServicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BilliardsService"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      type: string
      price: Prisma.Decimal
      description: string | null
      imageUrl: string | null
      isActive: boolean | null
      sortOrder: number | null
      createdAt: Date | null
      updatedAt: Date | null
    }, ExtArgs["result"]["billiardsService"]>
    composites: {}
  }

  type BilliardsServiceGetPayload<S extends boolean | null | undefined | BilliardsServiceDefaultArgs> = $Result.GetResult<Prisma.$BilliardsServicePayload, S>

  type BilliardsServiceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BilliardsServiceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BilliardsServiceCountAggregateInputType | true
    }

  export interface BilliardsServiceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BilliardsService'], meta: { name: 'BilliardsService' } }
    /**
     * Find zero or one BilliardsService that matches the filter.
     * @param {BilliardsServiceFindUniqueArgs} args - Arguments to find a BilliardsService
     * @example
     * // Get one BilliardsService
     * const billiardsService = await prisma.billiardsService.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BilliardsServiceFindUniqueArgs>(args: SelectSubset<T, BilliardsServiceFindUniqueArgs<ExtArgs>>): Prisma__BilliardsServiceClient<$Result.GetResult<Prisma.$BilliardsServicePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one BilliardsService that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BilliardsServiceFindUniqueOrThrowArgs} args - Arguments to find a BilliardsService
     * @example
     * // Get one BilliardsService
     * const billiardsService = await prisma.billiardsService.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BilliardsServiceFindUniqueOrThrowArgs>(args: SelectSubset<T, BilliardsServiceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BilliardsServiceClient<$Result.GetResult<Prisma.$BilliardsServicePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first BilliardsService that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BilliardsServiceFindFirstArgs} args - Arguments to find a BilliardsService
     * @example
     * // Get one BilliardsService
     * const billiardsService = await prisma.billiardsService.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BilliardsServiceFindFirstArgs>(args?: SelectSubset<T, BilliardsServiceFindFirstArgs<ExtArgs>>): Prisma__BilliardsServiceClient<$Result.GetResult<Prisma.$BilliardsServicePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first BilliardsService that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BilliardsServiceFindFirstOrThrowArgs} args - Arguments to find a BilliardsService
     * @example
     * // Get one BilliardsService
     * const billiardsService = await prisma.billiardsService.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BilliardsServiceFindFirstOrThrowArgs>(args?: SelectSubset<T, BilliardsServiceFindFirstOrThrowArgs<ExtArgs>>): Prisma__BilliardsServiceClient<$Result.GetResult<Prisma.$BilliardsServicePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more BilliardsServices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BilliardsServiceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BilliardsServices
     * const billiardsServices = await prisma.billiardsService.findMany()
     * 
     * // Get first 10 BilliardsServices
     * const billiardsServices = await prisma.billiardsService.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const billiardsServiceWithIdOnly = await prisma.billiardsService.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BilliardsServiceFindManyArgs>(args?: SelectSubset<T, BilliardsServiceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BilliardsServicePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a BilliardsService.
     * @param {BilliardsServiceCreateArgs} args - Arguments to create a BilliardsService.
     * @example
     * // Create one BilliardsService
     * const BilliardsService = await prisma.billiardsService.create({
     *   data: {
     *     // ... data to create a BilliardsService
     *   }
     * })
     * 
     */
    create<T extends BilliardsServiceCreateArgs>(args: SelectSubset<T, BilliardsServiceCreateArgs<ExtArgs>>): Prisma__BilliardsServiceClient<$Result.GetResult<Prisma.$BilliardsServicePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many BilliardsServices.
     * @param {BilliardsServiceCreateManyArgs} args - Arguments to create many BilliardsServices.
     * @example
     * // Create many BilliardsServices
     * const billiardsService = await prisma.billiardsService.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BilliardsServiceCreateManyArgs>(args?: SelectSubset<T, BilliardsServiceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BilliardsServices and returns the data saved in the database.
     * @param {BilliardsServiceCreateManyAndReturnArgs} args - Arguments to create many BilliardsServices.
     * @example
     * // Create many BilliardsServices
     * const billiardsService = await prisma.billiardsService.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BilliardsServices and only return the `id`
     * const billiardsServiceWithIdOnly = await prisma.billiardsService.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BilliardsServiceCreateManyAndReturnArgs>(args?: SelectSubset<T, BilliardsServiceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BilliardsServicePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a BilliardsService.
     * @param {BilliardsServiceDeleteArgs} args - Arguments to delete one BilliardsService.
     * @example
     * // Delete one BilliardsService
     * const BilliardsService = await prisma.billiardsService.delete({
     *   where: {
     *     // ... filter to delete one BilliardsService
     *   }
     * })
     * 
     */
    delete<T extends BilliardsServiceDeleteArgs>(args: SelectSubset<T, BilliardsServiceDeleteArgs<ExtArgs>>): Prisma__BilliardsServiceClient<$Result.GetResult<Prisma.$BilliardsServicePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one BilliardsService.
     * @param {BilliardsServiceUpdateArgs} args - Arguments to update one BilliardsService.
     * @example
     * // Update one BilliardsService
     * const billiardsService = await prisma.billiardsService.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BilliardsServiceUpdateArgs>(args: SelectSubset<T, BilliardsServiceUpdateArgs<ExtArgs>>): Prisma__BilliardsServiceClient<$Result.GetResult<Prisma.$BilliardsServicePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more BilliardsServices.
     * @param {BilliardsServiceDeleteManyArgs} args - Arguments to filter BilliardsServices to delete.
     * @example
     * // Delete a few BilliardsServices
     * const { count } = await prisma.billiardsService.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BilliardsServiceDeleteManyArgs>(args?: SelectSubset<T, BilliardsServiceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BilliardsServices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BilliardsServiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BilliardsServices
     * const billiardsService = await prisma.billiardsService.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BilliardsServiceUpdateManyArgs>(args: SelectSubset<T, BilliardsServiceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BilliardsService.
     * @param {BilliardsServiceUpsertArgs} args - Arguments to update or create a BilliardsService.
     * @example
     * // Update or create a BilliardsService
     * const billiardsService = await prisma.billiardsService.upsert({
     *   create: {
     *     // ... data to create a BilliardsService
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BilliardsService we want to update
     *   }
     * })
     */
    upsert<T extends BilliardsServiceUpsertArgs>(args: SelectSubset<T, BilliardsServiceUpsertArgs<ExtArgs>>): Prisma__BilliardsServiceClient<$Result.GetResult<Prisma.$BilliardsServicePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of BilliardsServices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BilliardsServiceCountArgs} args - Arguments to filter BilliardsServices to count.
     * @example
     * // Count the number of BilliardsServices
     * const count = await prisma.billiardsService.count({
     *   where: {
     *     // ... the filter for the BilliardsServices we want to count
     *   }
     * })
    **/
    count<T extends BilliardsServiceCountArgs>(
      args?: Subset<T, BilliardsServiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BilliardsServiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BilliardsService.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BilliardsServiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BilliardsServiceAggregateArgs>(args: Subset<T, BilliardsServiceAggregateArgs>): Prisma.PrismaPromise<GetBilliardsServiceAggregateType<T>>

    /**
     * Group by BilliardsService.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BilliardsServiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BilliardsServiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BilliardsServiceGroupByArgs['orderBy'] }
        : { orderBy?: BilliardsServiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BilliardsServiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBilliardsServiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BilliardsService model
   */
  readonly fields: BilliardsServiceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BilliardsService.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BilliardsServiceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BilliardsService model
   */ 
  interface BilliardsServiceFieldRefs {
    readonly id: FieldRef<"BilliardsService", 'Int'>
    readonly name: FieldRef<"BilliardsService", 'String'>
    readonly type: FieldRef<"BilliardsService", 'String'>
    readonly price: FieldRef<"BilliardsService", 'Decimal'>
    readonly description: FieldRef<"BilliardsService", 'String'>
    readonly imageUrl: FieldRef<"BilliardsService", 'String'>
    readonly isActive: FieldRef<"BilliardsService", 'Boolean'>
    readonly sortOrder: FieldRef<"BilliardsService", 'Int'>
    readonly createdAt: FieldRef<"BilliardsService", 'DateTime'>
    readonly updatedAt: FieldRef<"BilliardsService", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BilliardsService findUnique
   */
  export type BilliardsServiceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BilliardsService
     */
    select?: BilliardsServiceSelect<ExtArgs> | null
    /**
     * Filter, which BilliardsService to fetch.
     */
    where: BilliardsServiceWhereUniqueInput
  }

  /**
   * BilliardsService findUniqueOrThrow
   */
  export type BilliardsServiceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BilliardsService
     */
    select?: BilliardsServiceSelect<ExtArgs> | null
    /**
     * Filter, which BilliardsService to fetch.
     */
    where: BilliardsServiceWhereUniqueInput
  }

  /**
   * BilliardsService findFirst
   */
  export type BilliardsServiceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BilliardsService
     */
    select?: BilliardsServiceSelect<ExtArgs> | null
    /**
     * Filter, which BilliardsService to fetch.
     */
    where?: BilliardsServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BilliardsServices to fetch.
     */
    orderBy?: BilliardsServiceOrderByWithRelationInput | BilliardsServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BilliardsServices.
     */
    cursor?: BilliardsServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BilliardsServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BilliardsServices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BilliardsServices.
     */
    distinct?: BilliardsServiceScalarFieldEnum | BilliardsServiceScalarFieldEnum[]
  }

  /**
   * BilliardsService findFirstOrThrow
   */
  export type BilliardsServiceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BilliardsService
     */
    select?: BilliardsServiceSelect<ExtArgs> | null
    /**
     * Filter, which BilliardsService to fetch.
     */
    where?: BilliardsServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BilliardsServices to fetch.
     */
    orderBy?: BilliardsServiceOrderByWithRelationInput | BilliardsServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BilliardsServices.
     */
    cursor?: BilliardsServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BilliardsServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BilliardsServices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BilliardsServices.
     */
    distinct?: BilliardsServiceScalarFieldEnum | BilliardsServiceScalarFieldEnum[]
  }

  /**
   * BilliardsService findMany
   */
  export type BilliardsServiceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BilliardsService
     */
    select?: BilliardsServiceSelect<ExtArgs> | null
    /**
     * Filter, which BilliardsServices to fetch.
     */
    where?: BilliardsServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BilliardsServices to fetch.
     */
    orderBy?: BilliardsServiceOrderByWithRelationInput | BilliardsServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BilliardsServices.
     */
    cursor?: BilliardsServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BilliardsServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BilliardsServices.
     */
    skip?: number
    distinct?: BilliardsServiceScalarFieldEnum | BilliardsServiceScalarFieldEnum[]
  }

  /**
   * BilliardsService create
   */
  export type BilliardsServiceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BilliardsService
     */
    select?: BilliardsServiceSelect<ExtArgs> | null
    /**
     * The data needed to create a BilliardsService.
     */
    data: XOR<BilliardsServiceCreateInput, BilliardsServiceUncheckedCreateInput>
  }

  /**
   * BilliardsService createMany
   */
  export type BilliardsServiceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BilliardsServices.
     */
    data: BilliardsServiceCreateManyInput | BilliardsServiceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BilliardsService createManyAndReturn
   */
  export type BilliardsServiceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BilliardsService
     */
    select?: BilliardsServiceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many BilliardsServices.
     */
    data: BilliardsServiceCreateManyInput | BilliardsServiceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BilliardsService update
   */
  export type BilliardsServiceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BilliardsService
     */
    select?: BilliardsServiceSelect<ExtArgs> | null
    /**
     * The data needed to update a BilliardsService.
     */
    data: XOR<BilliardsServiceUpdateInput, BilliardsServiceUncheckedUpdateInput>
    /**
     * Choose, which BilliardsService to update.
     */
    where: BilliardsServiceWhereUniqueInput
  }

  /**
   * BilliardsService updateMany
   */
  export type BilliardsServiceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BilliardsServices.
     */
    data: XOR<BilliardsServiceUpdateManyMutationInput, BilliardsServiceUncheckedUpdateManyInput>
    /**
     * Filter which BilliardsServices to update
     */
    where?: BilliardsServiceWhereInput
  }

  /**
   * BilliardsService upsert
   */
  export type BilliardsServiceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BilliardsService
     */
    select?: BilliardsServiceSelect<ExtArgs> | null
    /**
     * The filter to search for the BilliardsService to update in case it exists.
     */
    where: BilliardsServiceWhereUniqueInput
    /**
     * In case the BilliardsService found by the `where` argument doesn't exist, create a new BilliardsService with this data.
     */
    create: XOR<BilliardsServiceCreateInput, BilliardsServiceUncheckedCreateInput>
    /**
     * In case the BilliardsService was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BilliardsServiceUpdateInput, BilliardsServiceUncheckedUpdateInput>
  }

  /**
   * BilliardsService delete
   */
  export type BilliardsServiceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BilliardsService
     */
    select?: BilliardsServiceSelect<ExtArgs> | null
    /**
     * Filter which BilliardsService to delete.
     */
    where: BilliardsServiceWhereUniqueInput
  }

  /**
   * BilliardsService deleteMany
   */
  export type BilliardsServiceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BilliardsServices to delete
     */
    where?: BilliardsServiceWhereInput
  }

  /**
   * BilliardsService without action
   */
  export type BilliardsServiceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BilliardsService
     */
    select?: BilliardsServiceSelect<ExtArgs> | null
  }


  /**
   * Model BilliardsSettings
   */

  export type AggregateBilliardsSettings = {
    _count: BilliardsSettingsCountAggregateOutputType | null
    _avg: BilliardsSettingsAvgAggregateOutputType | null
    _sum: BilliardsSettingsSumAggregateOutputType | null
    _min: BilliardsSettingsMinAggregateOutputType | null
    _max: BilliardsSettingsMaxAggregateOutputType | null
  }

  export type BilliardsSettingsAvgAggregateOutputType = {
    id: number | null
    bookingFee: Decimal | null
    bookingTimeoutMinutes: number | null
    minBookingDuration: number | null
    maxBookingDuration: number | null
  }

  export type BilliardsSettingsSumAggregateOutputType = {
    id: number | null
    bookingFee: Decimal | null
    bookingTimeoutMinutes: number | null
    minBookingDuration: number | null
    maxBookingDuration: number | null
  }

  export type BilliardsSettingsMinAggregateOutputType = {
    id: number | null
    bookingFee: Decimal | null
    bookingTimeoutMinutes: number | null
    minBookingDuration: number | null
    maxBookingDuration: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BilliardsSettingsMaxAggregateOutputType = {
    id: number | null
    bookingFee: Decimal | null
    bookingTimeoutMinutes: number | null
    minBookingDuration: number | null
    maxBookingDuration: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BilliardsSettingsCountAggregateOutputType = {
    id: number
    bookingFee: number
    bookingTimeoutMinutes: number
    minBookingDuration: number
    maxBookingDuration: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BilliardsSettingsAvgAggregateInputType = {
    id?: true
    bookingFee?: true
    bookingTimeoutMinutes?: true
    minBookingDuration?: true
    maxBookingDuration?: true
  }

  export type BilliardsSettingsSumAggregateInputType = {
    id?: true
    bookingFee?: true
    bookingTimeoutMinutes?: true
    minBookingDuration?: true
    maxBookingDuration?: true
  }

  export type BilliardsSettingsMinAggregateInputType = {
    id?: true
    bookingFee?: true
    bookingTimeoutMinutes?: true
    minBookingDuration?: true
    maxBookingDuration?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BilliardsSettingsMaxAggregateInputType = {
    id?: true
    bookingFee?: true
    bookingTimeoutMinutes?: true
    minBookingDuration?: true
    maxBookingDuration?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BilliardsSettingsCountAggregateInputType = {
    id?: true
    bookingFee?: true
    bookingTimeoutMinutes?: true
    minBookingDuration?: true
    maxBookingDuration?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BilliardsSettingsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BilliardsSettings to aggregate.
     */
    where?: BilliardsSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BilliardsSettings to fetch.
     */
    orderBy?: BilliardsSettingsOrderByWithRelationInput | BilliardsSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BilliardsSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BilliardsSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BilliardsSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BilliardsSettings
    **/
    _count?: true | BilliardsSettingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BilliardsSettingsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BilliardsSettingsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BilliardsSettingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BilliardsSettingsMaxAggregateInputType
  }

  export type GetBilliardsSettingsAggregateType<T extends BilliardsSettingsAggregateArgs> = {
        [P in keyof T & keyof AggregateBilliardsSettings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBilliardsSettings[P]>
      : GetScalarType<T[P], AggregateBilliardsSettings[P]>
  }




  export type BilliardsSettingsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BilliardsSettingsWhereInput
    orderBy?: BilliardsSettingsOrderByWithAggregationInput | BilliardsSettingsOrderByWithAggregationInput[]
    by: BilliardsSettingsScalarFieldEnum[] | BilliardsSettingsScalarFieldEnum
    having?: BilliardsSettingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BilliardsSettingsCountAggregateInputType | true
    _avg?: BilliardsSettingsAvgAggregateInputType
    _sum?: BilliardsSettingsSumAggregateInputType
    _min?: BilliardsSettingsMinAggregateInputType
    _max?: BilliardsSettingsMaxAggregateInputType
  }

  export type BilliardsSettingsGroupByOutputType = {
    id: number
    bookingFee: Decimal | null
    bookingTimeoutMinutes: number | null
    minBookingDuration: number | null
    maxBookingDuration: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    _count: BilliardsSettingsCountAggregateOutputType | null
    _avg: BilliardsSettingsAvgAggregateOutputType | null
    _sum: BilliardsSettingsSumAggregateOutputType | null
    _min: BilliardsSettingsMinAggregateOutputType | null
    _max: BilliardsSettingsMaxAggregateOutputType | null
  }

  type GetBilliardsSettingsGroupByPayload<T extends BilliardsSettingsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BilliardsSettingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BilliardsSettingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BilliardsSettingsGroupByOutputType[P]>
            : GetScalarType<T[P], BilliardsSettingsGroupByOutputType[P]>
        }
      >
    >


  export type BilliardsSettingsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bookingFee?: boolean
    bookingTimeoutMinutes?: boolean
    minBookingDuration?: boolean
    maxBookingDuration?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["billiardsSettings"]>

  export type BilliardsSettingsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bookingFee?: boolean
    bookingTimeoutMinutes?: boolean
    minBookingDuration?: boolean
    maxBookingDuration?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["billiardsSettings"]>

  export type BilliardsSettingsSelectScalar = {
    id?: boolean
    bookingFee?: boolean
    bookingTimeoutMinutes?: boolean
    minBookingDuration?: boolean
    maxBookingDuration?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $BilliardsSettingsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BilliardsSettings"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      bookingFee: Prisma.Decimal | null
      bookingTimeoutMinutes: number | null
      minBookingDuration: number | null
      maxBookingDuration: number | null
      isActive: boolean | null
      createdAt: Date | null
      updatedAt: Date | null
    }, ExtArgs["result"]["billiardsSettings"]>
    composites: {}
  }

  type BilliardsSettingsGetPayload<S extends boolean | null | undefined | BilliardsSettingsDefaultArgs> = $Result.GetResult<Prisma.$BilliardsSettingsPayload, S>

  type BilliardsSettingsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BilliardsSettingsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BilliardsSettingsCountAggregateInputType | true
    }

  export interface BilliardsSettingsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BilliardsSettings'], meta: { name: 'BilliardsSettings' } }
    /**
     * Find zero or one BilliardsSettings that matches the filter.
     * @param {BilliardsSettingsFindUniqueArgs} args - Arguments to find a BilliardsSettings
     * @example
     * // Get one BilliardsSettings
     * const billiardsSettings = await prisma.billiardsSettings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BilliardsSettingsFindUniqueArgs>(args: SelectSubset<T, BilliardsSettingsFindUniqueArgs<ExtArgs>>): Prisma__BilliardsSettingsClient<$Result.GetResult<Prisma.$BilliardsSettingsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one BilliardsSettings that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BilliardsSettingsFindUniqueOrThrowArgs} args - Arguments to find a BilliardsSettings
     * @example
     * // Get one BilliardsSettings
     * const billiardsSettings = await prisma.billiardsSettings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BilliardsSettingsFindUniqueOrThrowArgs>(args: SelectSubset<T, BilliardsSettingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BilliardsSettingsClient<$Result.GetResult<Prisma.$BilliardsSettingsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first BilliardsSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BilliardsSettingsFindFirstArgs} args - Arguments to find a BilliardsSettings
     * @example
     * // Get one BilliardsSettings
     * const billiardsSettings = await prisma.billiardsSettings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BilliardsSettingsFindFirstArgs>(args?: SelectSubset<T, BilliardsSettingsFindFirstArgs<ExtArgs>>): Prisma__BilliardsSettingsClient<$Result.GetResult<Prisma.$BilliardsSettingsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first BilliardsSettings that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BilliardsSettingsFindFirstOrThrowArgs} args - Arguments to find a BilliardsSettings
     * @example
     * // Get one BilliardsSettings
     * const billiardsSettings = await prisma.billiardsSettings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BilliardsSettingsFindFirstOrThrowArgs>(args?: SelectSubset<T, BilliardsSettingsFindFirstOrThrowArgs<ExtArgs>>): Prisma__BilliardsSettingsClient<$Result.GetResult<Prisma.$BilliardsSettingsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more BilliardsSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BilliardsSettingsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BilliardsSettings
     * const billiardsSettings = await prisma.billiardsSettings.findMany()
     * 
     * // Get first 10 BilliardsSettings
     * const billiardsSettings = await prisma.billiardsSettings.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const billiardsSettingsWithIdOnly = await prisma.billiardsSettings.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BilliardsSettingsFindManyArgs>(args?: SelectSubset<T, BilliardsSettingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BilliardsSettingsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a BilliardsSettings.
     * @param {BilliardsSettingsCreateArgs} args - Arguments to create a BilliardsSettings.
     * @example
     * // Create one BilliardsSettings
     * const BilliardsSettings = await prisma.billiardsSettings.create({
     *   data: {
     *     // ... data to create a BilliardsSettings
     *   }
     * })
     * 
     */
    create<T extends BilliardsSettingsCreateArgs>(args: SelectSubset<T, BilliardsSettingsCreateArgs<ExtArgs>>): Prisma__BilliardsSettingsClient<$Result.GetResult<Prisma.$BilliardsSettingsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many BilliardsSettings.
     * @param {BilliardsSettingsCreateManyArgs} args - Arguments to create many BilliardsSettings.
     * @example
     * // Create many BilliardsSettings
     * const billiardsSettings = await prisma.billiardsSettings.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BilliardsSettingsCreateManyArgs>(args?: SelectSubset<T, BilliardsSettingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BilliardsSettings and returns the data saved in the database.
     * @param {BilliardsSettingsCreateManyAndReturnArgs} args - Arguments to create many BilliardsSettings.
     * @example
     * // Create many BilliardsSettings
     * const billiardsSettings = await prisma.billiardsSettings.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BilliardsSettings and only return the `id`
     * const billiardsSettingsWithIdOnly = await prisma.billiardsSettings.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BilliardsSettingsCreateManyAndReturnArgs>(args?: SelectSubset<T, BilliardsSettingsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BilliardsSettingsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a BilliardsSettings.
     * @param {BilliardsSettingsDeleteArgs} args - Arguments to delete one BilliardsSettings.
     * @example
     * // Delete one BilliardsSettings
     * const BilliardsSettings = await prisma.billiardsSettings.delete({
     *   where: {
     *     // ... filter to delete one BilliardsSettings
     *   }
     * })
     * 
     */
    delete<T extends BilliardsSettingsDeleteArgs>(args: SelectSubset<T, BilliardsSettingsDeleteArgs<ExtArgs>>): Prisma__BilliardsSettingsClient<$Result.GetResult<Prisma.$BilliardsSettingsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one BilliardsSettings.
     * @param {BilliardsSettingsUpdateArgs} args - Arguments to update one BilliardsSettings.
     * @example
     * // Update one BilliardsSettings
     * const billiardsSettings = await prisma.billiardsSettings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BilliardsSettingsUpdateArgs>(args: SelectSubset<T, BilliardsSettingsUpdateArgs<ExtArgs>>): Prisma__BilliardsSettingsClient<$Result.GetResult<Prisma.$BilliardsSettingsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more BilliardsSettings.
     * @param {BilliardsSettingsDeleteManyArgs} args - Arguments to filter BilliardsSettings to delete.
     * @example
     * // Delete a few BilliardsSettings
     * const { count } = await prisma.billiardsSettings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BilliardsSettingsDeleteManyArgs>(args?: SelectSubset<T, BilliardsSettingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BilliardsSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BilliardsSettingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BilliardsSettings
     * const billiardsSettings = await prisma.billiardsSettings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BilliardsSettingsUpdateManyArgs>(args: SelectSubset<T, BilliardsSettingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BilliardsSettings.
     * @param {BilliardsSettingsUpsertArgs} args - Arguments to update or create a BilliardsSettings.
     * @example
     * // Update or create a BilliardsSettings
     * const billiardsSettings = await prisma.billiardsSettings.upsert({
     *   create: {
     *     // ... data to create a BilliardsSettings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BilliardsSettings we want to update
     *   }
     * })
     */
    upsert<T extends BilliardsSettingsUpsertArgs>(args: SelectSubset<T, BilliardsSettingsUpsertArgs<ExtArgs>>): Prisma__BilliardsSettingsClient<$Result.GetResult<Prisma.$BilliardsSettingsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of BilliardsSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BilliardsSettingsCountArgs} args - Arguments to filter BilliardsSettings to count.
     * @example
     * // Count the number of BilliardsSettings
     * const count = await prisma.billiardsSettings.count({
     *   where: {
     *     // ... the filter for the BilliardsSettings we want to count
     *   }
     * })
    **/
    count<T extends BilliardsSettingsCountArgs>(
      args?: Subset<T, BilliardsSettingsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BilliardsSettingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BilliardsSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BilliardsSettingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BilliardsSettingsAggregateArgs>(args: Subset<T, BilliardsSettingsAggregateArgs>): Prisma.PrismaPromise<GetBilliardsSettingsAggregateType<T>>

    /**
     * Group by BilliardsSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BilliardsSettingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BilliardsSettingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BilliardsSettingsGroupByArgs['orderBy'] }
        : { orderBy?: BilliardsSettingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BilliardsSettingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBilliardsSettingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BilliardsSettings model
   */
  readonly fields: BilliardsSettingsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BilliardsSettings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BilliardsSettingsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BilliardsSettings model
   */ 
  interface BilliardsSettingsFieldRefs {
    readonly id: FieldRef<"BilliardsSettings", 'Int'>
    readonly bookingFee: FieldRef<"BilliardsSettings", 'Decimal'>
    readonly bookingTimeoutMinutes: FieldRef<"BilliardsSettings", 'Int'>
    readonly minBookingDuration: FieldRef<"BilliardsSettings", 'Int'>
    readonly maxBookingDuration: FieldRef<"BilliardsSettings", 'Int'>
    readonly isActive: FieldRef<"BilliardsSettings", 'Boolean'>
    readonly createdAt: FieldRef<"BilliardsSettings", 'DateTime'>
    readonly updatedAt: FieldRef<"BilliardsSettings", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BilliardsSettings findUnique
   */
  export type BilliardsSettingsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BilliardsSettings
     */
    select?: BilliardsSettingsSelect<ExtArgs> | null
    /**
     * Filter, which BilliardsSettings to fetch.
     */
    where: BilliardsSettingsWhereUniqueInput
  }

  /**
   * BilliardsSettings findUniqueOrThrow
   */
  export type BilliardsSettingsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BilliardsSettings
     */
    select?: BilliardsSettingsSelect<ExtArgs> | null
    /**
     * Filter, which BilliardsSettings to fetch.
     */
    where: BilliardsSettingsWhereUniqueInput
  }

  /**
   * BilliardsSettings findFirst
   */
  export type BilliardsSettingsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BilliardsSettings
     */
    select?: BilliardsSettingsSelect<ExtArgs> | null
    /**
     * Filter, which BilliardsSettings to fetch.
     */
    where?: BilliardsSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BilliardsSettings to fetch.
     */
    orderBy?: BilliardsSettingsOrderByWithRelationInput | BilliardsSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BilliardsSettings.
     */
    cursor?: BilliardsSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BilliardsSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BilliardsSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BilliardsSettings.
     */
    distinct?: BilliardsSettingsScalarFieldEnum | BilliardsSettingsScalarFieldEnum[]
  }

  /**
   * BilliardsSettings findFirstOrThrow
   */
  export type BilliardsSettingsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BilliardsSettings
     */
    select?: BilliardsSettingsSelect<ExtArgs> | null
    /**
     * Filter, which BilliardsSettings to fetch.
     */
    where?: BilliardsSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BilliardsSettings to fetch.
     */
    orderBy?: BilliardsSettingsOrderByWithRelationInput | BilliardsSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BilliardsSettings.
     */
    cursor?: BilliardsSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BilliardsSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BilliardsSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BilliardsSettings.
     */
    distinct?: BilliardsSettingsScalarFieldEnum | BilliardsSettingsScalarFieldEnum[]
  }

  /**
   * BilliardsSettings findMany
   */
  export type BilliardsSettingsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BilliardsSettings
     */
    select?: BilliardsSettingsSelect<ExtArgs> | null
    /**
     * Filter, which BilliardsSettings to fetch.
     */
    where?: BilliardsSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BilliardsSettings to fetch.
     */
    orderBy?: BilliardsSettingsOrderByWithRelationInput | BilliardsSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BilliardsSettings.
     */
    cursor?: BilliardsSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BilliardsSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BilliardsSettings.
     */
    skip?: number
    distinct?: BilliardsSettingsScalarFieldEnum | BilliardsSettingsScalarFieldEnum[]
  }

  /**
   * BilliardsSettings create
   */
  export type BilliardsSettingsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BilliardsSettings
     */
    select?: BilliardsSettingsSelect<ExtArgs> | null
    /**
     * The data needed to create a BilliardsSettings.
     */
    data?: XOR<BilliardsSettingsCreateInput, BilliardsSettingsUncheckedCreateInput>
  }

  /**
   * BilliardsSettings createMany
   */
  export type BilliardsSettingsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BilliardsSettings.
     */
    data: BilliardsSettingsCreateManyInput | BilliardsSettingsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BilliardsSettings createManyAndReturn
   */
  export type BilliardsSettingsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BilliardsSettings
     */
    select?: BilliardsSettingsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many BilliardsSettings.
     */
    data: BilliardsSettingsCreateManyInput | BilliardsSettingsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BilliardsSettings update
   */
  export type BilliardsSettingsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BilliardsSettings
     */
    select?: BilliardsSettingsSelect<ExtArgs> | null
    /**
     * The data needed to update a BilliardsSettings.
     */
    data: XOR<BilliardsSettingsUpdateInput, BilliardsSettingsUncheckedUpdateInput>
    /**
     * Choose, which BilliardsSettings to update.
     */
    where: BilliardsSettingsWhereUniqueInput
  }

  /**
   * BilliardsSettings updateMany
   */
  export type BilliardsSettingsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BilliardsSettings.
     */
    data: XOR<BilliardsSettingsUpdateManyMutationInput, BilliardsSettingsUncheckedUpdateManyInput>
    /**
     * Filter which BilliardsSettings to update
     */
    where?: BilliardsSettingsWhereInput
  }

  /**
   * BilliardsSettings upsert
   */
  export type BilliardsSettingsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BilliardsSettings
     */
    select?: BilliardsSettingsSelect<ExtArgs> | null
    /**
     * The filter to search for the BilliardsSettings to update in case it exists.
     */
    where: BilliardsSettingsWhereUniqueInput
    /**
     * In case the BilliardsSettings found by the `where` argument doesn't exist, create a new BilliardsSettings with this data.
     */
    create: XOR<BilliardsSettingsCreateInput, BilliardsSettingsUncheckedCreateInput>
    /**
     * In case the BilliardsSettings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BilliardsSettingsUpdateInput, BilliardsSettingsUncheckedUpdateInput>
  }

  /**
   * BilliardsSettings delete
   */
  export type BilliardsSettingsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BilliardsSettings
     */
    select?: BilliardsSettingsSelect<ExtArgs> | null
    /**
     * Filter which BilliardsSettings to delete.
     */
    where: BilliardsSettingsWhereUniqueInput
  }

  /**
   * BilliardsSettings deleteMany
   */
  export type BilliardsSettingsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BilliardsSettings to delete
     */
    where?: BilliardsSettingsWhereInput
  }

  /**
   * BilliardsSettings without action
   */
  export type BilliardsSettingsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BilliardsSettings
     */
    select?: BilliardsSettingsSelect<ExtArgs> | null
  }


  /**
   * Model KaraokeService
   */

  export type AggregateKaraokeService = {
    _count: KaraokeServiceCountAggregateOutputType | null
    _avg: KaraokeServiceAvgAggregateOutputType | null
    _sum: KaraokeServiceSumAggregateOutputType | null
    _min: KaraokeServiceMinAggregateOutputType | null
    _max: KaraokeServiceMaxAggregateOutputType | null
  }

  export type KaraokeServiceAvgAggregateOutputType = {
    id: number | null
    price: Decimal | null
    sortOrder: number | null
  }

  export type KaraokeServiceSumAggregateOutputType = {
    id: number | null
    price: Decimal | null
    sortOrder: number | null
  }

  export type KaraokeServiceMinAggregateOutputType = {
    id: number | null
    name: string | null
    type: string | null
    price: Decimal | null
    description: string | null
    imageUrl: string | null
    isActive: boolean | null
    sortOrder: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type KaraokeServiceMaxAggregateOutputType = {
    id: number | null
    name: string | null
    type: string | null
    price: Decimal | null
    description: string | null
    imageUrl: string | null
    isActive: boolean | null
    sortOrder: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type KaraokeServiceCountAggregateOutputType = {
    id: number
    name: number
    type: number
    price: number
    description: number
    imageUrl: number
    isActive: number
    sortOrder: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type KaraokeServiceAvgAggregateInputType = {
    id?: true
    price?: true
    sortOrder?: true
  }

  export type KaraokeServiceSumAggregateInputType = {
    id?: true
    price?: true
    sortOrder?: true
  }

  export type KaraokeServiceMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    price?: true
    description?: true
    imageUrl?: true
    isActive?: true
    sortOrder?: true
    createdAt?: true
    updatedAt?: true
  }

  export type KaraokeServiceMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    price?: true
    description?: true
    imageUrl?: true
    isActive?: true
    sortOrder?: true
    createdAt?: true
    updatedAt?: true
  }

  export type KaraokeServiceCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    price?: true
    description?: true
    imageUrl?: true
    isActive?: true
    sortOrder?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type KaraokeServiceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KaraokeService to aggregate.
     */
    where?: KaraokeServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KaraokeServices to fetch.
     */
    orderBy?: KaraokeServiceOrderByWithRelationInput | KaraokeServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KaraokeServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KaraokeServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KaraokeServices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned KaraokeServices
    **/
    _count?: true | KaraokeServiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KaraokeServiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KaraokeServiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KaraokeServiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KaraokeServiceMaxAggregateInputType
  }

  export type GetKaraokeServiceAggregateType<T extends KaraokeServiceAggregateArgs> = {
        [P in keyof T & keyof AggregateKaraokeService]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKaraokeService[P]>
      : GetScalarType<T[P], AggregateKaraokeService[P]>
  }




  export type KaraokeServiceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KaraokeServiceWhereInput
    orderBy?: KaraokeServiceOrderByWithAggregationInput | KaraokeServiceOrderByWithAggregationInput[]
    by: KaraokeServiceScalarFieldEnum[] | KaraokeServiceScalarFieldEnum
    having?: KaraokeServiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KaraokeServiceCountAggregateInputType | true
    _avg?: KaraokeServiceAvgAggregateInputType
    _sum?: KaraokeServiceSumAggregateInputType
    _min?: KaraokeServiceMinAggregateInputType
    _max?: KaraokeServiceMaxAggregateInputType
  }

  export type KaraokeServiceGroupByOutputType = {
    id: number
    name: string
    type: string
    price: Decimal
    description: string | null
    imageUrl: string | null
    isActive: boolean | null
    sortOrder: number | null
    createdAt: Date | null
    updatedAt: Date | null
    _count: KaraokeServiceCountAggregateOutputType | null
    _avg: KaraokeServiceAvgAggregateOutputType | null
    _sum: KaraokeServiceSumAggregateOutputType | null
    _min: KaraokeServiceMinAggregateOutputType | null
    _max: KaraokeServiceMaxAggregateOutputType | null
  }

  type GetKaraokeServiceGroupByPayload<T extends KaraokeServiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KaraokeServiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KaraokeServiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KaraokeServiceGroupByOutputType[P]>
            : GetScalarType<T[P], KaraokeServiceGroupByOutputType[P]>
        }
      >
    >


  export type KaraokeServiceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    price?: boolean
    description?: boolean
    imageUrl?: boolean
    isActive?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["karaokeService"]>

  export type KaraokeServiceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    price?: boolean
    description?: boolean
    imageUrl?: boolean
    isActive?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["karaokeService"]>

  export type KaraokeServiceSelectScalar = {
    id?: boolean
    name?: boolean
    type?: boolean
    price?: boolean
    description?: boolean
    imageUrl?: boolean
    isActive?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $KaraokeServicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "KaraokeService"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      type: string
      price: Prisma.Decimal
      description: string | null
      imageUrl: string | null
      isActive: boolean | null
      sortOrder: number | null
      createdAt: Date | null
      updatedAt: Date | null
    }, ExtArgs["result"]["karaokeService"]>
    composites: {}
  }

  type KaraokeServiceGetPayload<S extends boolean | null | undefined | KaraokeServiceDefaultArgs> = $Result.GetResult<Prisma.$KaraokeServicePayload, S>

  type KaraokeServiceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<KaraokeServiceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: KaraokeServiceCountAggregateInputType | true
    }

  export interface KaraokeServiceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['KaraokeService'], meta: { name: 'KaraokeService' } }
    /**
     * Find zero or one KaraokeService that matches the filter.
     * @param {KaraokeServiceFindUniqueArgs} args - Arguments to find a KaraokeService
     * @example
     * // Get one KaraokeService
     * const karaokeService = await prisma.karaokeService.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends KaraokeServiceFindUniqueArgs>(args: SelectSubset<T, KaraokeServiceFindUniqueArgs<ExtArgs>>): Prisma__KaraokeServiceClient<$Result.GetResult<Prisma.$KaraokeServicePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one KaraokeService that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {KaraokeServiceFindUniqueOrThrowArgs} args - Arguments to find a KaraokeService
     * @example
     * // Get one KaraokeService
     * const karaokeService = await prisma.karaokeService.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends KaraokeServiceFindUniqueOrThrowArgs>(args: SelectSubset<T, KaraokeServiceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__KaraokeServiceClient<$Result.GetResult<Prisma.$KaraokeServicePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first KaraokeService that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KaraokeServiceFindFirstArgs} args - Arguments to find a KaraokeService
     * @example
     * // Get one KaraokeService
     * const karaokeService = await prisma.karaokeService.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends KaraokeServiceFindFirstArgs>(args?: SelectSubset<T, KaraokeServiceFindFirstArgs<ExtArgs>>): Prisma__KaraokeServiceClient<$Result.GetResult<Prisma.$KaraokeServicePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first KaraokeService that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KaraokeServiceFindFirstOrThrowArgs} args - Arguments to find a KaraokeService
     * @example
     * // Get one KaraokeService
     * const karaokeService = await prisma.karaokeService.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends KaraokeServiceFindFirstOrThrowArgs>(args?: SelectSubset<T, KaraokeServiceFindFirstOrThrowArgs<ExtArgs>>): Prisma__KaraokeServiceClient<$Result.GetResult<Prisma.$KaraokeServicePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more KaraokeServices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KaraokeServiceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all KaraokeServices
     * const karaokeServices = await prisma.karaokeService.findMany()
     * 
     * // Get first 10 KaraokeServices
     * const karaokeServices = await prisma.karaokeService.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const karaokeServiceWithIdOnly = await prisma.karaokeService.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends KaraokeServiceFindManyArgs>(args?: SelectSubset<T, KaraokeServiceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KaraokeServicePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a KaraokeService.
     * @param {KaraokeServiceCreateArgs} args - Arguments to create a KaraokeService.
     * @example
     * // Create one KaraokeService
     * const KaraokeService = await prisma.karaokeService.create({
     *   data: {
     *     // ... data to create a KaraokeService
     *   }
     * })
     * 
     */
    create<T extends KaraokeServiceCreateArgs>(args: SelectSubset<T, KaraokeServiceCreateArgs<ExtArgs>>): Prisma__KaraokeServiceClient<$Result.GetResult<Prisma.$KaraokeServicePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many KaraokeServices.
     * @param {KaraokeServiceCreateManyArgs} args - Arguments to create many KaraokeServices.
     * @example
     * // Create many KaraokeServices
     * const karaokeService = await prisma.karaokeService.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends KaraokeServiceCreateManyArgs>(args?: SelectSubset<T, KaraokeServiceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many KaraokeServices and returns the data saved in the database.
     * @param {KaraokeServiceCreateManyAndReturnArgs} args - Arguments to create many KaraokeServices.
     * @example
     * // Create many KaraokeServices
     * const karaokeService = await prisma.karaokeService.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many KaraokeServices and only return the `id`
     * const karaokeServiceWithIdOnly = await prisma.karaokeService.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends KaraokeServiceCreateManyAndReturnArgs>(args?: SelectSubset<T, KaraokeServiceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KaraokeServicePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a KaraokeService.
     * @param {KaraokeServiceDeleteArgs} args - Arguments to delete one KaraokeService.
     * @example
     * // Delete one KaraokeService
     * const KaraokeService = await prisma.karaokeService.delete({
     *   where: {
     *     // ... filter to delete one KaraokeService
     *   }
     * })
     * 
     */
    delete<T extends KaraokeServiceDeleteArgs>(args: SelectSubset<T, KaraokeServiceDeleteArgs<ExtArgs>>): Prisma__KaraokeServiceClient<$Result.GetResult<Prisma.$KaraokeServicePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one KaraokeService.
     * @param {KaraokeServiceUpdateArgs} args - Arguments to update one KaraokeService.
     * @example
     * // Update one KaraokeService
     * const karaokeService = await prisma.karaokeService.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends KaraokeServiceUpdateArgs>(args: SelectSubset<T, KaraokeServiceUpdateArgs<ExtArgs>>): Prisma__KaraokeServiceClient<$Result.GetResult<Prisma.$KaraokeServicePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more KaraokeServices.
     * @param {KaraokeServiceDeleteManyArgs} args - Arguments to filter KaraokeServices to delete.
     * @example
     * // Delete a few KaraokeServices
     * const { count } = await prisma.karaokeService.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends KaraokeServiceDeleteManyArgs>(args?: SelectSubset<T, KaraokeServiceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KaraokeServices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KaraokeServiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many KaraokeServices
     * const karaokeService = await prisma.karaokeService.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends KaraokeServiceUpdateManyArgs>(args: SelectSubset<T, KaraokeServiceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one KaraokeService.
     * @param {KaraokeServiceUpsertArgs} args - Arguments to update or create a KaraokeService.
     * @example
     * // Update or create a KaraokeService
     * const karaokeService = await prisma.karaokeService.upsert({
     *   create: {
     *     // ... data to create a KaraokeService
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the KaraokeService we want to update
     *   }
     * })
     */
    upsert<T extends KaraokeServiceUpsertArgs>(args: SelectSubset<T, KaraokeServiceUpsertArgs<ExtArgs>>): Prisma__KaraokeServiceClient<$Result.GetResult<Prisma.$KaraokeServicePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of KaraokeServices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KaraokeServiceCountArgs} args - Arguments to filter KaraokeServices to count.
     * @example
     * // Count the number of KaraokeServices
     * const count = await prisma.karaokeService.count({
     *   where: {
     *     // ... the filter for the KaraokeServices we want to count
     *   }
     * })
    **/
    count<T extends KaraokeServiceCountArgs>(
      args?: Subset<T, KaraokeServiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KaraokeServiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a KaraokeService.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KaraokeServiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KaraokeServiceAggregateArgs>(args: Subset<T, KaraokeServiceAggregateArgs>): Prisma.PrismaPromise<GetKaraokeServiceAggregateType<T>>

    /**
     * Group by KaraokeService.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KaraokeServiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KaraokeServiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KaraokeServiceGroupByArgs['orderBy'] }
        : { orderBy?: KaraokeServiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KaraokeServiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKaraokeServiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the KaraokeService model
   */
  readonly fields: KaraokeServiceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for KaraokeService.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KaraokeServiceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the KaraokeService model
   */ 
  interface KaraokeServiceFieldRefs {
    readonly id: FieldRef<"KaraokeService", 'Int'>
    readonly name: FieldRef<"KaraokeService", 'String'>
    readonly type: FieldRef<"KaraokeService", 'String'>
    readonly price: FieldRef<"KaraokeService", 'Decimal'>
    readonly description: FieldRef<"KaraokeService", 'String'>
    readonly imageUrl: FieldRef<"KaraokeService", 'String'>
    readonly isActive: FieldRef<"KaraokeService", 'Boolean'>
    readonly sortOrder: FieldRef<"KaraokeService", 'Int'>
    readonly createdAt: FieldRef<"KaraokeService", 'DateTime'>
    readonly updatedAt: FieldRef<"KaraokeService", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * KaraokeService findUnique
   */
  export type KaraokeServiceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KaraokeService
     */
    select?: KaraokeServiceSelect<ExtArgs> | null
    /**
     * Filter, which KaraokeService to fetch.
     */
    where: KaraokeServiceWhereUniqueInput
  }

  /**
   * KaraokeService findUniqueOrThrow
   */
  export type KaraokeServiceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KaraokeService
     */
    select?: KaraokeServiceSelect<ExtArgs> | null
    /**
     * Filter, which KaraokeService to fetch.
     */
    where: KaraokeServiceWhereUniqueInput
  }

  /**
   * KaraokeService findFirst
   */
  export type KaraokeServiceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KaraokeService
     */
    select?: KaraokeServiceSelect<ExtArgs> | null
    /**
     * Filter, which KaraokeService to fetch.
     */
    where?: KaraokeServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KaraokeServices to fetch.
     */
    orderBy?: KaraokeServiceOrderByWithRelationInput | KaraokeServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KaraokeServices.
     */
    cursor?: KaraokeServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KaraokeServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KaraokeServices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KaraokeServices.
     */
    distinct?: KaraokeServiceScalarFieldEnum | KaraokeServiceScalarFieldEnum[]
  }

  /**
   * KaraokeService findFirstOrThrow
   */
  export type KaraokeServiceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KaraokeService
     */
    select?: KaraokeServiceSelect<ExtArgs> | null
    /**
     * Filter, which KaraokeService to fetch.
     */
    where?: KaraokeServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KaraokeServices to fetch.
     */
    orderBy?: KaraokeServiceOrderByWithRelationInput | KaraokeServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KaraokeServices.
     */
    cursor?: KaraokeServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KaraokeServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KaraokeServices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KaraokeServices.
     */
    distinct?: KaraokeServiceScalarFieldEnum | KaraokeServiceScalarFieldEnum[]
  }

  /**
   * KaraokeService findMany
   */
  export type KaraokeServiceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KaraokeService
     */
    select?: KaraokeServiceSelect<ExtArgs> | null
    /**
     * Filter, which KaraokeServices to fetch.
     */
    where?: KaraokeServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KaraokeServices to fetch.
     */
    orderBy?: KaraokeServiceOrderByWithRelationInput | KaraokeServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing KaraokeServices.
     */
    cursor?: KaraokeServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KaraokeServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KaraokeServices.
     */
    skip?: number
    distinct?: KaraokeServiceScalarFieldEnum | KaraokeServiceScalarFieldEnum[]
  }

  /**
   * KaraokeService create
   */
  export type KaraokeServiceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KaraokeService
     */
    select?: KaraokeServiceSelect<ExtArgs> | null
    /**
     * The data needed to create a KaraokeService.
     */
    data: XOR<KaraokeServiceCreateInput, KaraokeServiceUncheckedCreateInput>
  }

  /**
   * KaraokeService createMany
   */
  export type KaraokeServiceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many KaraokeServices.
     */
    data: KaraokeServiceCreateManyInput | KaraokeServiceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * KaraokeService createManyAndReturn
   */
  export type KaraokeServiceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KaraokeService
     */
    select?: KaraokeServiceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many KaraokeServices.
     */
    data: KaraokeServiceCreateManyInput | KaraokeServiceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * KaraokeService update
   */
  export type KaraokeServiceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KaraokeService
     */
    select?: KaraokeServiceSelect<ExtArgs> | null
    /**
     * The data needed to update a KaraokeService.
     */
    data: XOR<KaraokeServiceUpdateInput, KaraokeServiceUncheckedUpdateInput>
    /**
     * Choose, which KaraokeService to update.
     */
    where: KaraokeServiceWhereUniqueInput
  }

  /**
   * KaraokeService updateMany
   */
  export type KaraokeServiceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update KaraokeServices.
     */
    data: XOR<KaraokeServiceUpdateManyMutationInput, KaraokeServiceUncheckedUpdateManyInput>
    /**
     * Filter which KaraokeServices to update
     */
    where?: KaraokeServiceWhereInput
  }

  /**
   * KaraokeService upsert
   */
  export type KaraokeServiceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KaraokeService
     */
    select?: KaraokeServiceSelect<ExtArgs> | null
    /**
     * The filter to search for the KaraokeService to update in case it exists.
     */
    where: KaraokeServiceWhereUniqueInput
    /**
     * In case the KaraokeService found by the `where` argument doesn't exist, create a new KaraokeService with this data.
     */
    create: XOR<KaraokeServiceCreateInput, KaraokeServiceUncheckedCreateInput>
    /**
     * In case the KaraokeService was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KaraokeServiceUpdateInput, KaraokeServiceUncheckedUpdateInput>
  }

  /**
   * KaraokeService delete
   */
  export type KaraokeServiceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KaraokeService
     */
    select?: KaraokeServiceSelect<ExtArgs> | null
    /**
     * Filter which KaraokeService to delete.
     */
    where: KaraokeServiceWhereUniqueInput
  }

  /**
   * KaraokeService deleteMany
   */
  export type KaraokeServiceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KaraokeServices to delete
     */
    where?: KaraokeServiceWhereInput
  }

  /**
   * KaraokeService without action
   */
  export type KaraokeServiceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KaraokeService
     */
    select?: KaraokeServiceSelect<ExtArgs> | null
  }


  /**
   * Model KaraokeSettings
   */

  export type AggregateKaraokeSettings = {
    _count: KaraokeSettingsCountAggregateOutputType | null
    _avg: KaraokeSettingsAvgAggregateOutputType | null
    _sum: KaraokeSettingsSumAggregateOutputType | null
    _min: KaraokeSettingsMinAggregateOutputType | null
    _max: KaraokeSettingsMaxAggregateOutputType | null
  }

  export type KaraokeSettingsAvgAggregateOutputType = {
    id: number | null
    maxVipGuests: number | null
    baseVipPrice: Decimal | null
    additionalGuestPrice: Decimal | null
  }

  export type KaraokeSettingsSumAggregateOutputType = {
    id: number | null
    maxVipGuests: number | null
    baseVipPrice: Decimal | null
    additionalGuestPrice: Decimal | null
  }

  export type KaraokeSettingsMinAggregateOutputType = {
    id: number | null
    maxVipGuests: number | null
    baseVipPrice: Decimal | null
    additionalGuestPrice: Decimal | null
    depositPolicy: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type KaraokeSettingsMaxAggregateOutputType = {
    id: number | null
    maxVipGuests: number | null
    baseVipPrice: Decimal | null
    additionalGuestPrice: Decimal | null
    depositPolicy: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type KaraokeSettingsCountAggregateOutputType = {
    id: number
    maxVipGuests: number
    baseVipPrice: number
    additionalGuestPrice: number
    depositPolicy: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type KaraokeSettingsAvgAggregateInputType = {
    id?: true
    maxVipGuests?: true
    baseVipPrice?: true
    additionalGuestPrice?: true
  }

  export type KaraokeSettingsSumAggregateInputType = {
    id?: true
    maxVipGuests?: true
    baseVipPrice?: true
    additionalGuestPrice?: true
  }

  export type KaraokeSettingsMinAggregateInputType = {
    id?: true
    maxVipGuests?: true
    baseVipPrice?: true
    additionalGuestPrice?: true
    depositPolicy?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type KaraokeSettingsMaxAggregateInputType = {
    id?: true
    maxVipGuests?: true
    baseVipPrice?: true
    additionalGuestPrice?: true
    depositPolicy?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type KaraokeSettingsCountAggregateInputType = {
    id?: true
    maxVipGuests?: true
    baseVipPrice?: true
    additionalGuestPrice?: true
    depositPolicy?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type KaraokeSettingsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KaraokeSettings to aggregate.
     */
    where?: KaraokeSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KaraokeSettings to fetch.
     */
    orderBy?: KaraokeSettingsOrderByWithRelationInput | KaraokeSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KaraokeSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KaraokeSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KaraokeSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned KaraokeSettings
    **/
    _count?: true | KaraokeSettingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KaraokeSettingsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KaraokeSettingsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KaraokeSettingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KaraokeSettingsMaxAggregateInputType
  }

  export type GetKaraokeSettingsAggregateType<T extends KaraokeSettingsAggregateArgs> = {
        [P in keyof T & keyof AggregateKaraokeSettings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKaraokeSettings[P]>
      : GetScalarType<T[P], AggregateKaraokeSettings[P]>
  }




  export type KaraokeSettingsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KaraokeSettingsWhereInput
    orderBy?: KaraokeSettingsOrderByWithAggregationInput | KaraokeSettingsOrderByWithAggregationInput[]
    by: KaraokeSettingsScalarFieldEnum[] | KaraokeSettingsScalarFieldEnum
    having?: KaraokeSettingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KaraokeSettingsCountAggregateInputType | true
    _avg?: KaraokeSettingsAvgAggregateInputType
    _sum?: KaraokeSettingsSumAggregateInputType
    _min?: KaraokeSettingsMinAggregateInputType
    _max?: KaraokeSettingsMaxAggregateInputType
  }

  export type KaraokeSettingsGroupByOutputType = {
    id: number
    maxVipGuests: number | null
    baseVipPrice: Decimal | null
    additionalGuestPrice: Decimal | null
    depositPolicy: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    _count: KaraokeSettingsCountAggregateOutputType | null
    _avg: KaraokeSettingsAvgAggregateOutputType | null
    _sum: KaraokeSettingsSumAggregateOutputType | null
    _min: KaraokeSettingsMinAggregateOutputType | null
    _max: KaraokeSettingsMaxAggregateOutputType | null
  }

  type GetKaraokeSettingsGroupByPayload<T extends KaraokeSettingsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KaraokeSettingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KaraokeSettingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KaraokeSettingsGroupByOutputType[P]>
            : GetScalarType<T[P], KaraokeSettingsGroupByOutputType[P]>
        }
      >
    >


  export type KaraokeSettingsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    maxVipGuests?: boolean
    baseVipPrice?: boolean
    additionalGuestPrice?: boolean
    depositPolicy?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["karaokeSettings"]>

  export type KaraokeSettingsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    maxVipGuests?: boolean
    baseVipPrice?: boolean
    additionalGuestPrice?: boolean
    depositPolicy?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["karaokeSettings"]>

  export type KaraokeSettingsSelectScalar = {
    id?: boolean
    maxVipGuests?: boolean
    baseVipPrice?: boolean
    additionalGuestPrice?: boolean
    depositPolicy?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $KaraokeSettingsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "KaraokeSettings"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      maxVipGuests: number | null
      baseVipPrice: Prisma.Decimal | null
      additionalGuestPrice: Prisma.Decimal | null
      depositPolicy: string | null
      isActive: boolean | null
      createdAt: Date | null
      updatedAt: Date | null
    }, ExtArgs["result"]["karaokeSettings"]>
    composites: {}
  }

  type KaraokeSettingsGetPayload<S extends boolean | null | undefined | KaraokeSettingsDefaultArgs> = $Result.GetResult<Prisma.$KaraokeSettingsPayload, S>

  type KaraokeSettingsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<KaraokeSettingsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: KaraokeSettingsCountAggregateInputType | true
    }

  export interface KaraokeSettingsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['KaraokeSettings'], meta: { name: 'KaraokeSettings' } }
    /**
     * Find zero or one KaraokeSettings that matches the filter.
     * @param {KaraokeSettingsFindUniqueArgs} args - Arguments to find a KaraokeSettings
     * @example
     * // Get one KaraokeSettings
     * const karaokeSettings = await prisma.karaokeSettings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends KaraokeSettingsFindUniqueArgs>(args: SelectSubset<T, KaraokeSettingsFindUniqueArgs<ExtArgs>>): Prisma__KaraokeSettingsClient<$Result.GetResult<Prisma.$KaraokeSettingsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one KaraokeSettings that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {KaraokeSettingsFindUniqueOrThrowArgs} args - Arguments to find a KaraokeSettings
     * @example
     * // Get one KaraokeSettings
     * const karaokeSettings = await prisma.karaokeSettings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends KaraokeSettingsFindUniqueOrThrowArgs>(args: SelectSubset<T, KaraokeSettingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__KaraokeSettingsClient<$Result.GetResult<Prisma.$KaraokeSettingsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first KaraokeSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KaraokeSettingsFindFirstArgs} args - Arguments to find a KaraokeSettings
     * @example
     * // Get one KaraokeSettings
     * const karaokeSettings = await prisma.karaokeSettings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends KaraokeSettingsFindFirstArgs>(args?: SelectSubset<T, KaraokeSettingsFindFirstArgs<ExtArgs>>): Prisma__KaraokeSettingsClient<$Result.GetResult<Prisma.$KaraokeSettingsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first KaraokeSettings that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KaraokeSettingsFindFirstOrThrowArgs} args - Arguments to find a KaraokeSettings
     * @example
     * // Get one KaraokeSettings
     * const karaokeSettings = await prisma.karaokeSettings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends KaraokeSettingsFindFirstOrThrowArgs>(args?: SelectSubset<T, KaraokeSettingsFindFirstOrThrowArgs<ExtArgs>>): Prisma__KaraokeSettingsClient<$Result.GetResult<Prisma.$KaraokeSettingsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more KaraokeSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KaraokeSettingsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all KaraokeSettings
     * const karaokeSettings = await prisma.karaokeSettings.findMany()
     * 
     * // Get first 10 KaraokeSettings
     * const karaokeSettings = await prisma.karaokeSettings.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const karaokeSettingsWithIdOnly = await prisma.karaokeSettings.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends KaraokeSettingsFindManyArgs>(args?: SelectSubset<T, KaraokeSettingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KaraokeSettingsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a KaraokeSettings.
     * @param {KaraokeSettingsCreateArgs} args - Arguments to create a KaraokeSettings.
     * @example
     * // Create one KaraokeSettings
     * const KaraokeSettings = await prisma.karaokeSettings.create({
     *   data: {
     *     // ... data to create a KaraokeSettings
     *   }
     * })
     * 
     */
    create<T extends KaraokeSettingsCreateArgs>(args: SelectSubset<T, KaraokeSettingsCreateArgs<ExtArgs>>): Prisma__KaraokeSettingsClient<$Result.GetResult<Prisma.$KaraokeSettingsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many KaraokeSettings.
     * @param {KaraokeSettingsCreateManyArgs} args - Arguments to create many KaraokeSettings.
     * @example
     * // Create many KaraokeSettings
     * const karaokeSettings = await prisma.karaokeSettings.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends KaraokeSettingsCreateManyArgs>(args?: SelectSubset<T, KaraokeSettingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many KaraokeSettings and returns the data saved in the database.
     * @param {KaraokeSettingsCreateManyAndReturnArgs} args - Arguments to create many KaraokeSettings.
     * @example
     * // Create many KaraokeSettings
     * const karaokeSettings = await prisma.karaokeSettings.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many KaraokeSettings and only return the `id`
     * const karaokeSettingsWithIdOnly = await prisma.karaokeSettings.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends KaraokeSettingsCreateManyAndReturnArgs>(args?: SelectSubset<T, KaraokeSettingsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KaraokeSettingsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a KaraokeSettings.
     * @param {KaraokeSettingsDeleteArgs} args - Arguments to delete one KaraokeSettings.
     * @example
     * // Delete one KaraokeSettings
     * const KaraokeSettings = await prisma.karaokeSettings.delete({
     *   where: {
     *     // ... filter to delete one KaraokeSettings
     *   }
     * })
     * 
     */
    delete<T extends KaraokeSettingsDeleteArgs>(args: SelectSubset<T, KaraokeSettingsDeleteArgs<ExtArgs>>): Prisma__KaraokeSettingsClient<$Result.GetResult<Prisma.$KaraokeSettingsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one KaraokeSettings.
     * @param {KaraokeSettingsUpdateArgs} args - Arguments to update one KaraokeSettings.
     * @example
     * // Update one KaraokeSettings
     * const karaokeSettings = await prisma.karaokeSettings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends KaraokeSettingsUpdateArgs>(args: SelectSubset<T, KaraokeSettingsUpdateArgs<ExtArgs>>): Prisma__KaraokeSettingsClient<$Result.GetResult<Prisma.$KaraokeSettingsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more KaraokeSettings.
     * @param {KaraokeSettingsDeleteManyArgs} args - Arguments to filter KaraokeSettings to delete.
     * @example
     * // Delete a few KaraokeSettings
     * const { count } = await prisma.karaokeSettings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends KaraokeSettingsDeleteManyArgs>(args?: SelectSubset<T, KaraokeSettingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KaraokeSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KaraokeSettingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many KaraokeSettings
     * const karaokeSettings = await prisma.karaokeSettings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends KaraokeSettingsUpdateManyArgs>(args: SelectSubset<T, KaraokeSettingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one KaraokeSettings.
     * @param {KaraokeSettingsUpsertArgs} args - Arguments to update or create a KaraokeSettings.
     * @example
     * // Update or create a KaraokeSettings
     * const karaokeSettings = await prisma.karaokeSettings.upsert({
     *   create: {
     *     // ... data to create a KaraokeSettings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the KaraokeSettings we want to update
     *   }
     * })
     */
    upsert<T extends KaraokeSettingsUpsertArgs>(args: SelectSubset<T, KaraokeSettingsUpsertArgs<ExtArgs>>): Prisma__KaraokeSettingsClient<$Result.GetResult<Prisma.$KaraokeSettingsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of KaraokeSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KaraokeSettingsCountArgs} args - Arguments to filter KaraokeSettings to count.
     * @example
     * // Count the number of KaraokeSettings
     * const count = await prisma.karaokeSettings.count({
     *   where: {
     *     // ... the filter for the KaraokeSettings we want to count
     *   }
     * })
    **/
    count<T extends KaraokeSettingsCountArgs>(
      args?: Subset<T, KaraokeSettingsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KaraokeSettingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a KaraokeSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KaraokeSettingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KaraokeSettingsAggregateArgs>(args: Subset<T, KaraokeSettingsAggregateArgs>): Prisma.PrismaPromise<GetKaraokeSettingsAggregateType<T>>

    /**
     * Group by KaraokeSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KaraokeSettingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KaraokeSettingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KaraokeSettingsGroupByArgs['orderBy'] }
        : { orderBy?: KaraokeSettingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KaraokeSettingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKaraokeSettingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the KaraokeSettings model
   */
  readonly fields: KaraokeSettingsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for KaraokeSettings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KaraokeSettingsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the KaraokeSettings model
   */ 
  interface KaraokeSettingsFieldRefs {
    readonly id: FieldRef<"KaraokeSettings", 'Int'>
    readonly maxVipGuests: FieldRef<"KaraokeSettings", 'Int'>
    readonly baseVipPrice: FieldRef<"KaraokeSettings", 'Decimal'>
    readonly additionalGuestPrice: FieldRef<"KaraokeSettings", 'Decimal'>
    readonly depositPolicy: FieldRef<"KaraokeSettings", 'String'>
    readonly isActive: FieldRef<"KaraokeSettings", 'Boolean'>
    readonly createdAt: FieldRef<"KaraokeSettings", 'DateTime'>
    readonly updatedAt: FieldRef<"KaraokeSettings", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * KaraokeSettings findUnique
   */
  export type KaraokeSettingsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KaraokeSettings
     */
    select?: KaraokeSettingsSelect<ExtArgs> | null
    /**
     * Filter, which KaraokeSettings to fetch.
     */
    where: KaraokeSettingsWhereUniqueInput
  }

  /**
   * KaraokeSettings findUniqueOrThrow
   */
  export type KaraokeSettingsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KaraokeSettings
     */
    select?: KaraokeSettingsSelect<ExtArgs> | null
    /**
     * Filter, which KaraokeSettings to fetch.
     */
    where: KaraokeSettingsWhereUniqueInput
  }

  /**
   * KaraokeSettings findFirst
   */
  export type KaraokeSettingsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KaraokeSettings
     */
    select?: KaraokeSettingsSelect<ExtArgs> | null
    /**
     * Filter, which KaraokeSettings to fetch.
     */
    where?: KaraokeSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KaraokeSettings to fetch.
     */
    orderBy?: KaraokeSettingsOrderByWithRelationInput | KaraokeSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KaraokeSettings.
     */
    cursor?: KaraokeSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KaraokeSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KaraokeSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KaraokeSettings.
     */
    distinct?: KaraokeSettingsScalarFieldEnum | KaraokeSettingsScalarFieldEnum[]
  }

  /**
   * KaraokeSettings findFirstOrThrow
   */
  export type KaraokeSettingsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KaraokeSettings
     */
    select?: KaraokeSettingsSelect<ExtArgs> | null
    /**
     * Filter, which KaraokeSettings to fetch.
     */
    where?: KaraokeSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KaraokeSettings to fetch.
     */
    orderBy?: KaraokeSettingsOrderByWithRelationInput | KaraokeSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KaraokeSettings.
     */
    cursor?: KaraokeSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KaraokeSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KaraokeSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KaraokeSettings.
     */
    distinct?: KaraokeSettingsScalarFieldEnum | KaraokeSettingsScalarFieldEnum[]
  }

  /**
   * KaraokeSettings findMany
   */
  export type KaraokeSettingsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KaraokeSettings
     */
    select?: KaraokeSettingsSelect<ExtArgs> | null
    /**
     * Filter, which KaraokeSettings to fetch.
     */
    where?: KaraokeSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KaraokeSettings to fetch.
     */
    orderBy?: KaraokeSettingsOrderByWithRelationInput | KaraokeSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing KaraokeSettings.
     */
    cursor?: KaraokeSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KaraokeSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KaraokeSettings.
     */
    skip?: number
    distinct?: KaraokeSettingsScalarFieldEnum | KaraokeSettingsScalarFieldEnum[]
  }

  /**
   * KaraokeSettings create
   */
  export type KaraokeSettingsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KaraokeSettings
     */
    select?: KaraokeSettingsSelect<ExtArgs> | null
    /**
     * The data needed to create a KaraokeSettings.
     */
    data?: XOR<KaraokeSettingsCreateInput, KaraokeSettingsUncheckedCreateInput>
  }

  /**
   * KaraokeSettings createMany
   */
  export type KaraokeSettingsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many KaraokeSettings.
     */
    data: KaraokeSettingsCreateManyInput | KaraokeSettingsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * KaraokeSettings createManyAndReturn
   */
  export type KaraokeSettingsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KaraokeSettings
     */
    select?: KaraokeSettingsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many KaraokeSettings.
     */
    data: KaraokeSettingsCreateManyInput | KaraokeSettingsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * KaraokeSettings update
   */
  export type KaraokeSettingsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KaraokeSettings
     */
    select?: KaraokeSettingsSelect<ExtArgs> | null
    /**
     * The data needed to update a KaraokeSettings.
     */
    data: XOR<KaraokeSettingsUpdateInput, KaraokeSettingsUncheckedUpdateInput>
    /**
     * Choose, which KaraokeSettings to update.
     */
    where: KaraokeSettingsWhereUniqueInput
  }

  /**
   * KaraokeSettings updateMany
   */
  export type KaraokeSettingsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update KaraokeSettings.
     */
    data: XOR<KaraokeSettingsUpdateManyMutationInput, KaraokeSettingsUncheckedUpdateManyInput>
    /**
     * Filter which KaraokeSettings to update
     */
    where?: KaraokeSettingsWhereInput
  }

  /**
   * KaraokeSettings upsert
   */
  export type KaraokeSettingsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KaraokeSettings
     */
    select?: KaraokeSettingsSelect<ExtArgs> | null
    /**
     * The filter to search for the KaraokeSettings to update in case it exists.
     */
    where: KaraokeSettingsWhereUniqueInput
    /**
     * In case the KaraokeSettings found by the `where` argument doesn't exist, create a new KaraokeSettings with this data.
     */
    create: XOR<KaraokeSettingsCreateInput, KaraokeSettingsUncheckedCreateInput>
    /**
     * In case the KaraokeSettings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KaraokeSettingsUpdateInput, KaraokeSettingsUncheckedUpdateInput>
  }

  /**
   * KaraokeSettings delete
   */
  export type KaraokeSettingsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KaraokeSettings
     */
    select?: KaraokeSettingsSelect<ExtArgs> | null
    /**
     * Filter which KaraokeSettings to delete.
     */
    where: KaraokeSettingsWhereUniqueInput
  }

  /**
   * KaraokeSettings deleteMany
   */
  export type KaraokeSettingsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KaraokeSettings to delete
     */
    where?: KaraokeSettingsWhereInput
  }

  /**
   * KaraokeSettings without action
   */
  export type KaraokeSettingsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KaraokeSettings
     */
    select?: KaraokeSettingsSelect<ExtArgs> | null
  }


  /**
   * Model BanquetRequest
   */

  export type AggregateBanquetRequest = {
    _count: BanquetRequestCountAggregateOutputType | null
    _avg: BanquetRequestAvgAggregateOutputType | null
    _sum: BanquetRequestSumAggregateOutputType | null
    _min: BanquetRequestMinAggregateOutputType | null
    _max: BanquetRequestMaxAggregateOutputType | null
  }

  export type BanquetRequestAvgAggregateOutputType = {
    id: number | null
    guestCount: number | null
  }

  export type BanquetRequestSumAggregateOutputType = {
    id: number | null
    guestCount: number | null
  }

  export type BanquetRequestMinAggregateOutputType = {
    id: number | null
    eventDate: Date | null
    eventTime: string | null
    endTime: string | null
    guestCount: number | null
    eventType: string | null
    budget: string | null
    banquetType: string | null
    specialMenu: string | null
    music: string | null
    decor: string | null
    name: string | null
    phone: string | null
    email: string | null
    additionalWishes: string | null
    status: $Enums.BanquetRequestStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BanquetRequestMaxAggregateOutputType = {
    id: number | null
    eventDate: Date | null
    eventTime: string | null
    endTime: string | null
    guestCount: number | null
    eventType: string | null
    budget: string | null
    banquetType: string | null
    specialMenu: string | null
    music: string | null
    decor: string | null
    name: string | null
    phone: string | null
    email: string | null
    additionalWishes: string | null
    status: $Enums.BanquetRequestStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BanquetRequestCountAggregateOutputType = {
    id: number
    eventDate: number
    eventTime: number
    endTime: number
    guestCount: number
    eventType: number
    budget: number
    banquetType: number
    specialMenu: number
    music: number
    decor: number
    name: number
    phone: number
    email: number
    additionalWishes: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BanquetRequestAvgAggregateInputType = {
    id?: true
    guestCount?: true
  }

  export type BanquetRequestSumAggregateInputType = {
    id?: true
    guestCount?: true
  }

  export type BanquetRequestMinAggregateInputType = {
    id?: true
    eventDate?: true
    eventTime?: true
    endTime?: true
    guestCount?: true
    eventType?: true
    budget?: true
    banquetType?: true
    specialMenu?: true
    music?: true
    decor?: true
    name?: true
    phone?: true
    email?: true
    additionalWishes?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BanquetRequestMaxAggregateInputType = {
    id?: true
    eventDate?: true
    eventTime?: true
    endTime?: true
    guestCount?: true
    eventType?: true
    budget?: true
    banquetType?: true
    specialMenu?: true
    music?: true
    decor?: true
    name?: true
    phone?: true
    email?: true
    additionalWishes?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BanquetRequestCountAggregateInputType = {
    id?: true
    eventDate?: true
    eventTime?: true
    endTime?: true
    guestCount?: true
    eventType?: true
    budget?: true
    banquetType?: true
    specialMenu?: true
    music?: true
    decor?: true
    name?: true
    phone?: true
    email?: true
    additionalWishes?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BanquetRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BanquetRequest to aggregate.
     */
    where?: BanquetRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BanquetRequests to fetch.
     */
    orderBy?: BanquetRequestOrderByWithRelationInput | BanquetRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BanquetRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BanquetRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BanquetRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BanquetRequests
    **/
    _count?: true | BanquetRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BanquetRequestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BanquetRequestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BanquetRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BanquetRequestMaxAggregateInputType
  }

  export type GetBanquetRequestAggregateType<T extends BanquetRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateBanquetRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBanquetRequest[P]>
      : GetScalarType<T[P], AggregateBanquetRequest[P]>
  }




  export type BanquetRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BanquetRequestWhereInput
    orderBy?: BanquetRequestOrderByWithAggregationInput | BanquetRequestOrderByWithAggregationInput[]
    by: BanquetRequestScalarFieldEnum[] | BanquetRequestScalarFieldEnum
    having?: BanquetRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BanquetRequestCountAggregateInputType | true
    _avg?: BanquetRequestAvgAggregateInputType
    _sum?: BanquetRequestSumAggregateInputType
    _min?: BanquetRequestMinAggregateInputType
    _max?: BanquetRequestMaxAggregateInputType
  }

  export type BanquetRequestGroupByOutputType = {
    id: number
    eventDate: Date
    eventTime: string
    endTime: string | null
    guestCount: number
    eventType: string
    budget: string
    banquetType: string | null
    specialMenu: string | null
    music: string | null
    decor: string | null
    name: string
    phone: string
    email: string | null
    additionalWishes: string | null
    status: $Enums.BanquetRequestStatus
    createdAt: Date
    updatedAt: Date
    _count: BanquetRequestCountAggregateOutputType | null
    _avg: BanquetRequestAvgAggregateOutputType | null
    _sum: BanquetRequestSumAggregateOutputType | null
    _min: BanquetRequestMinAggregateOutputType | null
    _max: BanquetRequestMaxAggregateOutputType | null
  }

  type GetBanquetRequestGroupByPayload<T extends BanquetRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BanquetRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BanquetRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BanquetRequestGroupByOutputType[P]>
            : GetScalarType<T[P], BanquetRequestGroupByOutputType[P]>
        }
      >
    >


  export type BanquetRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventDate?: boolean
    eventTime?: boolean
    endTime?: boolean
    guestCount?: boolean
    eventType?: boolean
    budget?: boolean
    banquetType?: boolean
    specialMenu?: boolean
    music?: boolean
    decor?: boolean
    name?: boolean
    phone?: boolean
    email?: boolean
    additionalWishes?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["banquetRequest"]>

  export type BanquetRequestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventDate?: boolean
    eventTime?: boolean
    endTime?: boolean
    guestCount?: boolean
    eventType?: boolean
    budget?: boolean
    banquetType?: boolean
    specialMenu?: boolean
    music?: boolean
    decor?: boolean
    name?: boolean
    phone?: boolean
    email?: boolean
    additionalWishes?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["banquetRequest"]>

  export type BanquetRequestSelectScalar = {
    id?: boolean
    eventDate?: boolean
    eventTime?: boolean
    endTime?: boolean
    guestCount?: boolean
    eventType?: boolean
    budget?: boolean
    banquetType?: boolean
    specialMenu?: boolean
    music?: boolean
    decor?: boolean
    name?: boolean
    phone?: boolean
    email?: boolean
    additionalWishes?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $BanquetRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BanquetRequest"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      eventDate: Date
      eventTime: string
      endTime: string | null
      guestCount: number
      eventType: string
      budget: string
      banquetType: string | null
      specialMenu: string | null
      music: string | null
      decor: string | null
      name: string
      phone: string
      email: string | null
      additionalWishes: string | null
      status: $Enums.BanquetRequestStatus
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["banquetRequest"]>
    composites: {}
  }

  type BanquetRequestGetPayload<S extends boolean | null | undefined | BanquetRequestDefaultArgs> = $Result.GetResult<Prisma.$BanquetRequestPayload, S>

  type BanquetRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BanquetRequestFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BanquetRequestCountAggregateInputType | true
    }

  export interface BanquetRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BanquetRequest'], meta: { name: 'BanquetRequest' } }
    /**
     * Find zero or one BanquetRequest that matches the filter.
     * @param {BanquetRequestFindUniqueArgs} args - Arguments to find a BanquetRequest
     * @example
     * // Get one BanquetRequest
     * const banquetRequest = await prisma.banquetRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BanquetRequestFindUniqueArgs>(args: SelectSubset<T, BanquetRequestFindUniqueArgs<ExtArgs>>): Prisma__BanquetRequestClient<$Result.GetResult<Prisma.$BanquetRequestPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one BanquetRequest that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BanquetRequestFindUniqueOrThrowArgs} args - Arguments to find a BanquetRequest
     * @example
     * // Get one BanquetRequest
     * const banquetRequest = await prisma.banquetRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BanquetRequestFindUniqueOrThrowArgs>(args: SelectSubset<T, BanquetRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BanquetRequestClient<$Result.GetResult<Prisma.$BanquetRequestPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first BanquetRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BanquetRequestFindFirstArgs} args - Arguments to find a BanquetRequest
     * @example
     * // Get one BanquetRequest
     * const banquetRequest = await prisma.banquetRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BanquetRequestFindFirstArgs>(args?: SelectSubset<T, BanquetRequestFindFirstArgs<ExtArgs>>): Prisma__BanquetRequestClient<$Result.GetResult<Prisma.$BanquetRequestPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first BanquetRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BanquetRequestFindFirstOrThrowArgs} args - Arguments to find a BanquetRequest
     * @example
     * // Get one BanquetRequest
     * const banquetRequest = await prisma.banquetRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BanquetRequestFindFirstOrThrowArgs>(args?: SelectSubset<T, BanquetRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__BanquetRequestClient<$Result.GetResult<Prisma.$BanquetRequestPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more BanquetRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BanquetRequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BanquetRequests
     * const banquetRequests = await prisma.banquetRequest.findMany()
     * 
     * // Get first 10 BanquetRequests
     * const banquetRequests = await prisma.banquetRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const banquetRequestWithIdOnly = await prisma.banquetRequest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BanquetRequestFindManyArgs>(args?: SelectSubset<T, BanquetRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BanquetRequestPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a BanquetRequest.
     * @param {BanquetRequestCreateArgs} args - Arguments to create a BanquetRequest.
     * @example
     * // Create one BanquetRequest
     * const BanquetRequest = await prisma.banquetRequest.create({
     *   data: {
     *     // ... data to create a BanquetRequest
     *   }
     * })
     * 
     */
    create<T extends BanquetRequestCreateArgs>(args: SelectSubset<T, BanquetRequestCreateArgs<ExtArgs>>): Prisma__BanquetRequestClient<$Result.GetResult<Prisma.$BanquetRequestPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many BanquetRequests.
     * @param {BanquetRequestCreateManyArgs} args - Arguments to create many BanquetRequests.
     * @example
     * // Create many BanquetRequests
     * const banquetRequest = await prisma.banquetRequest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BanquetRequestCreateManyArgs>(args?: SelectSubset<T, BanquetRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BanquetRequests and returns the data saved in the database.
     * @param {BanquetRequestCreateManyAndReturnArgs} args - Arguments to create many BanquetRequests.
     * @example
     * // Create many BanquetRequests
     * const banquetRequest = await prisma.banquetRequest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BanquetRequests and only return the `id`
     * const banquetRequestWithIdOnly = await prisma.banquetRequest.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BanquetRequestCreateManyAndReturnArgs>(args?: SelectSubset<T, BanquetRequestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BanquetRequestPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a BanquetRequest.
     * @param {BanquetRequestDeleteArgs} args - Arguments to delete one BanquetRequest.
     * @example
     * // Delete one BanquetRequest
     * const BanquetRequest = await prisma.banquetRequest.delete({
     *   where: {
     *     // ... filter to delete one BanquetRequest
     *   }
     * })
     * 
     */
    delete<T extends BanquetRequestDeleteArgs>(args: SelectSubset<T, BanquetRequestDeleteArgs<ExtArgs>>): Prisma__BanquetRequestClient<$Result.GetResult<Prisma.$BanquetRequestPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one BanquetRequest.
     * @param {BanquetRequestUpdateArgs} args - Arguments to update one BanquetRequest.
     * @example
     * // Update one BanquetRequest
     * const banquetRequest = await prisma.banquetRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BanquetRequestUpdateArgs>(args: SelectSubset<T, BanquetRequestUpdateArgs<ExtArgs>>): Prisma__BanquetRequestClient<$Result.GetResult<Prisma.$BanquetRequestPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more BanquetRequests.
     * @param {BanquetRequestDeleteManyArgs} args - Arguments to filter BanquetRequests to delete.
     * @example
     * // Delete a few BanquetRequests
     * const { count } = await prisma.banquetRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BanquetRequestDeleteManyArgs>(args?: SelectSubset<T, BanquetRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BanquetRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BanquetRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BanquetRequests
     * const banquetRequest = await prisma.banquetRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BanquetRequestUpdateManyArgs>(args: SelectSubset<T, BanquetRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BanquetRequest.
     * @param {BanquetRequestUpsertArgs} args - Arguments to update or create a BanquetRequest.
     * @example
     * // Update or create a BanquetRequest
     * const banquetRequest = await prisma.banquetRequest.upsert({
     *   create: {
     *     // ... data to create a BanquetRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BanquetRequest we want to update
     *   }
     * })
     */
    upsert<T extends BanquetRequestUpsertArgs>(args: SelectSubset<T, BanquetRequestUpsertArgs<ExtArgs>>): Prisma__BanquetRequestClient<$Result.GetResult<Prisma.$BanquetRequestPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of BanquetRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BanquetRequestCountArgs} args - Arguments to filter BanquetRequests to count.
     * @example
     * // Count the number of BanquetRequests
     * const count = await prisma.banquetRequest.count({
     *   where: {
     *     // ... the filter for the BanquetRequests we want to count
     *   }
     * })
    **/
    count<T extends BanquetRequestCountArgs>(
      args?: Subset<T, BanquetRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BanquetRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BanquetRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BanquetRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BanquetRequestAggregateArgs>(args: Subset<T, BanquetRequestAggregateArgs>): Prisma.PrismaPromise<GetBanquetRequestAggregateType<T>>

    /**
     * Group by BanquetRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BanquetRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BanquetRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BanquetRequestGroupByArgs['orderBy'] }
        : { orderBy?: BanquetRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BanquetRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBanquetRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BanquetRequest model
   */
  readonly fields: BanquetRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BanquetRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BanquetRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BanquetRequest model
   */ 
  interface BanquetRequestFieldRefs {
    readonly id: FieldRef<"BanquetRequest", 'Int'>
    readonly eventDate: FieldRef<"BanquetRequest", 'DateTime'>
    readonly eventTime: FieldRef<"BanquetRequest", 'String'>
    readonly endTime: FieldRef<"BanquetRequest", 'String'>
    readonly guestCount: FieldRef<"BanquetRequest", 'Int'>
    readonly eventType: FieldRef<"BanquetRequest", 'String'>
    readonly budget: FieldRef<"BanquetRequest", 'String'>
    readonly banquetType: FieldRef<"BanquetRequest", 'String'>
    readonly specialMenu: FieldRef<"BanquetRequest", 'String'>
    readonly music: FieldRef<"BanquetRequest", 'String'>
    readonly decor: FieldRef<"BanquetRequest", 'String'>
    readonly name: FieldRef<"BanquetRequest", 'String'>
    readonly phone: FieldRef<"BanquetRequest", 'String'>
    readonly email: FieldRef<"BanquetRequest", 'String'>
    readonly additionalWishes: FieldRef<"BanquetRequest", 'String'>
    readonly status: FieldRef<"BanquetRequest", 'BanquetRequestStatus'>
    readonly createdAt: FieldRef<"BanquetRequest", 'DateTime'>
    readonly updatedAt: FieldRef<"BanquetRequest", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BanquetRequest findUnique
   */
  export type BanquetRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BanquetRequest
     */
    select?: BanquetRequestSelect<ExtArgs> | null
    /**
     * Filter, which BanquetRequest to fetch.
     */
    where: BanquetRequestWhereUniqueInput
  }

  /**
   * BanquetRequest findUniqueOrThrow
   */
  export type BanquetRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BanquetRequest
     */
    select?: BanquetRequestSelect<ExtArgs> | null
    /**
     * Filter, which BanquetRequest to fetch.
     */
    where: BanquetRequestWhereUniqueInput
  }

  /**
   * BanquetRequest findFirst
   */
  export type BanquetRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BanquetRequest
     */
    select?: BanquetRequestSelect<ExtArgs> | null
    /**
     * Filter, which BanquetRequest to fetch.
     */
    where?: BanquetRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BanquetRequests to fetch.
     */
    orderBy?: BanquetRequestOrderByWithRelationInput | BanquetRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BanquetRequests.
     */
    cursor?: BanquetRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BanquetRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BanquetRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BanquetRequests.
     */
    distinct?: BanquetRequestScalarFieldEnum | BanquetRequestScalarFieldEnum[]
  }

  /**
   * BanquetRequest findFirstOrThrow
   */
  export type BanquetRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BanquetRequest
     */
    select?: BanquetRequestSelect<ExtArgs> | null
    /**
     * Filter, which BanquetRequest to fetch.
     */
    where?: BanquetRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BanquetRequests to fetch.
     */
    orderBy?: BanquetRequestOrderByWithRelationInput | BanquetRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BanquetRequests.
     */
    cursor?: BanquetRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BanquetRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BanquetRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BanquetRequests.
     */
    distinct?: BanquetRequestScalarFieldEnum | BanquetRequestScalarFieldEnum[]
  }

  /**
   * BanquetRequest findMany
   */
  export type BanquetRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BanquetRequest
     */
    select?: BanquetRequestSelect<ExtArgs> | null
    /**
     * Filter, which BanquetRequests to fetch.
     */
    where?: BanquetRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BanquetRequests to fetch.
     */
    orderBy?: BanquetRequestOrderByWithRelationInput | BanquetRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BanquetRequests.
     */
    cursor?: BanquetRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BanquetRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BanquetRequests.
     */
    skip?: number
    distinct?: BanquetRequestScalarFieldEnum | BanquetRequestScalarFieldEnum[]
  }

  /**
   * BanquetRequest create
   */
  export type BanquetRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BanquetRequest
     */
    select?: BanquetRequestSelect<ExtArgs> | null
    /**
     * The data needed to create a BanquetRequest.
     */
    data: XOR<BanquetRequestCreateInput, BanquetRequestUncheckedCreateInput>
  }

  /**
   * BanquetRequest createMany
   */
  export type BanquetRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BanquetRequests.
     */
    data: BanquetRequestCreateManyInput | BanquetRequestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BanquetRequest createManyAndReturn
   */
  export type BanquetRequestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BanquetRequest
     */
    select?: BanquetRequestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many BanquetRequests.
     */
    data: BanquetRequestCreateManyInput | BanquetRequestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BanquetRequest update
   */
  export type BanquetRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BanquetRequest
     */
    select?: BanquetRequestSelect<ExtArgs> | null
    /**
     * The data needed to update a BanquetRequest.
     */
    data: XOR<BanquetRequestUpdateInput, BanquetRequestUncheckedUpdateInput>
    /**
     * Choose, which BanquetRequest to update.
     */
    where: BanquetRequestWhereUniqueInput
  }

  /**
   * BanquetRequest updateMany
   */
  export type BanquetRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BanquetRequests.
     */
    data: XOR<BanquetRequestUpdateManyMutationInput, BanquetRequestUncheckedUpdateManyInput>
    /**
     * Filter which BanquetRequests to update
     */
    where?: BanquetRequestWhereInput
  }

  /**
   * BanquetRequest upsert
   */
  export type BanquetRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BanquetRequest
     */
    select?: BanquetRequestSelect<ExtArgs> | null
    /**
     * The filter to search for the BanquetRequest to update in case it exists.
     */
    where: BanquetRequestWhereUniqueInput
    /**
     * In case the BanquetRequest found by the `where` argument doesn't exist, create a new BanquetRequest with this data.
     */
    create: XOR<BanquetRequestCreateInput, BanquetRequestUncheckedCreateInput>
    /**
     * In case the BanquetRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BanquetRequestUpdateInput, BanquetRequestUncheckedUpdateInput>
  }

  /**
   * BanquetRequest delete
   */
  export type BanquetRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BanquetRequest
     */
    select?: BanquetRequestSelect<ExtArgs> | null
    /**
     * Filter which BanquetRequest to delete.
     */
    where: BanquetRequestWhereUniqueInput
  }

  /**
   * BanquetRequest deleteMany
   */
  export type BanquetRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BanquetRequests to delete
     */
    where?: BanquetRequestWhereInput
  }

  /**
   * BanquetRequest without action
   */
  export type BanquetRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BanquetRequest
     */
    select?: BanquetRequestSelect<ExtArgs> | null
  }


  /**
   * Model order_items
   */

  export type AggregateOrder_items = {
    _count: Order_itemsCountAggregateOutputType | null
    _avg: Order_itemsAvgAggregateOutputType | null
    _sum: Order_itemsSumAggregateOutputType | null
    _min: Order_itemsMinAggregateOutputType | null
    _max: Order_itemsMaxAggregateOutputType | null
  }

  export type Order_itemsAvgAggregateOutputType = {
    id: number | null
    order_id: number | null
    user_ticket_id: number | null
    price: Decimal | null
    quantity: number | null
  }

  export type Order_itemsSumAggregateOutputType = {
    id: number | null
    order_id: number | null
    user_ticket_id: number | null
    price: Decimal | null
    quantity: number | null
  }

  export type Order_itemsMinAggregateOutputType = {
    id: number | null
    order_id: number | null
    user_ticket_id: number | null
    price: Decimal | null
    quantity: number | null
  }

  export type Order_itemsMaxAggregateOutputType = {
    id: number | null
    order_id: number | null
    user_ticket_id: number | null
    price: Decimal | null
    quantity: number | null
  }

  export type Order_itemsCountAggregateOutputType = {
    id: number
    order_id: number
    user_ticket_id: number
    price: number
    quantity: number
    _all: number
  }


  export type Order_itemsAvgAggregateInputType = {
    id?: true
    order_id?: true
    user_ticket_id?: true
    price?: true
    quantity?: true
  }

  export type Order_itemsSumAggregateInputType = {
    id?: true
    order_id?: true
    user_ticket_id?: true
    price?: true
    quantity?: true
  }

  export type Order_itemsMinAggregateInputType = {
    id?: true
    order_id?: true
    user_ticket_id?: true
    price?: true
    quantity?: true
  }

  export type Order_itemsMaxAggregateInputType = {
    id?: true
    order_id?: true
    user_ticket_id?: true
    price?: true
    quantity?: true
  }

  export type Order_itemsCountAggregateInputType = {
    id?: true
    order_id?: true
    user_ticket_id?: true
    price?: true
    quantity?: true
    _all?: true
  }

  export type Order_itemsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which order_items to aggregate.
     */
    where?: order_itemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of order_items to fetch.
     */
    orderBy?: order_itemsOrderByWithRelationInput | order_itemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: order_itemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` order_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` order_items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned order_items
    **/
    _count?: true | Order_itemsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Order_itemsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Order_itemsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Order_itemsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Order_itemsMaxAggregateInputType
  }

  export type GetOrder_itemsAggregateType<T extends Order_itemsAggregateArgs> = {
        [P in keyof T & keyof AggregateOrder_items]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrder_items[P]>
      : GetScalarType<T[P], AggregateOrder_items[P]>
  }




  export type order_itemsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: order_itemsWhereInput
    orderBy?: order_itemsOrderByWithAggregationInput | order_itemsOrderByWithAggregationInput[]
    by: Order_itemsScalarFieldEnum[] | Order_itemsScalarFieldEnum
    having?: order_itemsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Order_itemsCountAggregateInputType | true
    _avg?: Order_itemsAvgAggregateInputType
    _sum?: Order_itemsSumAggregateInputType
    _min?: Order_itemsMinAggregateInputType
    _max?: Order_itemsMaxAggregateInputType
  }

  export type Order_itemsGroupByOutputType = {
    id: number
    order_id: number
    user_ticket_id: number
    price: Decimal
    quantity: number
    _count: Order_itemsCountAggregateOutputType | null
    _avg: Order_itemsAvgAggregateOutputType | null
    _sum: Order_itemsSumAggregateOutputType | null
    _min: Order_itemsMinAggregateOutputType | null
    _max: Order_itemsMaxAggregateOutputType | null
  }

  type GetOrder_itemsGroupByPayload<T extends order_itemsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Order_itemsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Order_itemsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Order_itemsGroupByOutputType[P]>
            : GetScalarType<T[P], Order_itemsGroupByOutputType[P]>
        }
      >
    >


  export type order_itemsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    order_id?: boolean
    user_ticket_id?: boolean
    price?: boolean
    quantity?: boolean
    orders?: boolean | ordersDefaultArgs<ExtArgs>
    user_tickets?: boolean | user_ticketsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order_items"]>

  export type order_itemsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    order_id?: boolean
    user_ticket_id?: boolean
    price?: boolean
    quantity?: boolean
    orders?: boolean | ordersDefaultArgs<ExtArgs>
    user_tickets?: boolean | user_ticketsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order_items"]>

  export type order_itemsSelectScalar = {
    id?: boolean
    order_id?: boolean
    user_ticket_id?: boolean
    price?: boolean
    quantity?: boolean
  }

  export type order_itemsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | ordersDefaultArgs<ExtArgs>
    user_tickets?: boolean | user_ticketsDefaultArgs<ExtArgs>
  }
  export type order_itemsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | ordersDefaultArgs<ExtArgs>
    user_tickets?: boolean | user_ticketsDefaultArgs<ExtArgs>
  }

  export type $order_itemsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "order_items"
    objects: {
      orders: Prisma.$ordersPayload<ExtArgs>
      user_tickets: Prisma.$user_ticketsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      order_id: number
      user_ticket_id: number
      price: Prisma.Decimal
      quantity: number
    }, ExtArgs["result"]["order_items"]>
    composites: {}
  }

  type order_itemsGetPayload<S extends boolean | null | undefined | order_itemsDefaultArgs> = $Result.GetResult<Prisma.$order_itemsPayload, S>

  type order_itemsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<order_itemsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Order_itemsCountAggregateInputType | true
    }

  export interface order_itemsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['order_items'], meta: { name: 'order_items' } }
    /**
     * Find zero or one Order_items that matches the filter.
     * @param {order_itemsFindUniqueArgs} args - Arguments to find a Order_items
     * @example
     * // Get one Order_items
     * const order_items = await prisma.order_items.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends order_itemsFindUniqueArgs>(args: SelectSubset<T, order_itemsFindUniqueArgs<ExtArgs>>): Prisma__order_itemsClient<$Result.GetResult<Prisma.$order_itemsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Order_items that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {order_itemsFindUniqueOrThrowArgs} args - Arguments to find a Order_items
     * @example
     * // Get one Order_items
     * const order_items = await prisma.order_items.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends order_itemsFindUniqueOrThrowArgs>(args: SelectSubset<T, order_itemsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__order_itemsClient<$Result.GetResult<Prisma.$order_itemsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Order_items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {order_itemsFindFirstArgs} args - Arguments to find a Order_items
     * @example
     * // Get one Order_items
     * const order_items = await prisma.order_items.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends order_itemsFindFirstArgs>(args?: SelectSubset<T, order_itemsFindFirstArgs<ExtArgs>>): Prisma__order_itemsClient<$Result.GetResult<Prisma.$order_itemsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Order_items that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {order_itemsFindFirstOrThrowArgs} args - Arguments to find a Order_items
     * @example
     * // Get one Order_items
     * const order_items = await prisma.order_items.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends order_itemsFindFirstOrThrowArgs>(args?: SelectSubset<T, order_itemsFindFirstOrThrowArgs<ExtArgs>>): Prisma__order_itemsClient<$Result.GetResult<Prisma.$order_itemsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Order_items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {order_itemsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Order_items
     * const order_items = await prisma.order_items.findMany()
     * 
     * // Get first 10 Order_items
     * const order_items = await prisma.order_items.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const order_itemsWithIdOnly = await prisma.order_items.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends order_itemsFindManyArgs>(args?: SelectSubset<T, order_itemsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$order_itemsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Order_items.
     * @param {order_itemsCreateArgs} args - Arguments to create a Order_items.
     * @example
     * // Create one Order_items
     * const Order_items = await prisma.order_items.create({
     *   data: {
     *     // ... data to create a Order_items
     *   }
     * })
     * 
     */
    create<T extends order_itemsCreateArgs>(args: SelectSubset<T, order_itemsCreateArgs<ExtArgs>>): Prisma__order_itemsClient<$Result.GetResult<Prisma.$order_itemsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Order_items.
     * @param {order_itemsCreateManyArgs} args - Arguments to create many Order_items.
     * @example
     * // Create many Order_items
     * const order_items = await prisma.order_items.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends order_itemsCreateManyArgs>(args?: SelectSubset<T, order_itemsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Order_items and returns the data saved in the database.
     * @param {order_itemsCreateManyAndReturnArgs} args - Arguments to create many Order_items.
     * @example
     * // Create many Order_items
     * const order_items = await prisma.order_items.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Order_items and only return the `id`
     * const order_itemsWithIdOnly = await prisma.order_items.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends order_itemsCreateManyAndReturnArgs>(args?: SelectSubset<T, order_itemsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$order_itemsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Order_items.
     * @param {order_itemsDeleteArgs} args - Arguments to delete one Order_items.
     * @example
     * // Delete one Order_items
     * const Order_items = await prisma.order_items.delete({
     *   where: {
     *     // ... filter to delete one Order_items
     *   }
     * })
     * 
     */
    delete<T extends order_itemsDeleteArgs>(args: SelectSubset<T, order_itemsDeleteArgs<ExtArgs>>): Prisma__order_itemsClient<$Result.GetResult<Prisma.$order_itemsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Order_items.
     * @param {order_itemsUpdateArgs} args - Arguments to update one Order_items.
     * @example
     * // Update one Order_items
     * const order_items = await prisma.order_items.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends order_itemsUpdateArgs>(args: SelectSubset<T, order_itemsUpdateArgs<ExtArgs>>): Prisma__order_itemsClient<$Result.GetResult<Prisma.$order_itemsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Order_items.
     * @param {order_itemsDeleteManyArgs} args - Arguments to filter Order_items to delete.
     * @example
     * // Delete a few Order_items
     * const { count } = await prisma.order_items.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends order_itemsDeleteManyArgs>(args?: SelectSubset<T, order_itemsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Order_items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {order_itemsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Order_items
     * const order_items = await prisma.order_items.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends order_itemsUpdateManyArgs>(args: SelectSubset<T, order_itemsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Order_items.
     * @param {order_itemsUpsertArgs} args - Arguments to update or create a Order_items.
     * @example
     * // Update or create a Order_items
     * const order_items = await prisma.order_items.upsert({
     *   create: {
     *     // ... data to create a Order_items
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Order_items we want to update
     *   }
     * })
     */
    upsert<T extends order_itemsUpsertArgs>(args: SelectSubset<T, order_itemsUpsertArgs<ExtArgs>>): Prisma__order_itemsClient<$Result.GetResult<Prisma.$order_itemsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Order_items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {order_itemsCountArgs} args - Arguments to filter Order_items to count.
     * @example
     * // Count the number of Order_items
     * const count = await prisma.order_items.count({
     *   where: {
     *     // ... the filter for the Order_items we want to count
     *   }
     * })
    **/
    count<T extends order_itemsCountArgs>(
      args?: Subset<T, order_itemsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Order_itemsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Order_items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Order_itemsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Order_itemsAggregateArgs>(args: Subset<T, Order_itemsAggregateArgs>): Prisma.PrismaPromise<GetOrder_itemsAggregateType<T>>

    /**
     * Group by Order_items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {order_itemsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends order_itemsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: order_itemsGroupByArgs['orderBy'] }
        : { orderBy?: order_itemsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, order_itemsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrder_itemsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the order_items model
   */
  readonly fields: order_itemsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for order_items.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__order_itemsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    orders<T extends ordersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ordersDefaultArgs<ExtArgs>>): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user_tickets<T extends user_ticketsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, user_ticketsDefaultArgs<ExtArgs>>): Prisma__user_ticketsClient<$Result.GetResult<Prisma.$user_ticketsPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the order_items model
   */ 
  interface order_itemsFieldRefs {
    readonly id: FieldRef<"order_items", 'Int'>
    readonly order_id: FieldRef<"order_items", 'Int'>
    readonly user_ticket_id: FieldRef<"order_items", 'Int'>
    readonly price: FieldRef<"order_items", 'Decimal'>
    readonly quantity: FieldRef<"order_items", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * order_items findUnique
   */
  export type order_itemsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order_items
     */
    select?: order_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: order_itemsInclude<ExtArgs> | null
    /**
     * Filter, which order_items to fetch.
     */
    where: order_itemsWhereUniqueInput
  }

  /**
   * order_items findUniqueOrThrow
   */
  export type order_itemsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order_items
     */
    select?: order_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: order_itemsInclude<ExtArgs> | null
    /**
     * Filter, which order_items to fetch.
     */
    where: order_itemsWhereUniqueInput
  }

  /**
   * order_items findFirst
   */
  export type order_itemsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order_items
     */
    select?: order_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: order_itemsInclude<ExtArgs> | null
    /**
     * Filter, which order_items to fetch.
     */
    where?: order_itemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of order_items to fetch.
     */
    orderBy?: order_itemsOrderByWithRelationInput | order_itemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for order_items.
     */
    cursor?: order_itemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` order_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` order_items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of order_items.
     */
    distinct?: Order_itemsScalarFieldEnum | Order_itemsScalarFieldEnum[]
  }

  /**
   * order_items findFirstOrThrow
   */
  export type order_itemsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order_items
     */
    select?: order_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: order_itemsInclude<ExtArgs> | null
    /**
     * Filter, which order_items to fetch.
     */
    where?: order_itemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of order_items to fetch.
     */
    orderBy?: order_itemsOrderByWithRelationInput | order_itemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for order_items.
     */
    cursor?: order_itemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` order_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` order_items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of order_items.
     */
    distinct?: Order_itemsScalarFieldEnum | Order_itemsScalarFieldEnum[]
  }

  /**
   * order_items findMany
   */
  export type order_itemsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order_items
     */
    select?: order_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: order_itemsInclude<ExtArgs> | null
    /**
     * Filter, which order_items to fetch.
     */
    where?: order_itemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of order_items to fetch.
     */
    orderBy?: order_itemsOrderByWithRelationInput | order_itemsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing order_items.
     */
    cursor?: order_itemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` order_items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` order_items.
     */
    skip?: number
    distinct?: Order_itemsScalarFieldEnum | Order_itemsScalarFieldEnum[]
  }

  /**
   * order_items create
   */
  export type order_itemsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order_items
     */
    select?: order_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: order_itemsInclude<ExtArgs> | null
    /**
     * The data needed to create a order_items.
     */
    data: XOR<order_itemsCreateInput, order_itemsUncheckedCreateInput>
  }

  /**
   * order_items createMany
   */
  export type order_itemsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many order_items.
     */
    data: order_itemsCreateManyInput | order_itemsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * order_items createManyAndReturn
   */
  export type order_itemsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order_items
     */
    select?: order_itemsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many order_items.
     */
    data: order_itemsCreateManyInput | order_itemsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: order_itemsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * order_items update
   */
  export type order_itemsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order_items
     */
    select?: order_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: order_itemsInclude<ExtArgs> | null
    /**
     * The data needed to update a order_items.
     */
    data: XOR<order_itemsUpdateInput, order_itemsUncheckedUpdateInput>
    /**
     * Choose, which order_items to update.
     */
    where: order_itemsWhereUniqueInput
  }

  /**
   * order_items updateMany
   */
  export type order_itemsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update order_items.
     */
    data: XOR<order_itemsUpdateManyMutationInput, order_itemsUncheckedUpdateManyInput>
    /**
     * Filter which order_items to update
     */
    where?: order_itemsWhereInput
  }

  /**
   * order_items upsert
   */
  export type order_itemsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order_items
     */
    select?: order_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: order_itemsInclude<ExtArgs> | null
    /**
     * The filter to search for the order_items to update in case it exists.
     */
    where: order_itemsWhereUniqueInput
    /**
     * In case the order_items found by the `where` argument doesn't exist, create a new order_items with this data.
     */
    create: XOR<order_itemsCreateInput, order_itemsUncheckedCreateInput>
    /**
     * In case the order_items was found with the provided `where` argument, update it with this data.
     */
    update: XOR<order_itemsUpdateInput, order_itemsUncheckedUpdateInput>
  }

  /**
   * order_items delete
   */
  export type order_itemsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order_items
     */
    select?: order_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: order_itemsInclude<ExtArgs> | null
    /**
     * Filter which order_items to delete.
     */
    where: order_itemsWhereUniqueInput
  }

  /**
   * order_items deleteMany
   */
  export type order_itemsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which order_items to delete
     */
    where?: order_itemsWhereInput
  }

  /**
   * order_items without action
   */
  export type order_itemsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order_items
     */
    select?: order_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: order_itemsInclude<ExtArgs> | null
  }


  /**
   * Model orders
   */

  export type AggregateOrders = {
    _count: OrdersCountAggregateOutputType | null
    _avg: OrdersAvgAggregateOutputType | null
    _sum: OrdersSumAggregateOutputType | null
    _min: OrdersMinAggregateOutputType | null
    _max: OrdersMaxAggregateOutputType | null
  }

  export type OrdersAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    total_amount: Decimal | null
  }

  export type OrdersSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    total_amount: Decimal | null
  }

  export type OrdersMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    first_name: string | null
    last_name: string | null
    email: string | null
    phone: string | null
    status: $Enums.OrderStatus | null
    total_amount: Decimal | null
    payment_id: string | null
    payment_method: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type OrdersMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    first_name: string | null
    last_name: string | null
    email: string | null
    phone: string | null
    status: $Enums.OrderStatus | null
    total_amount: Decimal | null
    payment_id: string | null
    payment_method: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type OrdersCountAggregateOutputType = {
    id: number
    user_id: number
    first_name: number
    last_name: number
    email: number
    phone: number
    status: number
    total_amount: number
    payment_id: number
    payment_method: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type OrdersAvgAggregateInputType = {
    id?: true
    user_id?: true
    total_amount?: true
  }

  export type OrdersSumAggregateInputType = {
    id?: true
    user_id?: true
    total_amount?: true
  }

  export type OrdersMinAggregateInputType = {
    id?: true
    user_id?: true
    first_name?: true
    last_name?: true
    email?: true
    phone?: true
    status?: true
    total_amount?: true
    payment_id?: true
    payment_method?: true
    created_at?: true
    updated_at?: true
  }

  export type OrdersMaxAggregateInputType = {
    id?: true
    user_id?: true
    first_name?: true
    last_name?: true
    email?: true
    phone?: true
    status?: true
    total_amount?: true
    payment_id?: true
    payment_method?: true
    created_at?: true
    updated_at?: true
  }

  export type OrdersCountAggregateInputType = {
    id?: true
    user_id?: true
    first_name?: true
    last_name?: true
    email?: true
    phone?: true
    status?: true
    total_amount?: true
    payment_id?: true
    payment_method?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type OrdersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which orders to aggregate.
     */
    where?: ordersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: ordersOrderByWithRelationInput | ordersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ordersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned orders
    **/
    _count?: true | OrdersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrdersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrdersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrdersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrdersMaxAggregateInputType
  }

  export type GetOrdersAggregateType<T extends OrdersAggregateArgs> = {
        [P in keyof T & keyof AggregateOrders]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrders[P]>
      : GetScalarType<T[P], AggregateOrders[P]>
  }




  export type ordersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ordersWhereInput
    orderBy?: ordersOrderByWithAggregationInput | ordersOrderByWithAggregationInput[]
    by: OrdersScalarFieldEnum[] | OrdersScalarFieldEnum
    having?: ordersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrdersCountAggregateInputType | true
    _avg?: OrdersAvgAggregateInputType
    _sum?: OrdersSumAggregateInputType
    _min?: OrdersMinAggregateInputType
    _max?: OrdersMaxAggregateInputType
  }

  export type OrdersGroupByOutputType = {
    id: number
    user_id: number | null
    first_name: string
    last_name: string
    email: string
    phone: string
    status: $Enums.OrderStatus
    total_amount: Decimal
    payment_id: string | null
    payment_method: string | null
    created_at: Date
    updated_at: Date
    _count: OrdersCountAggregateOutputType | null
    _avg: OrdersAvgAggregateOutputType | null
    _sum: OrdersSumAggregateOutputType | null
    _min: OrdersMinAggregateOutputType | null
    _max: OrdersMaxAggregateOutputType | null
  }

  type GetOrdersGroupByPayload<T extends ordersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrdersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrdersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrdersGroupByOutputType[P]>
            : GetScalarType<T[P], OrdersGroupByOutputType[P]>
        }
      >
    >


  export type ordersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    first_name?: boolean
    last_name?: boolean
    email?: boolean
    phone?: boolean
    status?: boolean
    total_amount?: boolean
    payment_id?: boolean
    payment_method?: boolean
    created_at?: boolean
    updated_at?: boolean
    order_items?: boolean | orders$order_itemsArgs<ExtArgs>
    users?: boolean | orders$usersArgs<ExtArgs>
    user_tickets?: boolean | orders$user_ticketsArgs<ExtArgs>
    _count?: boolean | OrdersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orders"]>

  export type ordersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    first_name?: boolean
    last_name?: boolean
    email?: boolean
    phone?: boolean
    status?: boolean
    total_amount?: boolean
    payment_id?: boolean
    payment_method?: boolean
    created_at?: boolean
    updated_at?: boolean
    users?: boolean | orders$usersArgs<ExtArgs>
  }, ExtArgs["result"]["orders"]>

  export type ordersSelectScalar = {
    id?: boolean
    user_id?: boolean
    first_name?: boolean
    last_name?: boolean
    email?: boolean
    phone?: boolean
    status?: boolean
    total_amount?: boolean
    payment_id?: boolean
    payment_method?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type ordersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order_items?: boolean | orders$order_itemsArgs<ExtArgs>
    users?: boolean | orders$usersArgs<ExtArgs>
    user_tickets?: boolean | orders$user_ticketsArgs<ExtArgs>
    _count?: boolean | OrdersCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ordersIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | orders$usersArgs<ExtArgs>
  }

  export type $ordersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "orders"
    objects: {
      order_items: Prisma.$order_itemsPayload<ExtArgs>[]
      users: Prisma.$usersPayload<ExtArgs> | null
      user_tickets: Prisma.$user_ticketsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: number | null
      first_name: string
      last_name: string
      email: string
      phone: string
      status: $Enums.OrderStatus
      total_amount: Prisma.Decimal
      payment_id: string | null
      payment_method: string | null
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["orders"]>
    composites: {}
  }

  type ordersGetPayload<S extends boolean | null | undefined | ordersDefaultArgs> = $Result.GetResult<Prisma.$ordersPayload, S>

  type ordersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ordersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OrdersCountAggregateInputType | true
    }

  export interface ordersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['orders'], meta: { name: 'orders' } }
    /**
     * Find zero or one Orders that matches the filter.
     * @param {ordersFindUniqueArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ordersFindUniqueArgs>(args: SelectSubset<T, ordersFindUniqueArgs<ExtArgs>>): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Orders that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ordersFindUniqueOrThrowArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ordersFindUniqueOrThrowArgs>(args: SelectSubset<T, ordersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersFindFirstArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ordersFindFirstArgs>(args?: SelectSubset<T, ordersFindFirstArgs<ExtArgs>>): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Orders that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersFindFirstOrThrowArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ordersFindFirstOrThrowArgs>(args?: SelectSubset<T, ordersFindFirstOrThrowArgs<ExtArgs>>): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.orders.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.orders.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ordersWithIdOnly = await prisma.orders.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ordersFindManyArgs>(args?: SelectSubset<T, ordersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Orders.
     * @param {ordersCreateArgs} args - Arguments to create a Orders.
     * @example
     * // Create one Orders
     * const Orders = await prisma.orders.create({
     *   data: {
     *     // ... data to create a Orders
     *   }
     * })
     * 
     */
    create<T extends ordersCreateArgs>(args: SelectSubset<T, ordersCreateArgs<ExtArgs>>): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Orders.
     * @param {ordersCreateManyArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const orders = await prisma.orders.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ordersCreateManyArgs>(args?: SelectSubset<T, ordersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Orders and returns the data saved in the database.
     * @param {ordersCreateManyAndReturnArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const orders = await prisma.orders.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Orders and only return the `id`
     * const ordersWithIdOnly = await prisma.orders.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ordersCreateManyAndReturnArgs>(args?: SelectSubset<T, ordersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Orders.
     * @param {ordersDeleteArgs} args - Arguments to delete one Orders.
     * @example
     * // Delete one Orders
     * const Orders = await prisma.orders.delete({
     *   where: {
     *     // ... filter to delete one Orders
     *   }
     * })
     * 
     */
    delete<T extends ordersDeleteArgs>(args: SelectSubset<T, ordersDeleteArgs<ExtArgs>>): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Orders.
     * @param {ordersUpdateArgs} args - Arguments to update one Orders.
     * @example
     * // Update one Orders
     * const orders = await prisma.orders.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ordersUpdateArgs>(args: SelectSubset<T, ordersUpdateArgs<ExtArgs>>): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Orders.
     * @param {ordersDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.orders.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ordersDeleteManyArgs>(args?: SelectSubset<T, ordersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const orders = await prisma.orders.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ordersUpdateManyArgs>(args: SelectSubset<T, ordersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Orders.
     * @param {ordersUpsertArgs} args - Arguments to update or create a Orders.
     * @example
     * // Update or create a Orders
     * const orders = await prisma.orders.upsert({
     *   create: {
     *     // ... data to create a Orders
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Orders we want to update
     *   }
     * })
     */
    upsert<T extends ordersUpsertArgs>(args: SelectSubset<T, ordersUpsertArgs<ExtArgs>>): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.orders.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends ordersCountArgs>(
      args?: Subset<T, ordersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrdersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrdersAggregateArgs>(args: Subset<T, OrdersAggregateArgs>): Prisma.PrismaPromise<GetOrdersAggregateType<T>>

    /**
     * Group by Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ordersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ordersGroupByArgs['orderBy'] }
        : { orderBy?: ordersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ordersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrdersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the orders model
   */
  readonly fields: ordersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for orders.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ordersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    order_items<T extends orders$order_itemsArgs<ExtArgs> = {}>(args?: Subset<T, orders$order_itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$order_itemsPayload<ExtArgs>, T, "findMany"> | Null>
    users<T extends orders$usersArgs<ExtArgs> = {}>(args?: Subset<T, orders$usersArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    user_tickets<T extends orders$user_ticketsArgs<ExtArgs> = {}>(args?: Subset<T, orders$user_ticketsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_ticketsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the orders model
   */ 
  interface ordersFieldRefs {
    readonly id: FieldRef<"orders", 'Int'>
    readonly user_id: FieldRef<"orders", 'Int'>
    readonly first_name: FieldRef<"orders", 'String'>
    readonly last_name: FieldRef<"orders", 'String'>
    readonly email: FieldRef<"orders", 'String'>
    readonly phone: FieldRef<"orders", 'String'>
    readonly status: FieldRef<"orders", 'OrderStatus'>
    readonly total_amount: FieldRef<"orders", 'Decimal'>
    readonly payment_id: FieldRef<"orders", 'String'>
    readonly payment_method: FieldRef<"orders", 'String'>
    readonly created_at: FieldRef<"orders", 'DateTime'>
    readonly updated_at: FieldRef<"orders", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * orders findUnique
   */
  export type ordersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter, which orders to fetch.
     */
    where: ordersWhereUniqueInput
  }

  /**
   * orders findUniqueOrThrow
   */
  export type ordersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter, which orders to fetch.
     */
    where: ordersWhereUniqueInput
  }

  /**
   * orders findFirst
   */
  export type ordersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter, which orders to fetch.
     */
    where?: ordersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: ordersOrderByWithRelationInput | ordersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orders.
     */
    cursor?: ordersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orders.
     */
    distinct?: OrdersScalarFieldEnum | OrdersScalarFieldEnum[]
  }

  /**
   * orders findFirstOrThrow
   */
  export type ordersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter, which orders to fetch.
     */
    where?: ordersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: ordersOrderByWithRelationInput | ordersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orders.
     */
    cursor?: ordersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orders.
     */
    distinct?: OrdersScalarFieldEnum | OrdersScalarFieldEnum[]
  }

  /**
   * orders findMany
   */
  export type ordersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter, which orders to fetch.
     */
    where?: ordersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: ordersOrderByWithRelationInput | ordersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing orders.
     */
    cursor?: ordersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    distinct?: OrdersScalarFieldEnum | OrdersScalarFieldEnum[]
  }

  /**
   * orders create
   */
  export type ordersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * The data needed to create a orders.
     */
    data: XOR<ordersCreateInput, ordersUncheckedCreateInput>
  }

  /**
   * orders createMany
   */
  export type ordersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many orders.
     */
    data: ordersCreateManyInput | ordersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * orders createManyAndReturn
   */
  export type ordersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many orders.
     */
    data: ordersCreateManyInput | ordersCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * orders update
   */
  export type ordersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * The data needed to update a orders.
     */
    data: XOR<ordersUpdateInput, ordersUncheckedUpdateInput>
    /**
     * Choose, which orders to update.
     */
    where: ordersWhereUniqueInput
  }

  /**
   * orders updateMany
   */
  export type ordersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update orders.
     */
    data: XOR<ordersUpdateManyMutationInput, ordersUncheckedUpdateManyInput>
    /**
     * Filter which orders to update
     */
    where?: ordersWhereInput
  }

  /**
   * orders upsert
   */
  export type ordersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * The filter to search for the orders to update in case it exists.
     */
    where: ordersWhereUniqueInput
    /**
     * In case the orders found by the `where` argument doesn't exist, create a new orders with this data.
     */
    create: XOR<ordersCreateInput, ordersUncheckedCreateInput>
    /**
     * In case the orders was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ordersUpdateInput, ordersUncheckedUpdateInput>
  }

  /**
   * orders delete
   */
  export type ordersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter which orders to delete.
     */
    where: ordersWhereUniqueInput
  }

  /**
   * orders deleteMany
   */
  export type ordersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which orders to delete
     */
    where?: ordersWhereInput
  }

  /**
   * orders.order_items
   */
  export type orders$order_itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order_items
     */
    select?: order_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: order_itemsInclude<ExtArgs> | null
    where?: order_itemsWhereInput
    orderBy?: order_itemsOrderByWithRelationInput | order_itemsOrderByWithRelationInput[]
    cursor?: order_itemsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Order_itemsScalarFieldEnum | Order_itemsScalarFieldEnum[]
  }

  /**
   * orders.users
   */
  export type orders$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
  }

  /**
   * orders.user_tickets
   */
  export type orders$user_ticketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_tickets
     */
    select?: user_ticketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_ticketsInclude<ExtArgs> | null
    where?: user_ticketsWhereInput
    orderBy?: user_ticketsOrderByWithRelationInput | user_ticketsOrderByWithRelationInput[]
    cursor?: user_ticketsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: User_ticketsScalarFieldEnum | User_ticketsScalarFieldEnum[]
  }

  /**
   * orders without action
   */
  export type ordersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
  }


  /**
   * Model refund_tickets
   */

  export type AggregateRefund_tickets = {
    _count: Refund_ticketsCountAggregateOutputType | null
    _avg: Refund_ticketsAvgAggregateOutputType | null
    _sum: Refund_ticketsSumAggregateOutputType | null
    _min: Refund_ticketsMinAggregateOutputType | null
    _max: Refund_ticketsMaxAggregateOutputType | null
  }

  export type Refund_ticketsAvgAggregateOutputType = {
    refund_id: number | null
    user_ticket_id: number | null
    refund_amount: Decimal | null
  }

  export type Refund_ticketsSumAggregateOutputType = {
    refund_id: number | null
    user_ticket_id: number | null
    refund_amount: Decimal | null
  }

  export type Refund_ticketsMinAggregateOutputType = {
    refund_id: number | null
    user_ticket_id: number | null
    ticket_number: string | null
    refund_amount: Decimal | null
  }

  export type Refund_ticketsMaxAggregateOutputType = {
    refund_id: number | null
    user_ticket_id: number | null
    ticket_number: string | null
    refund_amount: Decimal | null
  }

  export type Refund_ticketsCountAggregateOutputType = {
    refund_id: number
    user_ticket_id: number
    ticket_number: number
    refund_amount: number
    _all: number
  }


  export type Refund_ticketsAvgAggregateInputType = {
    refund_id?: true
    user_ticket_id?: true
    refund_amount?: true
  }

  export type Refund_ticketsSumAggregateInputType = {
    refund_id?: true
    user_ticket_id?: true
    refund_amount?: true
  }

  export type Refund_ticketsMinAggregateInputType = {
    refund_id?: true
    user_ticket_id?: true
    ticket_number?: true
    refund_amount?: true
  }

  export type Refund_ticketsMaxAggregateInputType = {
    refund_id?: true
    user_ticket_id?: true
    ticket_number?: true
    refund_amount?: true
  }

  export type Refund_ticketsCountAggregateInputType = {
    refund_id?: true
    user_ticket_id?: true
    ticket_number?: true
    refund_amount?: true
    _all?: true
  }

  export type Refund_ticketsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which refund_tickets to aggregate.
     */
    where?: refund_ticketsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of refund_tickets to fetch.
     */
    orderBy?: refund_ticketsOrderByWithRelationInput | refund_ticketsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: refund_ticketsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` refund_tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` refund_tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned refund_tickets
    **/
    _count?: true | Refund_ticketsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Refund_ticketsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Refund_ticketsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Refund_ticketsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Refund_ticketsMaxAggregateInputType
  }

  export type GetRefund_ticketsAggregateType<T extends Refund_ticketsAggregateArgs> = {
        [P in keyof T & keyof AggregateRefund_tickets]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRefund_tickets[P]>
      : GetScalarType<T[P], AggregateRefund_tickets[P]>
  }




  export type refund_ticketsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: refund_ticketsWhereInput
    orderBy?: refund_ticketsOrderByWithAggregationInput | refund_ticketsOrderByWithAggregationInput[]
    by: Refund_ticketsScalarFieldEnum[] | Refund_ticketsScalarFieldEnum
    having?: refund_ticketsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Refund_ticketsCountAggregateInputType | true
    _avg?: Refund_ticketsAvgAggregateInputType
    _sum?: Refund_ticketsSumAggregateInputType
    _min?: Refund_ticketsMinAggregateInputType
    _max?: Refund_ticketsMaxAggregateInputType
  }

  export type Refund_ticketsGroupByOutputType = {
    refund_id: number
    user_ticket_id: number
    ticket_number: string
    refund_amount: Decimal
    _count: Refund_ticketsCountAggregateOutputType | null
    _avg: Refund_ticketsAvgAggregateOutputType | null
    _sum: Refund_ticketsSumAggregateOutputType | null
    _min: Refund_ticketsMinAggregateOutputType | null
    _max: Refund_ticketsMaxAggregateOutputType | null
  }

  type GetRefund_ticketsGroupByPayload<T extends refund_ticketsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Refund_ticketsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Refund_ticketsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Refund_ticketsGroupByOutputType[P]>
            : GetScalarType<T[P], Refund_ticketsGroupByOutputType[P]>
        }
      >
    >


  export type refund_ticketsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    refund_id?: boolean
    user_ticket_id?: boolean
    ticket_number?: boolean
    refund_amount?: boolean
    refunds?: boolean | refundsDefaultArgs<ExtArgs>
    user_tickets?: boolean | user_ticketsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["refund_tickets"]>

  export type refund_ticketsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    refund_id?: boolean
    user_ticket_id?: boolean
    ticket_number?: boolean
    refund_amount?: boolean
    refunds?: boolean | refundsDefaultArgs<ExtArgs>
    user_tickets?: boolean | user_ticketsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["refund_tickets"]>

  export type refund_ticketsSelectScalar = {
    refund_id?: boolean
    user_ticket_id?: boolean
    ticket_number?: boolean
    refund_amount?: boolean
  }

  export type refund_ticketsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    refunds?: boolean | refundsDefaultArgs<ExtArgs>
    user_tickets?: boolean | user_ticketsDefaultArgs<ExtArgs>
  }
  export type refund_ticketsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    refunds?: boolean | refundsDefaultArgs<ExtArgs>
    user_tickets?: boolean | user_ticketsDefaultArgs<ExtArgs>
  }

  export type $refund_ticketsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "refund_tickets"
    objects: {
      refunds: Prisma.$refundsPayload<ExtArgs>
      user_tickets: Prisma.$user_ticketsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      refund_id: number
      user_ticket_id: number
      ticket_number: string
      refund_amount: Prisma.Decimal
    }, ExtArgs["result"]["refund_tickets"]>
    composites: {}
  }

  type refund_ticketsGetPayload<S extends boolean | null | undefined | refund_ticketsDefaultArgs> = $Result.GetResult<Prisma.$refund_ticketsPayload, S>

  type refund_ticketsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<refund_ticketsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Refund_ticketsCountAggregateInputType | true
    }

  export interface refund_ticketsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['refund_tickets'], meta: { name: 'refund_tickets' } }
    /**
     * Find zero or one Refund_tickets that matches the filter.
     * @param {refund_ticketsFindUniqueArgs} args - Arguments to find a Refund_tickets
     * @example
     * // Get one Refund_tickets
     * const refund_tickets = await prisma.refund_tickets.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends refund_ticketsFindUniqueArgs>(args: SelectSubset<T, refund_ticketsFindUniqueArgs<ExtArgs>>): Prisma__refund_ticketsClient<$Result.GetResult<Prisma.$refund_ticketsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Refund_tickets that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {refund_ticketsFindUniqueOrThrowArgs} args - Arguments to find a Refund_tickets
     * @example
     * // Get one Refund_tickets
     * const refund_tickets = await prisma.refund_tickets.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends refund_ticketsFindUniqueOrThrowArgs>(args: SelectSubset<T, refund_ticketsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__refund_ticketsClient<$Result.GetResult<Prisma.$refund_ticketsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Refund_tickets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {refund_ticketsFindFirstArgs} args - Arguments to find a Refund_tickets
     * @example
     * // Get one Refund_tickets
     * const refund_tickets = await prisma.refund_tickets.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends refund_ticketsFindFirstArgs>(args?: SelectSubset<T, refund_ticketsFindFirstArgs<ExtArgs>>): Prisma__refund_ticketsClient<$Result.GetResult<Prisma.$refund_ticketsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Refund_tickets that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {refund_ticketsFindFirstOrThrowArgs} args - Arguments to find a Refund_tickets
     * @example
     * // Get one Refund_tickets
     * const refund_tickets = await prisma.refund_tickets.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends refund_ticketsFindFirstOrThrowArgs>(args?: SelectSubset<T, refund_ticketsFindFirstOrThrowArgs<ExtArgs>>): Prisma__refund_ticketsClient<$Result.GetResult<Prisma.$refund_ticketsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Refund_tickets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {refund_ticketsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Refund_tickets
     * const refund_tickets = await prisma.refund_tickets.findMany()
     * 
     * // Get first 10 Refund_tickets
     * const refund_tickets = await prisma.refund_tickets.findMany({ take: 10 })
     * 
     * // Only select the `refund_id`
     * const refund_ticketsWithRefund_idOnly = await prisma.refund_tickets.findMany({ select: { refund_id: true } })
     * 
     */
    findMany<T extends refund_ticketsFindManyArgs>(args?: SelectSubset<T, refund_ticketsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$refund_ticketsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Refund_tickets.
     * @param {refund_ticketsCreateArgs} args - Arguments to create a Refund_tickets.
     * @example
     * // Create one Refund_tickets
     * const Refund_tickets = await prisma.refund_tickets.create({
     *   data: {
     *     // ... data to create a Refund_tickets
     *   }
     * })
     * 
     */
    create<T extends refund_ticketsCreateArgs>(args: SelectSubset<T, refund_ticketsCreateArgs<ExtArgs>>): Prisma__refund_ticketsClient<$Result.GetResult<Prisma.$refund_ticketsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Refund_tickets.
     * @param {refund_ticketsCreateManyArgs} args - Arguments to create many Refund_tickets.
     * @example
     * // Create many Refund_tickets
     * const refund_tickets = await prisma.refund_tickets.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends refund_ticketsCreateManyArgs>(args?: SelectSubset<T, refund_ticketsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Refund_tickets and returns the data saved in the database.
     * @param {refund_ticketsCreateManyAndReturnArgs} args - Arguments to create many Refund_tickets.
     * @example
     * // Create many Refund_tickets
     * const refund_tickets = await prisma.refund_tickets.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Refund_tickets and only return the `refund_id`
     * const refund_ticketsWithRefund_idOnly = await prisma.refund_tickets.createManyAndReturn({ 
     *   select: { refund_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends refund_ticketsCreateManyAndReturnArgs>(args?: SelectSubset<T, refund_ticketsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$refund_ticketsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Refund_tickets.
     * @param {refund_ticketsDeleteArgs} args - Arguments to delete one Refund_tickets.
     * @example
     * // Delete one Refund_tickets
     * const Refund_tickets = await prisma.refund_tickets.delete({
     *   where: {
     *     // ... filter to delete one Refund_tickets
     *   }
     * })
     * 
     */
    delete<T extends refund_ticketsDeleteArgs>(args: SelectSubset<T, refund_ticketsDeleteArgs<ExtArgs>>): Prisma__refund_ticketsClient<$Result.GetResult<Prisma.$refund_ticketsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Refund_tickets.
     * @param {refund_ticketsUpdateArgs} args - Arguments to update one Refund_tickets.
     * @example
     * // Update one Refund_tickets
     * const refund_tickets = await prisma.refund_tickets.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends refund_ticketsUpdateArgs>(args: SelectSubset<T, refund_ticketsUpdateArgs<ExtArgs>>): Prisma__refund_ticketsClient<$Result.GetResult<Prisma.$refund_ticketsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Refund_tickets.
     * @param {refund_ticketsDeleteManyArgs} args - Arguments to filter Refund_tickets to delete.
     * @example
     * // Delete a few Refund_tickets
     * const { count } = await prisma.refund_tickets.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends refund_ticketsDeleteManyArgs>(args?: SelectSubset<T, refund_ticketsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Refund_tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {refund_ticketsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Refund_tickets
     * const refund_tickets = await prisma.refund_tickets.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends refund_ticketsUpdateManyArgs>(args: SelectSubset<T, refund_ticketsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Refund_tickets.
     * @param {refund_ticketsUpsertArgs} args - Arguments to update or create a Refund_tickets.
     * @example
     * // Update or create a Refund_tickets
     * const refund_tickets = await prisma.refund_tickets.upsert({
     *   create: {
     *     // ... data to create a Refund_tickets
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Refund_tickets we want to update
     *   }
     * })
     */
    upsert<T extends refund_ticketsUpsertArgs>(args: SelectSubset<T, refund_ticketsUpsertArgs<ExtArgs>>): Prisma__refund_ticketsClient<$Result.GetResult<Prisma.$refund_ticketsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Refund_tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {refund_ticketsCountArgs} args - Arguments to filter Refund_tickets to count.
     * @example
     * // Count the number of Refund_tickets
     * const count = await prisma.refund_tickets.count({
     *   where: {
     *     // ... the filter for the Refund_tickets we want to count
     *   }
     * })
    **/
    count<T extends refund_ticketsCountArgs>(
      args?: Subset<T, refund_ticketsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Refund_ticketsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Refund_tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Refund_ticketsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Refund_ticketsAggregateArgs>(args: Subset<T, Refund_ticketsAggregateArgs>): Prisma.PrismaPromise<GetRefund_ticketsAggregateType<T>>

    /**
     * Group by Refund_tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {refund_ticketsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends refund_ticketsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: refund_ticketsGroupByArgs['orderBy'] }
        : { orderBy?: refund_ticketsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, refund_ticketsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRefund_ticketsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the refund_tickets model
   */
  readonly fields: refund_ticketsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for refund_tickets.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__refund_ticketsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    refunds<T extends refundsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, refundsDefaultArgs<ExtArgs>>): Prisma__refundsClient<$Result.GetResult<Prisma.$refundsPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user_tickets<T extends user_ticketsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, user_ticketsDefaultArgs<ExtArgs>>): Prisma__user_ticketsClient<$Result.GetResult<Prisma.$user_ticketsPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the refund_tickets model
   */ 
  interface refund_ticketsFieldRefs {
    readonly refund_id: FieldRef<"refund_tickets", 'Int'>
    readonly user_ticket_id: FieldRef<"refund_tickets", 'Int'>
    readonly ticket_number: FieldRef<"refund_tickets", 'String'>
    readonly refund_amount: FieldRef<"refund_tickets", 'Decimal'>
  }
    

  // Custom InputTypes
  /**
   * refund_tickets findUnique
   */
  export type refund_ticketsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the refund_tickets
     */
    select?: refund_ticketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: refund_ticketsInclude<ExtArgs> | null
    /**
     * Filter, which refund_tickets to fetch.
     */
    where: refund_ticketsWhereUniqueInput
  }

  /**
   * refund_tickets findUniqueOrThrow
   */
  export type refund_ticketsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the refund_tickets
     */
    select?: refund_ticketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: refund_ticketsInclude<ExtArgs> | null
    /**
     * Filter, which refund_tickets to fetch.
     */
    where: refund_ticketsWhereUniqueInput
  }

  /**
   * refund_tickets findFirst
   */
  export type refund_ticketsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the refund_tickets
     */
    select?: refund_ticketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: refund_ticketsInclude<ExtArgs> | null
    /**
     * Filter, which refund_tickets to fetch.
     */
    where?: refund_ticketsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of refund_tickets to fetch.
     */
    orderBy?: refund_ticketsOrderByWithRelationInput | refund_ticketsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for refund_tickets.
     */
    cursor?: refund_ticketsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` refund_tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` refund_tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of refund_tickets.
     */
    distinct?: Refund_ticketsScalarFieldEnum | Refund_ticketsScalarFieldEnum[]
  }

  /**
   * refund_tickets findFirstOrThrow
   */
  export type refund_ticketsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the refund_tickets
     */
    select?: refund_ticketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: refund_ticketsInclude<ExtArgs> | null
    /**
     * Filter, which refund_tickets to fetch.
     */
    where?: refund_ticketsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of refund_tickets to fetch.
     */
    orderBy?: refund_ticketsOrderByWithRelationInput | refund_ticketsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for refund_tickets.
     */
    cursor?: refund_ticketsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` refund_tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` refund_tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of refund_tickets.
     */
    distinct?: Refund_ticketsScalarFieldEnum | Refund_ticketsScalarFieldEnum[]
  }

  /**
   * refund_tickets findMany
   */
  export type refund_ticketsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the refund_tickets
     */
    select?: refund_ticketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: refund_ticketsInclude<ExtArgs> | null
    /**
     * Filter, which refund_tickets to fetch.
     */
    where?: refund_ticketsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of refund_tickets to fetch.
     */
    orderBy?: refund_ticketsOrderByWithRelationInput | refund_ticketsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing refund_tickets.
     */
    cursor?: refund_ticketsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` refund_tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` refund_tickets.
     */
    skip?: number
    distinct?: Refund_ticketsScalarFieldEnum | Refund_ticketsScalarFieldEnum[]
  }

  /**
   * refund_tickets create
   */
  export type refund_ticketsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the refund_tickets
     */
    select?: refund_ticketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: refund_ticketsInclude<ExtArgs> | null
    /**
     * The data needed to create a refund_tickets.
     */
    data: XOR<refund_ticketsCreateInput, refund_ticketsUncheckedCreateInput>
  }

  /**
   * refund_tickets createMany
   */
  export type refund_ticketsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many refund_tickets.
     */
    data: refund_ticketsCreateManyInput | refund_ticketsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * refund_tickets createManyAndReturn
   */
  export type refund_ticketsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the refund_tickets
     */
    select?: refund_ticketsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many refund_tickets.
     */
    data: refund_ticketsCreateManyInput | refund_ticketsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: refund_ticketsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * refund_tickets update
   */
  export type refund_ticketsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the refund_tickets
     */
    select?: refund_ticketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: refund_ticketsInclude<ExtArgs> | null
    /**
     * The data needed to update a refund_tickets.
     */
    data: XOR<refund_ticketsUpdateInput, refund_ticketsUncheckedUpdateInput>
    /**
     * Choose, which refund_tickets to update.
     */
    where: refund_ticketsWhereUniqueInput
  }

  /**
   * refund_tickets updateMany
   */
  export type refund_ticketsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update refund_tickets.
     */
    data: XOR<refund_ticketsUpdateManyMutationInput, refund_ticketsUncheckedUpdateManyInput>
    /**
     * Filter which refund_tickets to update
     */
    where?: refund_ticketsWhereInput
  }

  /**
   * refund_tickets upsert
   */
  export type refund_ticketsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the refund_tickets
     */
    select?: refund_ticketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: refund_ticketsInclude<ExtArgs> | null
    /**
     * The filter to search for the refund_tickets to update in case it exists.
     */
    where: refund_ticketsWhereUniqueInput
    /**
     * In case the refund_tickets found by the `where` argument doesn't exist, create a new refund_tickets with this data.
     */
    create: XOR<refund_ticketsCreateInput, refund_ticketsUncheckedCreateInput>
    /**
     * In case the refund_tickets was found with the provided `where` argument, update it with this data.
     */
    update: XOR<refund_ticketsUpdateInput, refund_ticketsUncheckedUpdateInput>
  }

  /**
   * refund_tickets delete
   */
  export type refund_ticketsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the refund_tickets
     */
    select?: refund_ticketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: refund_ticketsInclude<ExtArgs> | null
    /**
     * Filter which refund_tickets to delete.
     */
    where: refund_ticketsWhereUniqueInput
  }

  /**
   * refund_tickets deleteMany
   */
  export type refund_ticketsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which refund_tickets to delete
     */
    where?: refund_ticketsWhereInput
  }

  /**
   * refund_tickets without action
   */
  export type refund_ticketsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the refund_tickets
     */
    select?: refund_ticketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: refund_ticketsInclude<ExtArgs> | null
  }


  /**
   * Model refunds
   */

  export type AggregateRefunds = {
    _count: RefundsCountAggregateOutputType | null
    _avg: RefundsAvgAggregateOutputType | null
    _sum: RefundsSumAggregateOutputType | null
    _min: RefundsMinAggregateOutputType | null
    _max: RefundsMaxAggregateOutputType | null
  }

  export type RefundsAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    refund_amount: Decimal | null
  }

  export type RefundsSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    refund_amount: Decimal | null
  }

  export type RefundsMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    email: string | null
    phone: string | null
    full_name: string | null
    account_number: string | null
    bank_name: string | null
    bik: string | null
    correspondent_account: string | null
    inn: string | null
    kpp: string | null
    okpo: string | null
    ogrn: string | null
    refund_amount: Decimal | null
    refund_reason: string | null
    created_at: Date | null
    updated_at: Date | null
    deleted_at: Date | null
  }

  export type RefundsMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    email: string | null
    phone: string | null
    full_name: string | null
    account_number: string | null
    bank_name: string | null
    bik: string | null
    correspondent_account: string | null
    inn: string | null
    kpp: string | null
    okpo: string | null
    ogrn: string | null
    refund_amount: Decimal | null
    refund_reason: string | null
    created_at: Date | null
    updated_at: Date | null
    deleted_at: Date | null
  }

  export type RefundsCountAggregateOutputType = {
    id: number
    user_id: number
    email: number
    phone: number
    full_name: number
    account_number: number
    bank_name: number
    bik: number
    correspondent_account: number
    inn: number
    kpp: number
    okpo: number
    ogrn: number
    refund_amount: number
    refund_reason: number
    created_at: number
    updated_at: number
    deleted_at: number
    _all: number
  }


  export type RefundsAvgAggregateInputType = {
    id?: true
    user_id?: true
    refund_amount?: true
  }

  export type RefundsSumAggregateInputType = {
    id?: true
    user_id?: true
    refund_amount?: true
  }

  export type RefundsMinAggregateInputType = {
    id?: true
    user_id?: true
    email?: true
    phone?: true
    full_name?: true
    account_number?: true
    bank_name?: true
    bik?: true
    correspondent_account?: true
    inn?: true
    kpp?: true
    okpo?: true
    ogrn?: true
    refund_amount?: true
    refund_reason?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
  }

  export type RefundsMaxAggregateInputType = {
    id?: true
    user_id?: true
    email?: true
    phone?: true
    full_name?: true
    account_number?: true
    bank_name?: true
    bik?: true
    correspondent_account?: true
    inn?: true
    kpp?: true
    okpo?: true
    ogrn?: true
    refund_amount?: true
    refund_reason?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
  }

  export type RefundsCountAggregateInputType = {
    id?: true
    user_id?: true
    email?: true
    phone?: true
    full_name?: true
    account_number?: true
    bank_name?: true
    bik?: true
    correspondent_account?: true
    inn?: true
    kpp?: true
    okpo?: true
    ogrn?: true
    refund_amount?: true
    refund_reason?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
    _all?: true
  }

  export type RefundsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which refunds to aggregate.
     */
    where?: refundsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of refunds to fetch.
     */
    orderBy?: refundsOrderByWithRelationInput | refundsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: refundsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` refunds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` refunds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned refunds
    **/
    _count?: true | RefundsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RefundsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RefundsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RefundsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RefundsMaxAggregateInputType
  }

  export type GetRefundsAggregateType<T extends RefundsAggregateArgs> = {
        [P in keyof T & keyof AggregateRefunds]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRefunds[P]>
      : GetScalarType<T[P], AggregateRefunds[P]>
  }




  export type refundsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: refundsWhereInput
    orderBy?: refundsOrderByWithAggregationInput | refundsOrderByWithAggregationInput[]
    by: RefundsScalarFieldEnum[] | RefundsScalarFieldEnum
    having?: refundsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RefundsCountAggregateInputType | true
    _avg?: RefundsAvgAggregateInputType
    _sum?: RefundsSumAggregateInputType
    _min?: RefundsMinAggregateInputType
    _max?: RefundsMaxAggregateInputType
  }

  export type RefundsGroupByOutputType = {
    id: number
    user_id: number | null
    email: string
    phone: string
    full_name: string
    account_number: string
    bank_name: string
    bik: string
    correspondent_account: string
    inn: string
    kpp: string | null
    okpo: string | null
    ogrn: string | null
    refund_amount: Decimal
    refund_reason: string
    created_at: Date
    updated_at: Date
    deleted_at: Date | null
    _count: RefundsCountAggregateOutputType | null
    _avg: RefundsAvgAggregateOutputType | null
    _sum: RefundsSumAggregateOutputType | null
    _min: RefundsMinAggregateOutputType | null
    _max: RefundsMaxAggregateOutputType | null
  }

  type GetRefundsGroupByPayload<T extends refundsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RefundsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RefundsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RefundsGroupByOutputType[P]>
            : GetScalarType<T[P], RefundsGroupByOutputType[P]>
        }
      >
    >


  export type refundsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    email?: boolean
    phone?: boolean
    full_name?: boolean
    account_number?: boolean
    bank_name?: boolean
    bik?: boolean
    correspondent_account?: boolean
    inn?: boolean
    kpp?: boolean
    okpo?: boolean
    ogrn?: boolean
    refund_amount?: boolean
    refund_reason?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
    refund_tickets?: boolean | refunds$refund_ticketsArgs<ExtArgs>
    users?: boolean | refunds$usersArgs<ExtArgs>
    user_tickets?: boolean | refunds$user_ticketsArgs<ExtArgs>
    _count?: boolean | RefundsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["refunds"]>

  export type refundsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    email?: boolean
    phone?: boolean
    full_name?: boolean
    account_number?: boolean
    bank_name?: boolean
    bik?: boolean
    correspondent_account?: boolean
    inn?: boolean
    kpp?: boolean
    okpo?: boolean
    ogrn?: boolean
    refund_amount?: boolean
    refund_reason?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
    users?: boolean | refunds$usersArgs<ExtArgs>
  }, ExtArgs["result"]["refunds"]>

  export type refundsSelectScalar = {
    id?: boolean
    user_id?: boolean
    email?: boolean
    phone?: boolean
    full_name?: boolean
    account_number?: boolean
    bank_name?: boolean
    bik?: boolean
    correspondent_account?: boolean
    inn?: boolean
    kpp?: boolean
    okpo?: boolean
    ogrn?: boolean
    refund_amount?: boolean
    refund_reason?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
  }

  export type refundsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    refund_tickets?: boolean | refunds$refund_ticketsArgs<ExtArgs>
    users?: boolean | refunds$usersArgs<ExtArgs>
    user_tickets?: boolean | refunds$user_ticketsArgs<ExtArgs>
    _count?: boolean | RefundsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type refundsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | refunds$usersArgs<ExtArgs>
  }

  export type $refundsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "refunds"
    objects: {
      refund_tickets: Prisma.$refund_ticketsPayload<ExtArgs>[]
      users: Prisma.$usersPayload<ExtArgs> | null
      user_tickets: Prisma.$user_ticketsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: number | null
      email: string
      phone: string
      full_name: string
      account_number: string
      bank_name: string
      bik: string
      correspondent_account: string
      inn: string
      kpp: string | null
      okpo: string | null
      ogrn: string | null
      refund_amount: Prisma.Decimal
      refund_reason: string
      created_at: Date
      updated_at: Date
      deleted_at: Date | null
    }, ExtArgs["result"]["refunds"]>
    composites: {}
  }

  type refundsGetPayload<S extends boolean | null | undefined | refundsDefaultArgs> = $Result.GetResult<Prisma.$refundsPayload, S>

  type refundsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<refundsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RefundsCountAggregateInputType | true
    }

  export interface refundsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['refunds'], meta: { name: 'refunds' } }
    /**
     * Find zero or one Refunds that matches the filter.
     * @param {refundsFindUniqueArgs} args - Arguments to find a Refunds
     * @example
     * // Get one Refunds
     * const refunds = await prisma.refunds.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends refundsFindUniqueArgs>(args: SelectSubset<T, refundsFindUniqueArgs<ExtArgs>>): Prisma__refundsClient<$Result.GetResult<Prisma.$refundsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Refunds that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {refundsFindUniqueOrThrowArgs} args - Arguments to find a Refunds
     * @example
     * // Get one Refunds
     * const refunds = await prisma.refunds.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends refundsFindUniqueOrThrowArgs>(args: SelectSubset<T, refundsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__refundsClient<$Result.GetResult<Prisma.$refundsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Refunds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {refundsFindFirstArgs} args - Arguments to find a Refunds
     * @example
     * // Get one Refunds
     * const refunds = await prisma.refunds.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends refundsFindFirstArgs>(args?: SelectSubset<T, refundsFindFirstArgs<ExtArgs>>): Prisma__refundsClient<$Result.GetResult<Prisma.$refundsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Refunds that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {refundsFindFirstOrThrowArgs} args - Arguments to find a Refunds
     * @example
     * // Get one Refunds
     * const refunds = await prisma.refunds.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends refundsFindFirstOrThrowArgs>(args?: SelectSubset<T, refundsFindFirstOrThrowArgs<ExtArgs>>): Prisma__refundsClient<$Result.GetResult<Prisma.$refundsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Refunds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {refundsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Refunds
     * const refunds = await prisma.refunds.findMany()
     * 
     * // Get first 10 Refunds
     * const refunds = await prisma.refunds.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const refundsWithIdOnly = await prisma.refunds.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends refundsFindManyArgs>(args?: SelectSubset<T, refundsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$refundsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Refunds.
     * @param {refundsCreateArgs} args - Arguments to create a Refunds.
     * @example
     * // Create one Refunds
     * const Refunds = await prisma.refunds.create({
     *   data: {
     *     // ... data to create a Refunds
     *   }
     * })
     * 
     */
    create<T extends refundsCreateArgs>(args: SelectSubset<T, refundsCreateArgs<ExtArgs>>): Prisma__refundsClient<$Result.GetResult<Prisma.$refundsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Refunds.
     * @param {refundsCreateManyArgs} args - Arguments to create many Refunds.
     * @example
     * // Create many Refunds
     * const refunds = await prisma.refunds.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends refundsCreateManyArgs>(args?: SelectSubset<T, refundsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Refunds and returns the data saved in the database.
     * @param {refundsCreateManyAndReturnArgs} args - Arguments to create many Refunds.
     * @example
     * // Create many Refunds
     * const refunds = await prisma.refunds.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Refunds and only return the `id`
     * const refundsWithIdOnly = await prisma.refunds.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends refundsCreateManyAndReturnArgs>(args?: SelectSubset<T, refundsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$refundsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Refunds.
     * @param {refundsDeleteArgs} args - Arguments to delete one Refunds.
     * @example
     * // Delete one Refunds
     * const Refunds = await prisma.refunds.delete({
     *   where: {
     *     // ... filter to delete one Refunds
     *   }
     * })
     * 
     */
    delete<T extends refundsDeleteArgs>(args: SelectSubset<T, refundsDeleteArgs<ExtArgs>>): Prisma__refundsClient<$Result.GetResult<Prisma.$refundsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Refunds.
     * @param {refundsUpdateArgs} args - Arguments to update one Refunds.
     * @example
     * // Update one Refunds
     * const refunds = await prisma.refunds.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends refundsUpdateArgs>(args: SelectSubset<T, refundsUpdateArgs<ExtArgs>>): Prisma__refundsClient<$Result.GetResult<Prisma.$refundsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Refunds.
     * @param {refundsDeleteManyArgs} args - Arguments to filter Refunds to delete.
     * @example
     * // Delete a few Refunds
     * const { count } = await prisma.refunds.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends refundsDeleteManyArgs>(args?: SelectSubset<T, refundsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Refunds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {refundsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Refunds
     * const refunds = await prisma.refunds.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends refundsUpdateManyArgs>(args: SelectSubset<T, refundsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Refunds.
     * @param {refundsUpsertArgs} args - Arguments to update or create a Refunds.
     * @example
     * // Update or create a Refunds
     * const refunds = await prisma.refunds.upsert({
     *   create: {
     *     // ... data to create a Refunds
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Refunds we want to update
     *   }
     * })
     */
    upsert<T extends refundsUpsertArgs>(args: SelectSubset<T, refundsUpsertArgs<ExtArgs>>): Prisma__refundsClient<$Result.GetResult<Prisma.$refundsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Refunds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {refundsCountArgs} args - Arguments to filter Refunds to count.
     * @example
     * // Count the number of Refunds
     * const count = await prisma.refunds.count({
     *   where: {
     *     // ... the filter for the Refunds we want to count
     *   }
     * })
    **/
    count<T extends refundsCountArgs>(
      args?: Subset<T, refundsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RefundsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Refunds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RefundsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RefundsAggregateArgs>(args: Subset<T, RefundsAggregateArgs>): Prisma.PrismaPromise<GetRefundsAggregateType<T>>

    /**
     * Group by Refunds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {refundsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends refundsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: refundsGroupByArgs['orderBy'] }
        : { orderBy?: refundsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, refundsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRefundsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the refunds model
   */
  readonly fields: refundsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for refunds.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__refundsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    refund_tickets<T extends refunds$refund_ticketsArgs<ExtArgs> = {}>(args?: Subset<T, refunds$refund_ticketsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$refund_ticketsPayload<ExtArgs>, T, "findMany"> | Null>
    users<T extends refunds$usersArgs<ExtArgs> = {}>(args?: Subset<T, refunds$usersArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    user_tickets<T extends refunds$user_ticketsArgs<ExtArgs> = {}>(args?: Subset<T, refunds$user_ticketsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_ticketsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the refunds model
   */ 
  interface refundsFieldRefs {
    readonly id: FieldRef<"refunds", 'Int'>
    readonly user_id: FieldRef<"refunds", 'Int'>
    readonly email: FieldRef<"refunds", 'String'>
    readonly phone: FieldRef<"refunds", 'String'>
    readonly full_name: FieldRef<"refunds", 'String'>
    readonly account_number: FieldRef<"refunds", 'String'>
    readonly bank_name: FieldRef<"refunds", 'String'>
    readonly bik: FieldRef<"refunds", 'String'>
    readonly correspondent_account: FieldRef<"refunds", 'String'>
    readonly inn: FieldRef<"refunds", 'String'>
    readonly kpp: FieldRef<"refunds", 'String'>
    readonly okpo: FieldRef<"refunds", 'String'>
    readonly ogrn: FieldRef<"refunds", 'String'>
    readonly refund_amount: FieldRef<"refunds", 'Decimal'>
    readonly refund_reason: FieldRef<"refunds", 'String'>
    readonly created_at: FieldRef<"refunds", 'DateTime'>
    readonly updated_at: FieldRef<"refunds", 'DateTime'>
    readonly deleted_at: FieldRef<"refunds", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * refunds findUnique
   */
  export type refundsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the refunds
     */
    select?: refundsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: refundsInclude<ExtArgs> | null
    /**
     * Filter, which refunds to fetch.
     */
    where: refundsWhereUniqueInput
  }

  /**
   * refunds findUniqueOrThrow
   */
  export type refundsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the refunds
     */
    select?: refundsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: refundsInclude<ExtArgs> | null
    /**
     * Filter, which refunds to fetch.
     */
    where: refundsWhereUniqueInput
  }

  /**
   * refunds findFirst
   */
  export type refundsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the refunds
     */
    select?: refundsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: refundsInclude<ExtArgs> | null
    /**
     * Filter, which refunds to fetch.
     */
    where?: refundsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of refunds to fetch.
     */
    orderBy?: refundsOrderByWithRelationInput | refundsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for refunds.
     */
    cursor?: refundsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` refunds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` refunds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of refunds.
     */
    distinct?: RefundsScalarFieldEnum | RefundsScalarFieldEnum[]
  }

  /**
   * refunds findFirstOrThrow
   */
  export type refundsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the refunds
     */
    select?: refundsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: refundsInclude<ExtArgs> | null
    /**
     * Filter, which refunds to fetch.
     */
    where?: refundsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of refunds to fetch.
     */
    orderBy?: refundsOrderByWithRelationInput | refundsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for refunds.
     */
    cursor?: refundsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` refunds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` refunds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of refunds.
     */
    distinct?: RefundsScalarFieldEnum | RefundsScalarFieldEnum[]
  }

  /**
   * refunds findMany
   */
  export type refundsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the refunds
     */
    select?: refundsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: refundsInclude<ExtArgs> | null
    /**
     * Filter, which refunds to fetch.
     */
    where?: refundsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of refunds to fetch.
     */
    orderBy?: refundsOrderByWithRelationInput | refundsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing refunds.
     */
    cursor?: refundsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` refunds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` refunds.
     */
    skip?: number
    distinct?: RefundsScalarFieldEnum | RefundsScalarFieldEnum[]
  }

  /**
   * refunds create
   */
  export type refundsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the refunds
     */
    select?: refundsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: refundsInclude<ExtArgs> | null
    /**
     * The data needed to create a refunds.
     */
    data: XOR<refundsCreateInput, refundsUncheckedCreateInput>
  }

  /**
   * refunds createMany
   */
  export type refundsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many refunds.
     */
    data: refundsCreateManyInput | refundsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * refunds createManyAndReturn
   */
  export type refundsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the refunds
     */
    select?: refundsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many refunds.
     */
    data: refundsCreateManyInput | refundsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: refundsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * refunds update
   */
  export type refundsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the refunds
     */
    select?: refundsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: refundsInclude<ExtArgs> | null
    /**
     * The data needed to update a refunds.
     */
    data: XOR<refundsUpdateInput, refundsUncheckedUpdateInput>
    /**
     * Choose, which refunds to update.
     */
    where: refundsWhereUniqueInput
  }

  /**
   * refunds updateMany
   */
  export type refundsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update refunds.
     */
    data: XOR<refundsUpdateManyMutationInput, refundsUncheckedUpdateManyInput>
    /**
     * Filter which refunds to update
     */
    where?: refundsWhereInput
  }

  /**
   * refunds upsert
   */
  export type refundsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the refunds
     */
    select?: refundsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: refundsInclude<ExtArgs> | null
    /**
     * The filter to search for the refunds to update in case it exists.
     */
    where: refundsWhereUniqueInput
    /**
     * In case the refunds found by the `where` argument doesn't exist, create a new refunds with this data.
     */
    create: XOR<refundsCreateInput, refundsUncheckedCreateInput>
    /**
     * In case the refunds was found with the provided `where` argument, update it with this data.
     */
    update: XOR<refundsUpdateInput, refundsUncheckedUpdateInput>
  }

  /**
   * refunds delete
   */
  export type refundsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the refunds
     */
    select?: refundsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: refundsInclude<ExtArgs> | null
    /**
     * Filter which refunds to delete.
     */
    where: refundsWhereUniqueInput
  }

  /**
   * refunds deleteMany
   */
  export type refundsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which refunds to delete
     */
    where?: refundsWhereInput
  }

  /**
   * refunds.refund_tickets
   */
  export type refunds$refund_ticketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the refund_tickets
     */
    select?: refund_ticketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: refund_ticketsInclude<ExtArgs> | null
    where?: refund_ticketsWhereInput
    orderBy?: refund_ticketsOrderByWithRelationInput | refund_ticketsOrderByWithRelationInput[]
    cursor?: refund_ticketsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Refund_ticketsScalarFieldEnum | Refund_ticketsScalarFieldEnum[]
  }

  /**
   * refunds.users
   */
  export type refunds$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
  }

  /**
   * refunds.user_tickets
   */
  export type refunds$user_ticketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_tickets
     */
    select?: user_ticketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_ticketsInclude<ExtArgs> | null
    where?: user_ticketsWhereInput
    orderBy?: user_ticketsOrderByWithRelationInput | user_ticketsOrderByWithRelationInput[]
    cursor?: user_ticketsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: User_ticketsScalarFieldEnum | User_ticketsScalarFieldEnum[]
  }

  /**
   * refunds without action
   */
  export type refundsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the refunds
     */
    select?: refundsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: refundsInclude<ExtArgs> | null
  }


  /**
   * Model tickets
   */

  export type AggregateTickets = {
    _count: TicketsCountAggregateOutputType | null
    _avg: TicketsAvgAggregateOutputType | null
    _sum: TicketsSumAggregateOutputType | null
    _min: TicketsMinAggregateOutputType | null
    _max: TicketsMaxAggregateOutputType | null
  }

  export type TicketsAvgAggregateOutputType = {
    id: number | null
    price: Decimal | null
    user_id: number | null
  }

  export type TicketsSumAggregateOutputType = {
    id: number | null
    price: Decimal | null
    user_id: number | null
  }

  export type TicketsMinAggregateOutputType = {
    id: number | null
    title: string | null
    short_description: string | null
    description: string | null
    image_url: string | null
    event_date: Date | null
    event_location: string | null
    price: Decimal | null
    is_used: boolean | null
    qr_code: string | null
    ticket_number: string | null
    user_id: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type TicketsMaxAggregateOutputType = {
    id: number | null
    title: string | null
    short_description: string | null
    description: string | null
    image_url: string | null
    event_date: Date | null
    event_location: string | null
    price: Decimal | null
    is_used: boolean | null
    qr_code: string | null
    ticket_number: string | null
    user_id: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type TicketsCountAggregateOutputType = {
    id: number
    title: number
    short_description: number
    description: number
    image_url: number
    event_date: number
    event_location: number
    price: number
    is_used: number
    qr_code: number
    ticket_number: number
    user_id: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type TicketsAvgAggregateInputType = {
    id?: true
    price?: true
    user_id?: true
  }

  export type TicketsSumAggregateInputType = {
    id?: true
    price?: true
    user_id?: true
  }

  export type TicketsMinAggregateInputType = {
    id?: true
    title?: true
    short_description?: true
    description?: true
    image_url?: true
    event_date?: true
    event_location?: true
    price?: true
    is_used?: true
    qr_code?: true
    ticket_number?: true
    user_id?: true
    created_at?: true
    updated_at?: true
  }

  export type TicketsMaxAggregateInputType = {
    id?: true
    title?: true
    short_description?: true
    description?: true
    image_url?: true
    event_date?: true
    event_location?: true
    price?: true
    is_used?: true
    qr_code?: true
    ticket_number?: true
    user_id?: true
    created_at?: true
    updated_at?: true
  }

  export type TicketsCountAggregateInputType = {
    id?: true
    title?: true
    short_description?: true
    description?: true
    image_url?: true
    event_date?: true
    event_location?: true
    price?: true
    is_used?: true
    qr_code?: true
    ticket_number?: true
    user_id?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type TicketsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tickets to aggregate.
     */
    where?: ticketsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tickets to fetch.
     */
    orderBy?: ticketsOrderByWithRelationInput | ticketsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ticketsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tickets
    **/
    _count?: true | TicketsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TicketsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TicketsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TicketsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TicketsMaxAggregateInputType
  }

  export type GetTicketsAggregateType<T extends TicketsAggregateArgs> = {
        [P in keyof T & keyof AggregateTickets]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTickets[P]>
      : GetScalarType<T[P], AggregateTickets[P]>
  }




  export type ticketsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ticketsWhereInput
    orderBy?: ticketsOrderByWithAggregationInput | ticketsOrderByWithAggregationInput[]
    by: TicketsScalarFieldEnum[] | TicketsScalarFieldEnum
    having?: ticketsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TicketsCountAggregateInputType | true
    _avg?: TicketsAvgAggregateInputType
    _sum?: TicketsSumAggregateInputType
    _min?: TicketsMinAggregateInputType
    _max?: TicketsMaxAggregateInputType
  }

  export type TicketsGroupByOutputType = {
    id: number
    title: string
    short_description: string | null
    description: string | null
    image_url: string | null
    event_date: Date
    event_location: string
    price: Decimal
    is_used: boolean
    qr_code: string | null
    ticket_number: string
    user_id: number | null
    created_at: Date
    updated_at: Date
    _count: TicketsCountAggregateOutputType | null
    _avg: TicketsAvgAggregateOutputType | null
    _sum: TicketsSumAggregateOutputType | null
    _min: TicketsMinAggregateOutputType | null
    _max: TicketsMaxAggregateOutputType | null
  }

  type GetTicketsGroupByPayload<T extends ticketsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TicketsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TicketsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TicketsGroupByOutputType[P]>
            : GetScalarType<T[P], TicketsGroupByOutputType[P]>
        }
      >
    >


  export type ticketsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    short_description?: boolean
    description?: boolean
    image_url?: boolean
    event_date?: boolean
    event_location?: boolean
    price?: boolean
    is_used?: boolean
    qr_code?: boolean
    ticket_number?: boolean
    user_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    users?: boolean | tickets$usersArgs<ExtArgs>
    user_tickets?: boolean | tickets$user_ticketsArgs<ExtArgs>
    _count?: boolean | TicketsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tickets"]>

  export type ticketsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    short_description?: boolean
    description?: boolean
    image_url?: boolean
    event_date?: boolean
    event_location?: boolean
    price?: boolean
    is_used?: boolean
    qr_code?: boolean
    ticket_number?: boolean
    user_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    users?: boolean | tickets$usersArgs<ExtArgs>
  }, ExtArgs["result"]["tickets"]>

  export type ticketsSelectScalar = {
    id?: boolean
    title?: boolean
    short_description?: boolean
    description?: boolean
    image_url?: boolean
    event_date?: boolean
    event_location?: boolean
    price?: boolean
    is_used?: boolean
    qr_code?: boolean
    ticket_number?: boolean
    user_id?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type ticketsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | tickets$usersArgs<ExtArgs>
    user_tickets?: boolean | tickets$user_ticketsArgs<ExtArgs>
    _count?: boolean | TicketsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ticketsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | tickets$usersArgs<ExtArgs>
  }

  export type $ticketsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "tickets"
    objects: {
      users: Prisma.$usersPayload<ExtArgs> | null
      user_tickets: Prisma.$user_ticketsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      short_description: string | null
      description: string | null
      image_url: string | null
      event_date: Date
      event_location: string
      price: Prisma.Decimal
      is_used: boolean
      qr_code: string | null
      ticket_number: string
      user_id: number | null
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["tickets"]>
    composites: {}
  }

  type ticketsGetPayload<S extends boolean | null | undefined | ticketsDefaultArgs> = $Result.GetResult<Prisma.$ticketsPayload, S>

  type ticketsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ticketsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TicketsCountAggregateInputType | true
    }

  export interface ticketsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tickets'], meta: { name: 'tickets' } }
    /**
     * Find zero or one Tickets that matches the filter.
     * @param {ticketsFindUniqueArgs} args - Arguments to find a Tickets
     * @example
     * // Get one Tickets
     * const tickets = await prisma.tickets.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ticketsFindUniqueArgs>(args: SelectSubset<T, ticketsFindUniqueArgs<ExtArgs>>): Prisma__ticketsClient<$Result.GetResult<Prisma.$ticketsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Tickets that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ticketsFindUniqueOrThrowArgs} args - Arguments to find a Tickets
     * @example
     * // Get one Tickets
     * const tickets = await prisma.tickets.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ticketsFindUniqueOrThrowArgs>(args: SelectSubset<T, ticketsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ticketsClient<$Result.GetResult<Prisma.$ticketsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Tickets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticketsFindFirstArgs} args - Arguments to find a Tickets
     * @example
     * // Get one Tickets
     * const tickets = await prisma.tickets.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ticketsFindFirstArgs>(args?: SelectSubset<T, ticketsFindFirstArgs<ExtArgs>>): Prisma__ticketsClient<$Result.GetResult<Prisma.$ticketsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Tickets that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticketsFindFirstOrThrowArgs} args - Arguments to find a Tickets
     * @example
     * // Get one Tickets
     * const tickets = await prisma.tickets.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ticketsFindFirstOrThrowArgs>(args?: SelectSubset<T, ticketsFindFirstOrThrowArgs<ExtArgs>>): Prisma__ticketsClient<$Result.GetResult<Prisma.$ticketsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Tickets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticketsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tickets
     * const tickets = await prisma.tickets.findMany()
     * 
     * // Get first 10 Tickets
     * const tickets = await prisma.tickets.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ticketsWithIdOnly = await prisma.tickets.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ticketsFindManyArgs>(args?: SelectSubset<T, ticketsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticketsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Tickets.
     * @param {ticketsCreateArgs} args - Arguments to create a Tickets.
     * @example
     * // Create one Tickets
     * const Tickets = await prisma.tickets.create({
     *   data: {
     *     // ... data to create a Tickets
     *   }
     * })
     * 
     */
    create<T extends ticketsCreateArgs>(args: SelectSubset<T, ticketsCreateArgs<ExtArgs>>): Prisma__ticketsClient<$Result.GetResult<Prisma.$ticketsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Tickets.
     * @param {ticketsCreateManyArgs} args - Arguments to create many Tickets.
     * @example
     * // Create many Tickets
     * const tickets = await prisma.tickets.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ticketsCreateManyArgs>(args?: SelectSubset<T, ticketsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tickets and returns the data saved in the database.
     * @param {ticketsCreateManyAndReturnArgs} args - Arguments to create many Tickets.
     * @example
     * // Create many Tickets
     * const tickets = await prisma.tickets.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tickets and only return the `id`
     * const ticketsWithIdOnly = await prisma.tickets.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ticketsCreateManyAndReturnArgs>(args?: SelectSubset<T, ticketsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticketsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Tickets.
     * @param {ticketsDeleteArgs} args - Arguments to delete one Tickets.
     * @example
     * // Delete one Tickets
     * const Tickets = await prisma.tickets.delete({
     *   where: {
     *     // ... filter to delete one Tickets
     *   }
     * })
     * 
     */
    delete<T extends ticketsDeleteArgs>(args: SelectSubset<T, ticketsDeleteArgs<ExtArgs>>): Prisma__ticketsClient<$Result.GetResult<Prisma.$ticketsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Tickets.
     * @param {ticketsUpdateArgs} args - Arguments to update one Tickets.
     * @example
     * // Update one Tickets
     * const tickets = await prisma.tickets.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ticketsUpdateArgs>(args: SelectSubset<T, ticketsUpdateArgs<ExtArgs>>): Prisma__ticketsClient<$Result.GetResult<Prisma.$ticketsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Tickets.
     * @param {ticketsDeleteManyArgs} args - Arguments to filter Tickets to delete.
     * @example
     * // Delete a few Tickets
     * const { count } = await prisma.tickets.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ticketsDeleteManyArgs>(args?: SelectSubset<T, ticketsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticketsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tickets
     * const tickets = await prisma.tickets.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ticketsUpdateManyArgs>(args: SelectSubset<T, ticketsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tickets.
     * @param {ticketsUpsertArgs} args - Arguments to update or create a Tickets.
     * @example
     * // Update or create a Tickets
     * const tickets = await prisma.tickets.upsert({
     *   create: {
     *     // ... data to create a Tickets
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tickets we want to update
     *   }
     * })
     */
    upsert<T extends ticketsUpsertArgs>(args: SelectSubset<T, ticketsUpsertArgs<ExtArgs>>): Prisma__ticketsClient<$Result.GetResult<Prisma.$ticketsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticketsCountArgs} args - Arguments to filter Tickets to count.
     * @example
     * // Count the number of Tickets
     * const count = await prisma.tickets.count({
     *   where: {
     *     // ... the filter for the Tickets we want to count
     *   }
     * })
    **/
    count<T extends ticketsCountArgs>(
      args?: Subset<T, ticketsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TicketsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TicketsAggregateArgs>(args: Subset<T, TicketsAggregateArgs>): Prisma.PrismaPromise<GetTicketsAggregateType<T>>

    /**
     * Group by Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ticketsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ticketsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ticketsGroupByArgs['orderBy'] }
        : { orderBy?: ticketsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ticketsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTicketsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the tickets model
   */
  readonly fields: ticketsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for tickets.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ticketsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends tickets$usersArgs<ExtArgs> = {}>(args?: Subset<T, tickets$usersArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    user_tickets<T extends tickets$user_ticketsArgs<ExtArgs> = {}>(args?: Subset<T, tickets$user_ticketsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_ticketsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the tickets model
   */ 
  interface ticketsFieldRefs {
    readonly id: FieldRef<"tickets", 'Int'>
    readonly title: FieldRef<"tickets", 'String'>
    readonly short_description: FieldRef<"tickets", 'String'>
    readonly description: FieldRef<"tickets", 'String'>
    readonly image_url: FieldRef<"tickets", 'String'>
    readonly event_date: FieldRef<"tickets", 'DateTime'>
    readonly event_location: FieldRef<"tickets", 'String'>
    readonly price: FieldRef<"tickets", 'Decimal'>
    readonly is_used: FieldRef<"tickets", 'Boolean'>
    readonly qr_code: FieldRef<"tickets", 'String'>
    readonly ticket_number: FieldRef<"tickets", 'String'>
    readonly user_id: FieldRef<"tickets", 'Int'>
    readonly created_at: FieldRef<"tickets", 'DateTime'>
    readonly updated_at: FieldRef<"tickets", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * tickets findUnique
   */
  export type ticketsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tickets
     */
    select?: ticketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketsInclude<ExtArgs> | null
    /**
     * Filter, which tickets to fetch.
     */
    where: ticketsWhereUniqueInput
  }

  /**
   * tickets findUniqueOrThrow
   */
  export type ticketsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tickets
     */
    select?: ticketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketsInclude<ExtArgs> | null
    /**
     * Filter, which tickets to fetch.
     */
    where: ticketsWhereUniqueInput
  }

  /**
   * tickets findFirst
   */
  export type ticketsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tickets
     */
    select?: ticketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketsInclude<ExtArgs> | null
    /**
     * Filter, which tickets to fetch.
     */
    where?: ticketsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tickets to fetch.
     */
    orderBy?: ticketsOrderByWithRelationInput | ticketsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tickets.
     */
    cursor?: ticketsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tickets.
     */
    distinct?: TicketsScalarFieldEnum | TicketsScalarFieldEnum[]
  }

  /**
   * tickets findFirstOrThrow
   */
  export type ticketsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tickets
     */
    select?: ticketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketsInclude<ExtArgs> | null
    /**
     * Filter, which tickets to fetch.
     */
    where?: ticketsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tickets to fetch.
     */
    orderBy?: ticketsOrderByWithRelationInput | ticketsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tickets.
     */
    cursor?: ticketsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tickets.
     */
    distinct?: TicketsScalarFieldEnum | TicketsScalarFieldEnum[]
  }

  /**
   * tickets findMany
   */
  export type ticketsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tickets
     */
    select?: ticketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketsInclude<ExtArgs> | null
    /**
     * Filter, which tickets to fetch.
     */
    where?: ticketsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tickets to fetch.
     */
    orderBy?: ticketsOrderByWithRelationInput | ticketsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tickets.
     */
    cursor?: ticketsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tickets.
     */
    skip?: number
    distinct?: TicketsScalarFieldEnum | TicketsScalarFieldEnum[]
  }

  /**
   * tickets create
   */
  export type ticketsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tickets
     */
    select?: ticketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketsInclude<ExtArgs> | null
    /**
     * The data needed to create a tickets.
     */
    data: XOR<ticketsCreateInput, ticketsUncheckedCreateInput>
  }

  /**
   * tickets createMany
   */
  export type ticketsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many tickets.
     */
    data: ticketsCreateManyInput | ticketsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * tickets createManyAndReturn
   */
  export type ticketsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tickets
     */
    select?: ticketsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many tickets.
     */
    data: ticketsCreateManyInput | ticketsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * tickets update
   */
  export type ticketsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tickets
     */
    select?: ticketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketsInclude<ExtArgs> | null
    /**
     * The data needed to update a tickets.
     */
    data: XOR<ticketsUpdateInput, ticketsUncheckedUpdateInput>
    /**
     * Choose, which tickets to update.
     */
    where: ticketsWhereUniqueInput
  }

  /**
   * tickets updateMany
   */
  export type ticketsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update tickets.
     */
    data: XOR<ticketsUpdateManyMutationInput, ticketsUncheckedUpdateManyInput>
    /**
     * Filter which tickets to update
     */
    where?: ticketsWhereInput
  }

  /**
   * tickets upsert
   */
  export type ticketsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tickets
     */
    select?: ticketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketsInclude<ExtArgs> | null
    /**
     * The filter to search for the tickets to update in case it exists.
     */
    where: ticketsWhereUniqueInput
    /**
     * In case the tickets found by the `where` argument doesn't exist, create a new tickets with this data.
     */
    create: XOR<ticketsCreateInput, ticketsUncheckedCreateInput>
    /**
     * In case the tickets was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ticketsUpdateInput, ticketsUncheckedUpdateInput>
  }

  /**
   * tickets delete
   */
  export type ticketsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tickets
     */
    select?: ticketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketsInclude<ExtArgs> | null
    /**
     * Filter which tickets to delete.
     */
    where: ticketsWhereUniqueInput
  }

  /**
   * tickets deleteMany
   */
  export type ticketsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tickets to delete
     */
    where?: ticketsWhereInput
  }

  /**
   * tickets.users
   */
  export type tickets$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
  }

  /**
   * tickets.user_tickets
   */
  export type tickets$user_ticketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_tickets
     */
    select?: user_ticketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_ticketsInclude<ExtArgs> | null
    where?: user_ticketsWhereInput
    orderBy?: user_ticketsOrderByWithRelationInput | user_ticketsOrderByWithRelationInput[]
    cursor?: user_ticketsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: User_ticketsScalarFieldEnum | User_ticketsScalarFieldEnum[]
  }

  /**
   * tickets without action
   */
  export type ticketsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tickets
     */
    select?: ticketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketsInclude<ExtArgs> | null
  }


  /**
   * Model user_tickets
   */

  export type AggregateUser_tickets = {
    _count: User_ticketsCountAggregateOutputType | null
    _avg: User_ticketsAvgAggregateOutputType | null
    _sum: User_ticketsSumAggregateOutputType | null
    _min: User_ticketsMinAggregateOutputType | null
    _max: User_ticketsMaxAggregateOutputType | null
  }

  export type User_ticketsAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    ticket_id: number | null
  }

  export type User_ticketsSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    ticket_id: number | null
  }

  export type User_ticketsMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    ticket_id: number | null
    ticket_number: string | null
    qr_code: string | null
    purchase_date: Date | null
    is_used: boolean | null
    used_at: Date | null
    payment_status: $Enums.PaymentStatus | null
    payment_id: string | null
    expires_at: Date | null
    created_at: Date | null
    updated_at: Date | null
    email: string | null
    first_name: string | null
    last_name: string | null
    phone: string | null
  }

  export type User_ticketsMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    ticket_id: number | null
    ticket_number: string | null
    qr_code: string | null
    purchase_date: Date | null
    is_used: boolean | null
    used_at: Date | null
    payment_status: $Enums.PaymentStatus | null
    payment_id: string | null
    expires_at: Date | null
    created_at: Date | null
    updated_at: Date | null
    email: string | null
    first_name: string | null
    last_name: string | null
    phone: string | null
  }

  export type User_ticketsCountAggregateOutputType = {
    id: number
    user_id: number
    ticket_id: number
    ticket_number: number
    qr_code: number
    purchase_date: number
    is_used: number
    used_at: number
    payment_status: number
    payment_id: number
    expires_at: number
    created_at: number
    updated_at: number
    email: number
    first_name: number
    last_name: number
    phone: number
    _all: number
  }


  export type User_ticketsAvgAggregateInputType = {
    id?: true
    user_id?: true
    ticket_id?: true
  }

  export type User_ticketsSumAggregateInputType = {
    id?: true
    user_id?: true
    ticket_id?: true
  }

  export type User_ticketsMinAggregateInputType = {
    id?: true
    user_id?: true
    ticket_id?: true
    ticket_number?: true
    qr_code?: true
    purchase_date?: true
    is_used?: true
    used_at?: true
    payment_status?: true
    payment_id?: true
    expires_at?: true
    created_at?: true
    updated_at?: true
    email?: true
    first_name?: true
    last_name?: true
    phone?: true
  }

  export type User_ticketsMaxAggregateInputType = {
    id?: true
    user_id?: true
    ticket_id?: true
    ticket_number?: true
    qr_code?: true
    purchase_date?: true
    is_used?: true
    used_at?: true
    payment_status?: true
    payment_id?: true
    expires_at?: true
    created_at?: true
    updated_at?: true
    email?: true
    first_name?: true
    last_name?: true
    phone?: true
  }

  export type User_ticketsCountAggregateInputType = {
    id?: true
    user_id?: true
    ticket_id?: true
    ticket_number?: true
    qr_code?: true
    purchase_date?: true
    is_used?: true
    used_at?: true
    payment_status?: true
    payment_id?: true
    expires_at?: true
    created_at?: true
    updated_at?: true
    email?: true
    first_name?: true
    last_name?: true
    phone?: true
    _all?: true
  }

  export type User_ticketsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user_tickets to aggregate.
     */
    where?: user_ticketsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_tickets to fetch.
     */
    orderBy?: user_ticketsOrderByWithRelationInput | user_ticketsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: user_ticketsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned user_tickets
    **/
    _count?: true | User_ticketsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: User_ticketsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: User_ticketsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: User_ticketsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: User_ticketsMaxAggregateInputType
  }

  export type GetUser_ticketsAggregateType<T extends User_ticketsAggregateArgs> = {
        [P in keyof T & keyof AggregateUser_tickets]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser_tickets[P]>
      : GetScalarType<T[P], AggregateUser_tickets[P]>
  }




  export type user_ticketsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: user_ticketsWhereInput
    orderBy?: user_ticketsOrderByWithAggregationInput | user_ticketsOrderByWithAggregationInput[]
    by: User_ticketsScalarFieldEnum[] | User_ticketsScalarFieldEnum
    having?: user_ticketsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: User_ticketsCountAggregateInputType | true
    _avg?: User_ticketsAvgAggregateInputType
    _sum?: User_ticketsSumAggregateInputType
    _min?: User_ticketsMinAggregateInputType
    _max?: User_ticketsMaxAggregateInputType
  }

  export type User_ticketsGroupByOutputType = {
    id: number
    user_id: number | null
    ticket_id: number
    ticket_number: string
    qr_code: string | null
    purchase_date: Date
    is_used: boolean
    used_at: Date | null
    payment_status: $Enums.PaymentStatus
    payment_id: string | null
    expires_at: Date | null
    created_at: Date
    updated_at: Date
    email: string | null
    first_name: string | null
    last_name: string | null
    phone: string | null
    _count: User_ticketsCountAggregateOutputType | null
    _avg: User_ticketsAvgAggregateOutputType | null
    _sum: User_ticketsSumAggregateOutputType | null
    _min: User_ticketsMinAggregateOutputType | null
    _max: User_ticketsMaxAggregateOutputType | null
  }

  type GetUser_ticketsGroupByPayload<T extends user_ticketsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<User_ticketsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof User_ticketsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], User_ticketsGroupByOutputType[P]>
            : GetScalarType<T[P], User_ticketsGroupByOutputType[P]>
        }
      >
    >


  export type user_ticketsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    ticket_id?: boolean
    ticket_number?: boolean
    qr_code?: boolean
    purchase_date?: boolean
    is_used?: boolean
    used_at?: boolean
    payment_status?: boolean
    payment_id?: boolean
    expires_at?: boolean
    created_at?: boolean
    updated_at?: boolean
    email?: boolean
    first_name?: boolean
    last_name?: boolean
    phone?: boolean
    order_items?: boolean | user_tickets$order_itemsArgs<ExtArgs>
    refund_tickets?: boolean | user_tickets$refund_ticketsArgs<ExtArgs>
    tickets?: boolean | ticketsDefaultArgs<ExtArgs>
    users?: boolean | user_tickets$usersArgs<ExtArgs>
    orders?: boolean | user_tickets$ordersArgs<ExtArgs>
    refunds?: boolean | user_tickets$refundsArgs<ExtArgs>
    _count?: boolean | User_ticketsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user_tickets"]>

  export type user_ticketsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    ticket_id?: boolean
    ticket_number?: boolean
    qr_code?: boolean
    purchase_date?: boolean
    is_used?: boolean
    used_at?: boolean
    payment_status?: boolean
    payment_id?: boolean
    expires_at?: boolean
    created_at?: boolean
    updated_at?: boolean
    email?: boolean
    first_name?: boolean
    last_name?: boolean
    phone?: boolean
    tickets?: boolean | ticketsDefaultArgs<ExtArgs>
    users?: boolean | user_tickets$usersArgs<ExtArgs>
  }, ExtArgs["result"]["user_tickets"]>

  export type user_ticketsSelectScalar = {
    id?: boolean
    user_id?: boolean
    ticket_id?: boolean
    ticket_number?: boolean
    qr_code?: boolean
    purchase_date?: boolean
    is_used?: boolean
    used_at?: boolean
    payment_status?: boolean
    payment_id?: boolean
    expires_at?: boolean
    created_at?: boolean
    updated_at?: boolean
    email?: boolean
    first_name?: boolean
    last_name?: boolean
    phone?: boolean
  }

  export type user_ticketsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order_items?: boolean | user_tickets$order_itemsArgs<ExtArgs>
    refund_tickets?: boolean | user_tickets$refund_ticketsArgs<ExtArgs>
    tickets?: boolean | ticketsDefaultArgs<ExtArgs>
    users?: boolean | user_tickets$usersArgs<ExtArgs>
    orders?: boolean | user_tickets$ordersArgs<ExtArgs>
    refunds?: boolean | user_tickets$refundsArgs<ExtArgs>
    _count?: boolean | User_ticketsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type user_ticketsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tickets?: boolean | ticketsDefaultArgs<ExtArgs>
    users?: boolean | user_tickets$usersArgs<ExtArgs>
  }

  export type $user_ticketsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "user_tickets"
    objects: {
      order_items: Prisma.$order_itemsPayload<ExtArgs> | null
      refund_tickets: Prisma.$refund_ticketsPayload<ExtArgs>[]
      tickets: Prisma.$ticketsPayload<ExtArgs>
      users: Prisma.$usersPayload<ExtArgs> | null
      orders: Prisma.$ordersPayload<ExtArgs>[]
      refunds: Prisma.$refundsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: number | null
      ticket_id: number
      ticket_number: string
      qr_code: string | null
      purchase_date: Date
      is_used: boolean
      used_at: Date | null
      payment_status: $Enums.PaymentStatus
      payment_id: string | null
      expires_at: Date | null
      created_at: Date
      updated_at: Date
      email: string | null
      first_name: string | null
      last_name: string | null
      phone: string | null
    }, ExtArgs["result"]["user_tickets"]>
    composites: {}
  }

  type user_ticketsGetPayload<S extends boolean | null | undefined | user_ticketsDefaultArgs> = $Result.GetResult<Prisma.$user_ticketsPayload, S>

  type user_ticketsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<user_ticketsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: User_ticketsCountAggregateInputType | true
    }

  export interface user_ticketsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user_tickets'], meta: { name: 'user_tickets' } }
    /**
     * Find zero or one User_tickets that matches the filter.
     * @param {user_ticketsFindUniqueArgs} args - Arguments to find a User_tickets
     * @example
     * // Get one User_tickets
     * const user_tickets = await prisma.user_tickets.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends user_ticketsFindUniqueArgs>(args: SelectSubset<T, user_ticketsFindUniqueArgs<ExtArgs>>): Prisma__user_ticketsClient<$Result.GetResult<Prisma.$user_ticketsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User_tickets that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {user_ticketsFindUniqueOrThrowArgs} args - Arguments to find a User_tickets
     * @example
     * // Get one User_tickets
     * const user_tickets = await prisma.user_tickets.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends user_ticketsFindUniqueOrThrowArgs>(args: SelectSubset<T, user_ticketsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__user_ticketsClient<$Result.GetResult<Prisma.$user_ticketsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User_tickets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_ticketsFindFirstArgs} args - Arguments to find a User_tickets
     * @example
     * // Get one User_tickets
     * const user_tickets = await prisma.user_tickets.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends user_ticketsFindFirstArgs>(args?: SelectSubset<T, user_ticketsFindFirstArgs<ExtArgs>>): Prisma__user_ticketsClient<$Result.GetResult<Prisma.$user_ticketsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User_tickets that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_ticketsFindFirstOrThrowArgs} args - Arguments to find a User_tickets
     * @example
     * // Get one User_tickets
     * const user_tickets = await prisma.user_tickets.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends user_ticketsFindFirstOrThrowArgs>(args?: SelectSubset<T, user_ticketsFindFirstOrThrowArgs<ExtArgs>>): Prisma__user_ticketsClient<$Result.GetResult<Prisma.$user_ticketsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more User_tickets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_ticketsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all User_tickets
     * const user_tickets = await prisma.user_tickets.findMany()
     * 
     * // Get first 10 User_tickets
     * const user_tickets = await prisma.user_tickets.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const user_ticketsWithIdOnly = await prisma.user_tickets.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends user_ticketsFindManyArgs>(args?: SelectSubset<T, user_ticketsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_ticketsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User_tickets.
     * @param {user_ticketsCreateArgs} args - Arguments to create a User_tickets.
     * @example
     * // Create one User_tickets
     * const User_tickets = await prisma.user_tickets.create({
     *   data: {
     *     // ... data to create a User_tickets
     *   }
     * })
     * 
     */
    create<T extends user_ticketsCreateArgs>(args: SelectSubset<T, user_ticketsCreateArgs<ExtArgs>>): Prisma__user_ticketsClient<$Result.GetResult<Prisma.$user_ticketsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many User_tickets.
     * @param {user_ticketsCreateManyArgs} args - Arguments to create many User_tickets.
     * @example
     * // Create many User_tickets
     * const user_tickets = await prisma.user_tickets.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends user_ticketsCreateManyArgs>(args?: SelectSubset<T, user_ticketsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many User_tickets and returns the data saved in the database.
     * @param {user_ticketsCreateManyAndReturnArgs} args - Arguments to create many User_tickets.
     * @example
     * // Create many User_tickets
     * const user_tickets = await prisma.user_tickets.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many User_tickets and only return the `id`
     * const user_ticketsWithIdOnly = await prisma.user_tickets.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends user_ticketsCreateManyAndReturnArgs>(args?: SelectSubset<T, user_ticketsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_ticketsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User_tickets.
     * @param {user_ticketsDeleteArgs} args - Arguments to delete one User_tickets.
     * @example
     * // Delete one User_tickets
     * const User_tickets = await prisma.user_tickets.delete({
     *   where: {
     *     // ... filter to delete one User_tickets
     *   }
     * })
     * 
     */
    delete<T extends user_ticketsDeleteArgs>(args: SelectSubset<T, user_ticketsDeleteArgs<ExtArgs>>): Prisma__user_ticketsClient<$Result.GetResult<Prisma.$user_ticketsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User_tickets.
     * @param {user_ticketsUpdateArgs} args - Arguments to update one User_tickets.
     * @example
     * // Update one User_tickets
     * const user_tickets = await prisma.user_tickets.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends user_ticketsUpdateArgs>(args: SelectSubset<T, user_ticketsUpdateArgs<ExtArgs>>): Prisma__user_ticketsClient<$Result.GetResult<Prisma.$user_ticketsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more User_tickets.
     * @param {user_ticketsDeleteManyArgs} args - Arguments to filter User_tickets to delete.
     * @example
     * // Delete a few User_tickets
     * const { count } = await prisma.user_tickets.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends user_ticketsDeleteManyArgs>(args?: SelectSubset<T, user_ticketsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_ticketsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many User_tickets
     * const user_tickets = await prisma.user_tickets.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends user_ticketsUpdateManyArgs>(args: SelectSubset<T, user_ticketsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User_tickets.
     * @param {user_ticketsUpsertArgs} args - Arguments to update or create a User_tickets.
     * @example
     * // Update or create a User_tickets
     * const user_tickets = await prisma.user_tickets.upsert({
     *   create: {
     *     // ... data to create a User_tickets
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User_tickets we want to update
     *   }
     * })
     */
    upsert<T extends user_ticketsUpsertArgs>(args: SelectSubset<T, user_ticketsUpsertArgs<ExtArgs>>): Prisma__user_ticketsClient<$Result.GetResult<Prisma.$user_ticketsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of User_tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_ticketsCountArgs} args - Arguments to filter User_tickets to count.
     * @example
     * // Count the number of User_tickets
     * const count = await prisma.user_tickets.count({
     *   where: {
     *     // ... the filter for the User_tickets we want to count
     *   }
     * })
    **/
    count<T extends user_ticketsCountArgs>(
      args?: Subset<T, user_ticketsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], User_ticketsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User_tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_ticketsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends User_ticketsAggregateArgs>(args: Subset<T, User_ticketsAggregateArgs>): Prisma.PrismaPromise<GetUser_ticketsAggregateType<T>>

    /**
     * Group by User_tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_ticketsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends user_ticketsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: user_ticketsGroupByArgs['orderBy'] }
        : { orderBy?: user_ticketsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, user_ticketsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUser_ticketsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user_tickets model
   */
  readonly fields: user_ticketsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user_tickets.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__user_ticketsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    order_items<T extends user_tickets$order_itemsArgs<ExtArgs> = {}>(args?: Subset<T, user_tickets$order_itemsArgs<ExtArgs>>): Prisma__order_itemsClient<$Result.GetResult<Prisma.$order_itemsPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    refund_tickets<T extends user_tickets$refund_ticketsArgs<ExtArgs> = {}>(args?: Subset<T, user_tickets$refund_ticketsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$refund_ticketsPayload<ExtArgs>, T, "findMany"> | Null>
    tickets<T extends ticketsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ticketsDefaultArgs<ExtArgs>>): Prisma__ticketsClient<$Result.GetResult<Prisma.$ticketsPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    users<T extends user_tickets$usersArgs<ExtArgs> = {}>(args?: Subset<T, user_tickets$usersArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    orders<T extends user_tickets$ordersArgs<ExtArgs> = {}>(args?: Subset<T, user_tickets$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "findMany"> | Null>
    refunds<T extends user_tickets$refundsArgs<ExtArgs> = {}>(args?: Subset<T, user_tickets$refundsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$refundsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the user_tickets model
   */ 
  interface user_ticketsFieldRefs {
    readonly id: FieldRef<"user_tickets", 'Int'>
    readonly user_id: FieldRef<"user_tickets", 'Int'>
    readonly ticket_id: FieldRef<"user_tickets", 'Int'>
    readonly ticket_number: FieldRef<"user_tickets", 'String'>
    readonly qr_code: FieldRef<"user_tickets", 'String'>
    readonly purchase_date: FieldRef<"user_tickets", 'DateTime'>
    readonly is_used: FieldRef<"user_tickets", 'Boolean'>
    readonly used_at: FieldRef<"user_tickets", 'DateTime'>
    readonly payment_status: FieldRef<"user_tickets", 'PaymentStatus'>
    readonly payment_id: FieldRef<"user_tickets", 'String'>
    readonly expires_at: FieldRef<"user_tickets", 'DateTime'>
    readonly created_at: FieldRef<"user_tickets", 'DateTime'>
    readonly updated_at: FieldRef<"user_tickets", 'DateTime'>
    readonly email: FieldRef<"user_tickets", 'String'>
    readonly first_name: FieldRef<"user_tickets", 'String'>
    readonly last_name: FieldRef<"user_tickets", 'String'>
    readonly phone: FieldRef<"user_tickets", 'String'>
  }
    

  // Custom InputTypes
  /**
   * user_tickets findUnique
   */
  export type user_ticketsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_tickets
     */
    select?: user_ticketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_ticketsInclude<ExtArgs> | null
    /**
     * Filter, which user_tickets to fetch.
     */
    where: user_ticketsWhereUniqueInput
  }

  /**
   * user_tickets findUniqueOrThrow
   */
  export type user_ticketsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_tickets
     */
    select?: user_ticketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_ticketsInclude<ExtArgs> | null
    /**
     * Filter, which user_tickets to fetch.
     */
    where: user_ticketsWhereUniqueInput
  }

  /**
   * user_tickets findFirst
   */
  export type user_ticketsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_tickets
     */
    select?: user_ticketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_ticketsInclude<ExtArgs> | null
    /**
     * Filter, which user_tickets to fetch.
     */
    where?: user_ticketsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_tickets to fetch.
     */
    orderBy?: user_ticketsOrderByWithRelationInput | user_ticketsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_tickets.
     */
    cursor?: user_ticketsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_tickets.
     */
    distinct?: User_ticketsScalarFieldEnum | User_ticketsScalarFieldEnum[]
  }

  /**
   * user_tickets findFirstOrThrow
   */
  export type user_ticketsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_tickets
     */
    select?: user_ticketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_ticketsInclude<ExtArgs> | null
    /**
     * Filter, which user_tickets to fetch.
     */
    where?: user_ticketsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_tickets to fetch.
     */
    orderBy?: user_ticketsOrderByWithRelationInput | user_ticketsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_tickets.
     */
    cursor?: user_ticketsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_tickets.
     */
    distinct?: User_ticketsScalarFieldEnum | User_ticketsScalarFieldEnum[]
  }

  /**
   * user_tickets findMany
   */
  export type user_ticketsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_tickets
     */
    select?: user_ticketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_ticketsInclude<ExtArgs> | null
    /**
     * Filter, which user_tickets to fetch.
     */
    where?: user_ticketsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_tickets to fetch.
     */
    orderBy?: user_ticketsOrderByWithRelationInput | user_ticketsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing user_tickets.
     */
    cursor?: user_ticketsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_tickets.
     */
    skip?: number
    distinct?: User_ticketsScalarFieldEnum | User_ticketsScalarFieldEnum[]
  }

  /**
   * user_tickets create
   */
  export type user_ticketsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_tickets
     */
    select?: user_ticketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_ticketsInclude<ExtArgs> | null
    /**
     * The data needed to create a user_tickets.
     */
    data: XOR<user_ticketsCreateInput, user_ticketsUncheckedCreateInput>
  }

  /**
   * user_tickets createMany
   */
  export type user_ticketsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many user_tickets.
     */
    data: user_ticketsCreateManyInput | user_ticketsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * user_tickets createManyAndReturn
   */
  export type user_ticketsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_tickets
     */
    select?: user_ticketsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many user_tickets.
     */
    data: user_ticketsCreateManyInput | user_ticketsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_ticketsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * user_tickets update
   */
  export type user_ticketsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_tickets
     */
    select?: user_ticketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_ticketsInclude<ExtArgs> | null
    /**
     * The data needed to update a user_tickets.
     */
    data: XOR<user_ticketsUpdateInput, user_ticketsUncheckedUpdateInput>
    /**
     * Choose, which user_tickets to update.
     */
    where: user_ticketsWhereUniqueInput
  }

  /**
   * user_tickets updateMany
   */
  export type user_ticketsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update user_tickets.
     */
    data: XOR<user_ticketsUpdateManyMutationInput, user_ticketsUncheckedUpdateManyInput>
    /**
     * Filter which user_tickets to update
     */
    where?: user_ticketsWhereInput
  }

  /**
   * user_tickets upsert
   */
  export type user_ticketsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_tickets
     */
    select?: user_ticketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_ticketsInclude<ExtArgs> | null
    /**
     * The filter to search for the user_tickets to update in case it exists.
     */
    where: user_ticketsWhereUniqueInput
    /**
     * In case the user_tickets found by the `where` argument doesn't exist, create a new user_tickets with this data.
     */
    create: XOR<user_ticketsCreateInput, user_ticketsUncheckedCreateInput>
    /**
     * In case the user_tickets was found with the provided `where` argument, update it with this data.
     */
    update: XOR<user_ticketsUpdateInput, user_ticketsUncheckedUpdateInput>
  }

  /**
   * user_tickets delete
   */
  export type user_ticketsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_tickets
     */
    select?: user_ticketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_ticketsInclude<ExtArgs> | null
    /**
     * Filter which user_tickets to delete.
     */
    where: user_ticketsWhereUniqueInput
  }

  /**
   * user_tickets deleteMany
   */
  export type user_ticketsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user_tickets to delete
     */
    where?: user_ticketsWhereInput
  }

  /**
   * user_tickets.order_items
   */
  export type user_tickets$order_itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the order_items
     */
    select?: order_itemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: order_itemsInclude<ExtArgs> | null
    where?: order_itemsWhereInput
  }

  /**
   * user_tickets.refund_tickets
   */
  export type user_tickets$refund_ticketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the refund_tickets
     */
    select?: refund_ticketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: refund_ticketsInclude<ExtArgs> | null
    where?: refund_ticketsWhereInput
    orderBy?: refund_ticketsOrderByWithRelationInput | refund_ticketsOrderByWithRelationInput[]
    cursor?: refund_ticketsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Refund_ticketsScalarFieldEnum | Refund_ticketsScalarFieldEnum[]
  }

  /**
   * user_tickets.users
   */
  export type user_tickets$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
  }

  /**
   * user_tickets.orders
   */
  export type user_tickets$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    where?: ordersWhereInput
    orderBy?: ordersOrderByWithRelationInput | ordersOrderByWithRelationInput[]
    cursor?: ordersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrdersScalarFieldEnum | OrdersScalarFieldEnum[]
  }

  /**
   * user_tickets.refunds
   */
  export type user_tickets$refundsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the refunds
     */
    select?: refundsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: refundsInclude<ExtArgs> | null
    where?: refundsWhereInput
    orderBy?: refundsOrderByWithRelationInput | refundsOrderByWithRelationInput[]
    cursor?: refundsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RefundsScalarFieldEnum | RefundsScalarFieldEnum[]
  }

  /**
   * user_tickets without action
   */
  export type user_ticketsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_tickets
     */
    select?: user_ticketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_ticketsInclude<ExtArgs> | null
  }


  /**
   * Model users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
    telegram_id: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
    telegram_id: bigint | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    telegram_id: bigint | null
    username: string | null
    first_name: string | null
    last_name: string | null
    is_admin: boolean | null
    language_code: string | null
    is_bot: boolean | null
    phone: string | null
    email: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    telegram_id: bigint | null
    username: string | null
    first_name: string | null
    last_name: string | null
    is_admin: boolean | null
    language_code: string | null
    is_bot: boolean | null
    phone: string | null
    email: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    telegram_id: number
    username: number
    first_name: number
    last_name: number
    is_admin: number
    language_code: number
    is_bot: number
    phone: number
    email: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
    telegram_id?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
    telegram_id?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    telegram_id?: true
    username?: true
    first_name?: true
    last_name?: true
    is_admin?: true
    language_code?: true
    is_bot?: true
    phone?: true
    email?: true
    created_at?: true
    updated_at?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    telegram_id?: true
    username?: true
    first_name?: true
    last_name?: true
    is_admin?: true
    language_code?: true
    is_bot?: true
    phone?: true
    email?: true
    created_at?: true
    updated_at?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    telegram_id?: true
    username?: true
    first_name?: true
    last_name?: true
    is_admin?: true
    language_code?: true
    is_bot?: true
    phone?: true
    email?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to aggregate.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type usersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
    orderBy?: usersOrderByWithAggregationInput | usersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: number
    telegram_id: bigint | null
    username: string | null
    first_name: string
    last_name: string | null
    is_admin: boolean
    language_code: string | null
    is_bot: boolean
    phone: string | null
    email: string | null
    created_at: Date
    updated_at: Date
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends usersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    telegram_id?: boolean
    username?: boolean
    first_name?: boolean
    last_name?: boolean
    is_admin?: boolean
    language_code?: boolean
    is_bot?: boolean
    phone?: boolean
    email?: boolean
    created_at?: boolean
    updated_at?: boolean
    orders?: boolean | users$ordersArgs<ExtArgs>
    refunds?: boolean | users$refundsArgs<ExtArgs>
    tickets?: boolean | users$ticketsArgs<ExtArgs>
    user_tickets?: boolean | users$user_ticketsArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type usersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    telegram_id?: boolean
    username?: boolean
    first_name?: boolean
    last_name?: boolean
    is_admin?: boolean
    language_code?: boolean
    is_bot?: boolean
    phone?: boolean
    email?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["users"]>

  export type usersSelectScalar = {
    id?: boolean
    telegram_id?: boolean
    username?: boolean
    first_name?: boolean
    last_name?: boolean
    is_admin?: boolean
    language_code?: boolean
    is_bot?: boolean
    phone?: boolean
    email?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type usersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | users$ordersArgs<ExtArgs>
    refunds?: boolean | users$refundsArgs<ExtArgs>
    tickets?: boolean | users$ticketsArgs<ExtArgs>
    user_tickets?: boolean | users$user_ticketsArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type usersIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $usersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "users"
    objects: {
      orders: Prisma.$ordersPayload<ExtArgs>[]
      refunds: Prisma.$refundsPayload<ExtArgs>[]
      tickets: Prisma.$ticketsPayload<ExtArgs>[]
      user_tickets: Prisma.$user_ticketsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      telegram_id: bigint | null
      username: string | null
      first_name: string
      last_name: string | null
      is_admin: boolean
      language_code: string | null
      is_bot: boolean
      phone: string | null
      email: string | null
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["users"]>
    composites: {}
  }

  type usersGetPayload<S extends boolean | null | undefined | usersDefaultArgs> = $Result.GetResult<Prisma.$usersPayload, S>

  type usersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<usersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface usersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['users'], meta: { name: 'users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends usersFindUniqueArgs>(args: SelectSubset<T, usersFindUniqueArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs>(args: SelectSubset<T, usersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends usersFindFirstArgs>(args?: SelectSubset<T, usersFindFirstArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs>(args?: SelectSubset<T, usersFindFirstOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends usersFindManyArgs>(args?: SelectSubset<T, usersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
     */
    create<T extends usersCreateArgs>(args: SelectSubset<T, usersCreateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {usersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends usersCreateManyArgs>(args?: SelectSubset<T, usersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {usersCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const usersWithIdOnly = await prisma.users.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends usersCreateManyAndReturnArgs>(args?: SelectSubset<T, usersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
     */
    delete<T extends usersDeleteArgs>(args: SelectSubset<T, usersDeleteArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends usersUpdateArgs>(args: SelectSubset<T, usersUpdateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends usersDeleteManyArgs>(args?: SelectSubset<T, usersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends usersUpdateManyArgs>(args: SelectSubset<T, usersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
     */
    upsert<T extends usersUpsertArgs>(args: SelectSubset<T, usersUpsertArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usersGroupByArgs['orderBy'] }
        : { orderBy?: usersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the users model
   */
  readonly fields: usersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    orders<T extends users$ordersArgs<ExtArgs> = {}>(args?: Subset<T, users$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "findMany"> | Null>
    refunds<T extends users$refundsArgs<ExtArgs> = {}>(args?: Subset<T, users$refundsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$refundsPayload<ExtArgs>, T, "findMany"> | Null>
    tickets<T extends users$ticketsArgs<ExtArgs> = {}>(args?: Subset<T, users$ticketsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ticketsPayload<ExtArgs>, T, "findMany"> | Null>
    user_tickets<T extends users$user_ticketsArgs<ExtArgs> = {}>(args?: Subset<T, users$user_ticketsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_ticketsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the users model
   */ 
  interface usersFieldRefs {
    readonly id: FieldRef<"users", 'Int'>
    readonly telegram_id: FieldRef<"users", 'BigInt'>
    readonly username: FieldRef<"users", 'String'>
    readonly first_name: FieldRef<"users", 'String'>
    readonly last_name: FieldRef<"users", 'String'>
    readonly is_admin: FieldRef<"users", 'Boolean'>
    readonly language_code: FieldRef<"users", 'String'>
    readonly is_bot: FieldRef<"users", 'Boolean'>
    readonly phone: FieldRef<"users", 'String'>
    readonly email: FieldRef<"users", 'String'>
    readonly created_at: FieldRef<"users", 'DateTime'>
    readonly updated_at: FieldRef<"users", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * users findUnique
   */
  export type usersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findFirst
   */
  export type usersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findMany
   */
  export type usersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users create
   */
  export type usersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to create a users.
     */
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }

  /**
   * users createMany
   */
  export type usersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * users createManyAndReturn
   */
  export type usersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * users update
   */
  export type usersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to update a users.
     */
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users updateMany
   */
  export type usersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
  }

  /**
   * users upsert
   */
  export type usersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The filter to search for the users to update in case it exists.
     */
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     */
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }

  /**
   * users delete
   */
  export type usersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter which users to delete.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: usersWhereInput
  }

  /**
   * users.orders
   */
  export type users$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    where?: ordersWhereInput
    orderBy?: ordersOrderByWithRelationInput | ordersOrderByWithRelationInput[]
    cursor?: ordersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrdersScalarFieldEnum | OrdersScalarFieldEnum[]
  }

  /**
   * users.refunds
   */
  export type users$refundsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the refunds
     */
    select?: refundsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: refundsInclude<ExtArgs> | null
    where?: refundsWhereInput
    orderBy?: refundsOrderByWithRelationInput | refundsOrderByWithRelationInput[]
    cursor?: refundsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RefundsScalarFieldEnum | RefundsScalarFieldEnum[]
  }

  /**
   * users.tickets
   */
  export type users$ticketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tickets
     */
    select?: ticketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ticketsInclude<ExtArgs> | null
    where?: ticketsWhereInput
    orderBy?: ticketsOrderByWithRelationInput | ticketsOrderByWithRelationInput[]
    cursor?: ticketsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TicketsScalarFieldEnum | TicketsScalarFieldEnum[]
  }

  /**
   * users.user_tickets
   */
  export type users$user_ticketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_tickets
     */
    select?: user_ticketsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_ticketsInclude<ExtArgs> | null
    where?: user_ticketsWhereInput
    orderBy?: user_ticketsOrderByWithRelationInput | user_ticketsOrderByWithRelationInput[]
    cursor?: user_ticketsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: User_ticketsScalarFieldEnum | User_ticketsScalarFieldEnum[]
  }

  /**
   * users without action
   */
  export type usersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const HallScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    type: 'type',
    imageUrl: 'imageUrl',
    isActive: 'isActive',
    sortOrder: 'sortOrder',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type HallScalarFieldEnum = (typeof HallScalarFieldEnum)[keyof typeof HallScalarFieldEnum]


  export const ZoneScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    hallId: 'hallId',
    openTime: 'openTime',
    closeTime: 'closeTime',
    imageUrl: 'imageUrl',
    description: 'description',
    isActive: 'isActive',
    sortOrder: 'sortOrder',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ZoneScalarFieldEnum = (typeof ZoneScalarFieldEnum)[keyof typeof ZoneScalarFieldEnum]


  export const ZoneItemScalarFieldEnum: {
    id: 'id',
    zoneId: 'zoneId',
    floor: 'floor',
    label: 'label',
    type: 'type',
    isBooking: 'isBooking',
    isActive: 'isActive',
    x: 'x',
    y: 'y',
    width: 'width',
    height: 'height',
    seats: 'seats',
    capacity: 'capacity',
    pricePerHour: 'pricePerHour',
    pricePerSeat: 'pricePerSeat',
    pricePerSlot: 'pricePerSlot',
    minDuration: 'minDuration',
    maxDuration: 'maxDuration',
    timeSlots: 'timeSlots',
    description: 'description',
    features: 'features'
  };

  export type ZoneItemScalarFieldEnum = (typeof ZoneItemScalarFieldEnum)[keyof typeof ZoneItemScalarFieldEnum]


  export const ReservationScalarFieldEnum: {
    id: 'id',
    zoneItemId: 'zoneItemId',
    type: 'type',
    userName: 'userName',
    phone: 'phone',
    startsAt: 'startsAt',
    endsAt: 'endsAt',
    deposit: 'deposit',
    status: 'status',
    seatsCount: 'seatsCount',
    guestsCount: 'guestsCount',
    duration: 'duration',
    comment: 'comment',
    specialRequests: 'specialRequests',
    totalPrice: 'totalPrice'
  };

  export type ReservationScalarFieldEnum = (typeof ReservationScalarFieldEnum)[keyof typeof ReservationScalarFieldEnum]


  export const PaymentScalarFieldEnum: {
    id: 'id',
    reservationId: 'reservationId',
    amount: 'amount',
    payDate: 'payDate',
    refunded: 'refunded'
  };

  export type PaymentScalarFieldEnum = (typeof PaymentScalarFieldEnum)[keyof typeof PaymentScalarFieldEnum]


  export const MenuTypeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    description: 'description',
    isActive: 'isActive',
    sortOrder: 'sortOrder',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MenuTypeScalarFieldEnum = (typeof MenuTypeScalarFieldEnum)[keyof typeof MenuTypeScalarFieldEnum]


  export const MenuCategoryScalarFieldEnum: {
    id: 'id',
    menuTypeId: 'menuTypeId',
    name: 'name',
    slug: 'slug',
    description: 'description',
    isActive: 'isActive',
    sortOrder: 'sortOrder',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MenuCategoryScalarFieldEnum = (typeof MenuCategoryScalarFieldEnum)[keyof typeof MenuCategoryScalarFieldEnum]


  export const MenuItemScalarFieldEnum: {
    id: 'id',
    categoryId: 'categoryId',
    name: 'name',
    description: 'description',
    price: 'price',
    imageUrl: 'imageUrl',
    isActive: 'isActive',
    sortOrder: 'sortOrder',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MenuItemScalarFieldEnum = (typeof MenuItemScalarFieldEnum)[keyof typeof MenuItemScalarFieldEnum]


  export const HookahScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    price: 'price',
    features: 'features',
    isActive: 'isActive',
    sortOrder: 'sortOrder',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type HookahScalarFieldEnum = (typeof HookahScalarFieldEnum)[keyof typeof HookahScalarFieldEnum]


  export const BoardGameScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    price: 'price',
    duration: 'duration',
    players: 'players',
    difficulty: 'difficulty',
    category: 'category',
    imageUrl: 'imageUrl',
    isActive: 'isActive',
    sortOrder: 'sortOrder',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BoardGameScalarFieldEnum = (typeof BoardGameScalarFieldEnum)[keyof typeof BoardGameScalarFieldEnum]


  export const BilliardsServiceScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    price: 'price',
    description: 'description',
    imageUrl: 'imageUrl',
    isActive: 'isActive',
    sortOrder: 'sortOrder',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BilliardsServiceScalarFieldEnum = (typeof BilliardsServiceScalarFieldEnum)[keyof typeof BilliardsServiceScalarFieldEnum]


  export const BilliardsSettingsScalarFieldEnum: {
    id: 'id',
    bookingFee: 'bookingFee',
    bookingTimeoutMinutes: 'bookingTimeoutMinutes',
    minBookingDuration: 'minBookingDuration',
    maxBookingDuration: 'maxBookingDuration',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BilliardsSettingsScalarFieldEnum = (typeof BilliardsSettingsScalarFieldEnum)[keyof typeof BilliardsSettingsScalarFieldEnum]


  export const KaraokeServiceScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    price: 'price',
    description: 'description',
    imageUrl: 'imageUrl',
    isActive: 'isActive',
    sortOrder: 'sortOrder',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type KaraokeServiceScalarFieldEnum = (typeof KaraokeServiceScalarFieldEnum)[keyof typeof KaraokeServiceScalarFieldEnum]


  export const KaraokeSettingsScalarFieldEnum: {
    id: 'id',
    maxVipGuests: 'maxVipGuests',
    baseVipPrice: 'baseVipPrice',
    additionalGuestPrice: 'additionalGuestPrice',
    depositPolicy: 'depositPolicy',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type KaraokeSettingsScalarFieldEnum = (typeof KaraokeSettingsScalarFieldEnum)[keyof typeof KaraokeSettingsScalarFieldEnum]


  export const BanquetRequestScalarFieldEnum: {
    id: 'id',
    eventDate: 'eventDate',
    eventTime: 'eventTime',
    endTime: 'endTime',
    guestCount: 'guestCount',
    eventType: 'eventType',
    budget: 'budget',
    banquetType: 'banquetType',
    specialMenu: 'specialMenu',
    music: 'music',
    decor: 'decor',
    name: 'name',
    phone: 'phone',
    email: 'email',
    additionalWishes: 'additionalWishes',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BanquetRequestScalarFieldEnum = (typeof BanquetRequestScalarFieldEnum)[keyof typeof BanquetRequestScalarFieldEnum]


  export const Order_itemsScalarFieldEnum: {
    id: 'id',
    order_id: 'order_id',
    user_ticket_id: 'user_ticket_id',
    price: 'price',
    quantity: 'quantity'
  };

  export type Order_itemsScalarFieldEnum = (typeof Order_itemsScalarFieldEnum)[keyof typeof Order_itemsScalarFieldEnum]


  export const OrdersScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    first_name: 'first_name',
    last_name: 'last_name',
    email: 'email',
    phone: 'phone',
    status: 'status',
    total_amount: 'total_amount',
    payment_id: 'payment_id',
    payment_method: 'payment_method',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type OrdersScalarFieldEnum = (typeof OrdersScalarFieldEnum)[keyof typeof OrdersScalarFieldEnum]


  export const Refund_ticketsScalarFieldEnum: {
    refund_id: 'refund_id',
    user_ticket_id: 'user_ticket_id',
    ticket_number: 'ticket_number',
    refund_amount: 'refund_amount'
  };

  export type Refund_ticketsScalarFieldEnum = (typeof Refund_ticketsScalarFieldEnum)[keyof typeof Refund_ticketsScalarFieldEnum]


  export const RefundsScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    email: 'email',
    phone: 'phone',
    full_name: 'full_name',
    account_number: 'account_number',
    bank_name: 'bank_name',
    bik: 'bik',
    correspondent_account: 'correspondent_account',
    inn: 'inn',
    kpp: 'kpp',
    okpo: 'okpo',
    ogrn: 'ogrn',
    refund_amount: 'refund_amount',
    refund_reason: 'refund_reason',
    created_at: 'created_at',
    updated_at: 'updated_at',
    deleted_at: 'deleted_at'
  };

  export type RefundsScalarFieldEnum = (typeof RefundsScalarFieldEnum)[keyof typeof RefundsScalarFieldEnum]


  export const TicketsScalarFieldEnum: {
    id: 'id',
    title: 'title',
    short_description: 'short_description',
    description: 'description',
    image_url: 'image_url',
    event_date: 'event_date',
    event_location: 'event_location',
    price: 'price',
    is_used: 'is_used',
    qr_code: 'qr_code',
    ticket_number: 'ticket_number',
    user_id: 'user_id',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type TicketsScalarFieldEnum = (typeof TicketsScalarFieldEnum)[keyof typeof TicketsScalarFieldEnum]


  export const User_ticketsScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    ticket_id: 'ticket_id',
    ticket_number: 'ticket_number',
    qr_code: 'qr_code',
    purchase_date: 'purchase_date',
    is_used: 'is_used',
    used_at: 'used_at',
    payment_status: 'payment_status',
    payment_id: 'payment_id',
    expires_at: 'expires_at',
    created_at: 'created_at',
    updated_at: 'updated_at',
    email: 'email',
    first_name: 'first_name',
    last_name: 'last_name',
    phone: 'phone'
  };

  export type User_ticketsScalarFieldEnum = (typeof User_ticketsScalarFieldEnum)[keyof typeof User_ticketsScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    id: 'id',
    telegram_id: 'telegram_id',
    username: 'username',
    first_name: 'first_name',
    last_name: 'last_name',
    is_admin: 'is_admin',
    language_code: 'language_code',
    is_bot: 'is_bot',
    phone: 'phone',
    email: 'email',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'HallType'
   */
  export type EnumHallTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'HallType'>
    


  /**
   * Reference to a field of type 'HallType[]'
   */
  export type ListEnumHallTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'HallType[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'ZoneType'
   */
  export type EnumZoneTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ZoneType'>
    


  /**
   * Reference to a field of type 'ZoneType[]'
   */
  export type ListEnumZoneTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ZoneType[]'>
    


  /**
   * Reference to a field of type 'ZoneItemType'
   */
  export type EnumZoneItemTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ZoneItemType'>
    


  /**
   * Reference to a field of type 'ZoneItemType[]'
   */
  export type ListEnumZoneItemTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ZoneItemType[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'ReservationType'
   */
  export type EnumReservationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReservationType'>
    


  /**
   * Reference to a field of type 'ReservationType[]'
   */
  export type ListEnumReservationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReservationType[]'>
    


  /**
   * Reference to a field of type 'ReservationStatus'
   */
  export type EnumReservationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReservationStatus'>
    


  /**
   * Reference to a field of type 'ReservationStatus[]'
   */
  export type ListEnumReservationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReservationStatus[]'>
    


  /**
   * Reference to a field of type 'BanquetRequestStatus'
   */
  export type EnumBanquetRequestStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BanquetRequestStatus'>
    


  /**
   * Reference to a field of type 'BanquetRequestStatus[]'
   */
  export type ListEnumBanquetRequestStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BanquetRequestStatus[]'>
    


  /**
   * Reference to a field of type 'OrderStatus'
   */
  export type EnumOrderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderStatus'>
    


  /**
   * Reference to a field of type 'OrderStatus[]'
   */
  export type ListEnumOrderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderStatus[]'>
    


  /**
   * Reference to a field of type 'PaymentStatus'
   */
  export type EnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus'>
    


  /**
   * Reference to a field of type 'PaymentStatus[]'
   */
  export type ListEnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus[]'>
    


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'BigInt[]'
   */
  export type ListBigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt[]'>
    
  /**
   * Deep Input Types
   */


  export type HallWhereInput = {
    AND?: HallWhereInput | HallWhereInput[]
    OR?: HallWhereInput[]
    NOT?: HallWhereInput | HallWhereInput[]
    id?: IntFilter<"Hall"> | number
    name?: StringFilter<"Hall"> | string
    description?: StringNullableFilter<"Hall"> | string | null
    type?: EnumHallTypeFilter<"Hall"> | $Enums.HallType
    imageUrl?: StringNullableFilter<"Hall"> | string | null
    isActive?: BoolFilter<"Hall"> | boolean
    sortOrder?: IntFilter<"Hall"> | number
    createdAt?: DateTimeFilter<"Hall"> | Date | string
    updatedAt?: DateTimeFilter<"Hall"> | Date | string
    zones?: ZoneListRelationFilter
  }

  export type HallOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    type?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    zones?: ZoneOrderByRelationAggregateInput
  }

  export type HallWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: HallWhereInput | HallWhereInput[]
    OR?: HallWhereInput[]
    NOT?: HallWhereInput | HallWhereInput[]
    name?: StringFilter<"Hall"> | string
    description?: StringNullableFilter<"Hall"> | string | null
    type?: EnumHallTypeFilter<"Hall"> | $Enums.HallType
    imageUrl?: StringNullableFilter<"Hall"> | string | null
    isActive?: BoolFilter<"Hall"> | boolean
    sortOrder?: IntFilter<"Hall"> | number
    createdAt?: DateTimeFilter<"Hall"> | Date | string
    updatedAt?: DateTimeFilter<"Hall"> | Date | string
    zones?: ZoneListRelationFilter
  }, "id">

  export type HallOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    type?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: HallCountOrderByAggregateInput
    _avg?: HallAvgOrderByAggregateInput
    _max?: HallMaxOrderByAggregateInput
    _min?: HallMinOrderByAggregateInput
    _sum?: HallSumOrderByAggregateInput
  }

  export type HallScalarWhereWithAggregatesInput = {
    AND?: HallScalarWhereWithAggregatesInput | HallScalarWhereWithAggregatesInput[]
    OR?: HallScalarWhereWithAggregatesInput[]
    NOT?: HallScalarWhereWithAggregatesInput | HallScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Hall"> | number
    name?: StringWithAggregatesFilter<"Hall"> | string
    description?: StringNullableWithAggregatesFilter<"Hall"> | string | null
    type?: EnumHallTypeWithAggregatesFilter<"Hall"> | $Enums.HallType
    imageUrl?: StringNullableWithAggregatesFilter<"Hall"> | string | null
    isActive?: BoolWithAggregatesFilter<"Hall"> | boolean
    sortOrder?: IntWithAggregatesFilter<"Hall"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Hall"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Hall"> | Date | string
  }

  export type ZoneWhereInput = {
    AND?: ZoneWhereInput | ZoneWhereInput[]
    OR?: ZoneWhereInput[]
    NOT?: ZoneWhereInput | ZoneWhereInput[]
    id?: IntFilter<"Zone"> | number
    name?: StringFilter<"Zone"> | string
    type?: EnumZoneTypeFilter<"Zone"> | $Enums.ZoneType
    hallId?: IntFilter<"Zone"> | number
    openTime?: StringFilter<"Zone"> | string
    closeTime?: StringFilter<"Zone"> | string
    imageUrl?: StringNullableFilter<"Zone"> | string | null
    description?: StringNullableFilter<"Zone"> | string | null
    isActive?: BoolFilter<"Zone"> | boolean
    sortOrder?: IntFilter<"Zone"> | number
    createdAt?: DateTimeFilter<"Zone"> | Date | string
    updatedAt?: DateTimeFilter<"Zone"> | Date | string
    hall?: XOR<HallRelationFilter, HallWhereInput>
    items?: ZoneItemListRelationFilter
  }

  export type ZoneOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    hallId?: SortOrder
    openTime?: SortOrder
    closeTime?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    hall?: HallOrderByWithRelationInput
    items?: ZoneItemOrderByRelationAggregateInput
  }

  export type ZoneWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ZoneWhereInput | ZoneWhereInput[]
    OR?: ZoneWhereInput[]
    NOT?: ZoneWhereInput | ZoneWhereInput[]
    name?: StringFilter<"Zone"> | string
    type?: EnumZoneTypeFilter<"Zone"> | $Enums.ZoneType
    hallId?: IntFilter<"Zone"> | number
    openTime?: StringFilter<"Zone"> | string
    closeTime?: StringFilter<"Zone"> | string
    imageUrl?: StringNullableFilter<"Zone"> | string | null
    description?: StringNullableFilter<"Zone"> | string | null
    isActive?: BoolFilter<"Zone"> | boolean
    sortOrder?: IntFilter<"Zone"> | number
    createdAt?: DateTimeFilter<"Zone"> | Date | string
    updatedAt?: DateTimeFilter<"Zone"> | Date | string
    hall?: XOR<HallRelationFilter, HallWhereInput>
    items?: ZoneItemListRelationFilter
  }, "id">

  export type ZoneOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    hallId?: SortOrder
    openTime?: SortOrder
    closeTime?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ZoneCountOrderByAggregateInput
    _avg?: ZoneAvgOrderByAggregateInput
    _max?: ZoneMaxOrderByAggregateInput
    _min?: ZoneMinOrderByAggregateInput
    _sum?: ZoneSumOrderByAggregateInput
  }

  export type ZoneScalarWhereWithAggregatesInput = {
    AND?: ZoneScalarWhereWithAggregatesInput | ZoneScalarWhereWithAggregatesInput[]
    OR?: ZoneScalarWhereWithAggregatesInput[]
    NOT?: ZoneScalarWhereWithAggregatesInput | ZoneScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Zone"> | number
    name?: StringWithAggregatesFilter<"Zone"> | string
    type?: EnumZoneTypeWithAggregatesFilter<"Zone"> | $Enums.ZoneType
    hallId?: IntWithAggregatesFilter<"Zone"> | number
    openTime?: StringWithAggregatesFilter<"Zone"> | string
    closeTime?: StringWithAggregatesFilter<"Zone"> | string
    imageUrl?: StringNullableWithAggregatesFilter<"Zone"> | string | null
    description?: StringNullableWithAggregatesFilter<"Zone"> | string | null
    isActive?: BoolWithAggregatesFilter<"Zone"> | boolean
    sortOrder?: IntWithAggregatesFilter<"Zone"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Zone"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Zone"> | Date | string
  }

  export type ZoneItemWhereInput = {
    AND?: ZoneItemWhereInput | ZoneItemWhereInput[]
    OR?: ZoneItemWhereInput[]
    NOT?: ZoneItemWhereInput | ZoneItemWhereInput[]
    id?: IntFilter<"ZoneItem"> | number
    zoneId?: IntFilter<"ZoneItem"> | number
    floor?: IntFilter<"ZoneItem"> | number
    label?: StringFilter<"ZoneItem"> | string
    type?: EnumZoneItemTypeFilter<"ZoneItem"> | $Enums.ZoneItemType
    isBooking?: BoolFilter<"ZoneItem"> | boolean
    isActive?: BoolFilter<"ZoneItem"> | boolean
    x?: FloatFilter<"ZoneItem"> | number
    y?: FloatFilter<"ZoneItem"> | number
    width?: FloatFilter<"ZoneItem"> | number
    height?: FloatFilter<"ZoneItem"> | number
    seats?: IntNullableFilter<"ZoneItem"> | number | null
    capacity?: IntNullableFilter<"ZoneItem"> | number | null
    pricePerHour?: DecimalNullableFilter<"ZoneItem"> | Decimal | DecimalJsLike | number | string | null
    pricePerSeat?: DecimalNullableFilter<"ZoneItem"> | Decimal | DecimalJsLike | number | string | null
    pricePerSlot?: DecimalNullableFilter<"ZoneItem"> | Decimal | DecimalJsLike | number | string | null
    minDuration?: IntNullableFilter<"ZoneItem"> | number | null
    maxDuration?: IntNullableFilter<"ZoneItem"> | number | null
    timeSlots?: StringNullableListFilter<"ZoneItem">
    description?: StringNullableFilter<"ZoneItem"> | string | null
    features?: StringNullableListFilter<"ZoneItem">
    reservations?: ReservationListRelationFilter
    zone?: XOR<ZoneRelationFilter, ZoneWhereInput>
  }

  export type ZoneItemOrderByWithRelationInput = {
    id?: SortOrder
    zoneId?: SortOrder
    floor?: SortOrder
    label?: SortOrder
    type?: SortOrder
    isBooking?: SortOrder
    isActive?: SortOrder
    x?: SortOrder
    y?: SortOrder
    width?: SortOrder
    height?: SortOrder
    seats?: SortOrderInput | SortOrder
    capacity?: SortOrderInput | SortOrder
    pricePerHour?: SortOrderInput | SortOrder
    pricePerSeat?: SortOrderInput | SortOrder
    pricePerSlot?: SortOrderInput | SortOrder
    minDuration?: SortOrderInput | SortOrder
    maxDuration?: SortOrderInput | SortOrder
    timeSlots?: SortOrder
    description?: SortOrderInput | SortOrder
    features?: SortOrder
    reservations?: ReservationOrderByRelationAggregateInput
    zone?: ZoneOrderByWithRelationInput
  }

  export type ZoneItemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ZoneItemWhereInput | ZoneItemWhereInput[]
    OR?: ZoneItemWhereInput[]
    NOT?: ZoneItemWhereInput | ZoneItemWhereInput[]
    zoneId?: IntFilter<"ZoneItem"> | number
    floor?: IntFilter<"ZoneItem"> | number
    label?: StringFilter<"ZoneItem"> | string
    type?: EnumZoneItemTypeFilter<"ZoneItem"> | $Enums.ZoneItemType
    isBooking?: BoolFilter<"ZoneItem"> | boolean
    isActive?: BoolFilter<"ZoneItem"> | boolean
    x?: FloatFilter<"ZoneItem"> | number
    y?: FloatFilter<"ZoneItem"> | number
    width?: FloatFilter<"ZoneItem"> | number
    height?: FloatFilter<"ZoneItem"> | number
    seats?: IntNullableFilter<"ZoneItem"> | number | null
    capacity?: IntNullableFilter<"ZoneItem"> | number | null
    pricePerHour?: DecimalNullableFilter<"ZoneItem"> | Decimal | DecimalJsLike | number | string | null
    pricePerSeat?: DecimalNullableFilter<"ZoneItem"> | Decimal | DecimalJsLike | number | string | null
    pricePerSlot?: DecimalNullableFilter<"ZoneItem"> | Decimal | DecimalJsLike | number | string | null
    minDuration?: IntNullableFilter<"ZoneItem"> | number | null
    maxDuration?: IntNullableFilter<"ZoneItem"> | number | null
    timeSlots?: StringNullableListFilter<"ZoneItem">
    description?: StringNullableFilter<"ZoneItem"> | string | null
    features?: StringNullableListFilter<"ZoneItem">
    reservations?: ReservationListRelationFilter
    zone?: XOR<ZoneRelationFilter, ZoneWhereInput>
  }, "id">

  export type ZoneItemOrderByWithAggregationInput = {
    id?: SortOrder
    zoneId?: SortOrder
    floor?: SortOrder
    label?: SortOrder
    type?: SortOrder
    isBooking?: SortOrder
    isActive?: SortOrder
    x?: SortOrder
    y?: SortOrder
    width?: SortOrder
    height?: SortOrder
    seats?: SortOrderInput | SortOrder
    capacity?: SortOrderInput | SortOrder
    pricePerHour?: SortOrderInput | SortOrder
    pricePerSeat?: SortOrderInput | SortOrder
    pricePerSlot?: SortOrderInput | SortOrder
    minDuration?: SortOrderInput | SortOrder
    maxDuration?: SortOrderInput | SortOrder
    timeSlots?: SortOrder
    description?: SortOrderInput | SortOrder
    features?: SortOrder
    _count?: ZoneItemCountOrderByAggregateInput
    _avg?: ZoneItemAvgOrderByAggregateInput
    _max?: ZoneItemMaxOrderByAggregateInput
    _min?: ZoneItemMinOrderByAggregateInput
    _sum?: ZoneItemSumOrderByAggregateInput
  }

  export type ZoneItemScalarWhereWithAggregatesInput = {
    AND?: ZoneItemScalarWhereWithAggregatesInput | ZoneItemScalarWhereWithAggregatesInput[]
    OR?: ZoneItemScalarWhereWithAggregatesInput[]
    NOT?: ZoneItemScalarWhereWithAggregatesInput | ZoneItemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ZoneItem"> | number
    zoneId?: IntWithAggregatesFilter<"ZoneItem"> | number
    floor?: IntWithAggregatesFilter<"ZoneItem"> | number
    label?: StringWithAggregatesFilter<"ZoneItem"> | string
    type?: EnumZoneItemTypeWithAggregatesFilter<"ZoneItem"> | $Enums.ZoneItemType
    isBooking?: BoolWithAggregatesFilter<"ZoneItem"> | boolean
    isActive?: BoolWithAggregatesFilter<"ZoneItem"> | boolean
    x?: FloatWithAggregatesFilter<"ZoneItem"> | number
    y?: FloatWithAggregatesFilter<"ZoneItem"> | number
    width?: FloatWithAggregatesFilter<"ZoneItem"> | number
    height?: FloatWithAggregatesFilter<"ZoneItem"> | number
    seats?: IntNullableWithAggregatesFilter<"ZoneItem"> | number | null
    capacity?: IntNullableWithAggregatesFilter<"ZoneItem"> | number | null
    pricePerHour?: DecimalNullableWithAggregatesFilter<"ZoneItem"> | Decimal | DecimalJsLike | number | string | null
    pricePerSeat?: DecimalNullableWithAggregatesFilter<"ZoneItem"> | Decimal | DecimalJsLike | number | string | null
    pricePerSlot?: DecimalNullableWithAggregatesFilter<"ZoneItem"> | Decimal | DecimalJsLike | number | string | null
    minDuration?: IntNullableWithAggregatesFilter<"ZoneItem"> | number | null
    maxDuration?: IntNullableWithAggregatesFilter<"ZoneItem"> | number | null
    timeSlots?: StringNullableListFilter<"ZoneItem">
    description?: StringNullableWithAggregatesFilter<"ZoneItem"> | string | null
    features?: StringNullableListFilter<"ZoneItem">
  }

  export type ReservationWhereInput = {
    AND?: ReservationWhereInput | ReservationWhereInput[]
    OR?: ReservationWhereInput[]
    NOT?: ReservationWhereInput | ReservationWhereInput[]
    id?: IntFilter<"Reservation"> | number
    zoneItemId?: IntFilter<"Reservation"> | number
    type?: EnumReservationTypeFilter<"Reservation"> | $Enums.ReservationType
    userName?: StringFilter<"Reservation"> | string
    phone?: StringFilter<"Reservation"> | string
    startsAt?: DateTimeFilter<"Reservation"> | Date | string
    endsAt?: DateTimeFilter<"Reservation"> | Date | string
    deposit?: DecimalFilter<"Reservation"> | Decimal | DecimalJsLike | number | string
    status?: EnumReservationStatusFilter<"Reservation"> | $Enums.ReservationStatus
    seatsCount?: IntNullableFilter<"Reservation"> | number | null
    guestsCount?: IntNullableFilter<"Reservation"> | number | null
    duration?: IntNullableFilter<"Reservation"> | number | null
    comment?: StringNullableFilter<"Reservation"> | string | null
    specialRequests?: StringNullableFilter<"Reservation"> | string | null
    totalPrice?: DecimalNullableFilter<"Reservation"> | Decimal | DecimalJsLike | number | string | null
    payments?: PaymentListRelationFilter
    zoneItem?: XOR<ZoneItemRelationFilter, ZoneItemWhereInput>
  }

  export type ReservationOrderByWithRelationInput = {
    id?: SortOrder
    zoneItemId?: SortOrder
    type?: SortOrder
    userName?: SortOrder
    phone?: SortOrder
    startsAt?: SortOrder
    endsAt?: SortOrder
    deposit?: SortOrder
    status?: SortOrder
    seatsCount?: SortOrderInput | SortOrder
    guestsCount?: SortOrderInput | SortOrder
    duration?: SortOrderInput | SortOrder
    comment?: SortOrderInput | SortOrder
    specialRequests?: SortOrderInput | SortOrder
    totalPrice?: SortOrderInput | SortOrder
    payments?: PaymentOrderByRelationAggregateInput
    zoneItem?: ZoneItemOrderByWithRelationInput
  }

  export type ReservationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ReservationWhereInput | ReservationWhereInput[]
    OR?: ReservationWhereInput[]
    NOT?: ReservationWhereInput | ReservationWhereInput[]
    zoneItemId?: IntFilter<"Reservation"> | number
    type?: EnumReservationTypeFilter<"Reservation"> | $Enums.ReservationType
    userName?: StringFilter<"Reservation"> | string
    phone?: StringFilter<"Reservation"> | string
    startsAt?: DateTimeFilter<"Reservation"> | Date | string
    endsAt?: DateTimeFilter<"Reservation"> | Date | string
    deposit?: DecimalFilter<"Reservation"> | Decimal | DecimalJsLike | number | string
    status?: EnumReservationStatusFilter<"Reservation"> | $Enums.ReservationStatus
    seatsCount?: IntNullableFilter<"Reservation"> | number | null
    guestsCount?: IntNullableFilter<"Reservation"> | number | null
    duration?: IntNullableFilter<"Reservation"> | number | null
    comment?: StringNullableFilter<"Reservation"> | string | null
    specialRequests?: StringNullableFilter<"Reservation"> | string | null
    totalPrice?: DecimalNullableFilter<"Reservation"> | Decimal | DecimalJsLike | number | string | null
    payments?: PaymentListRelationFilter
    zoneItem?: XOR<ZoneItemRelationFilter, ZoneItemWhereInput>
  }, "id">

  export type ReservationOrderByWithAggregationInput = {
    id?: SortOrder
    zoneItemId?: SortOrder
    type?: SortOrder
    userName?: SortOrder
    phone?: SortOrder
    startsAt?: SortOrder
    endsAt?: SortOrder
    deposit?: SortOrder
    status?: SortOrder
    seatsCount?: SortOrderInput | SortOrder
    guestsCount?: SortOrderInput | SortOrder
    duration?: SortOrderInput | SortOrder
    comment?: SortOrderInput | SortOrder
    specialRequests?: SortOrderInput | SortOrder
    totalPrice?: SortOrderInput | SortOrder
    _count?: ReservationCountOrderByAggregateInput
    _avg?: ReservationAvgOrderByAggregateInput
    _max?: ReservationMaxOrderByAggregateInput
    _min?: ReservationMinOrderByAggregateInput
    _sum?: ReservationSumOrderByAggregateInput
  }

  export type ReservationScalarWhereWithAggregatesInput = {
    AND?: ReservationScalarWhereWithAggregatesInput | ReservationScalarWhereWithAggregatesInput[]
    OR?: ReservationScalarWhereWithAggregatesInput[]
    NOT?: ReservationScalarWhereWithAggregatesInput | ReservationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Reservation"> | number
    zoneItemId?: IntWithAggregatesFilter<"Reservation"> | number
    type?: EnumReservationTypeWithAggregatesFilter<"Reservation"> | $Enums.ReservationType
    userName?: StringWithAggregatesFilter<"Reservation"> | string
    phone?: StringWithAggregatesFilter<"Reservation"> | string
    startsAt?: DateTimeWithAggregatesFilter<"Reservation"> | Date | string
    endsAt?: DateTimeWithAggregatesFilter<"Reservation"> | Date | string
    deposit?: DecimalWithAggregatesFilter<"Reservation"> | Decimal | DecimalJsLike | number | string
    status?: EnumReservationStatusWithAggregatesFilter<"Reservation"> | $Enums.ReservationStatus
    seatsCount?: IntNullableWithAggregatesFilter<"Reservation"> | number | null
    guestsCount?: IntNullableWithAggregatesFilter<"Reservation"> | number | null
    duration?: IntNullableWithAggregatesFilter<"Reservation"> | number | null
    comment?: StringNullableWithAggregatesFilter<"Reservation"> | string | null
    specialRequests?: StringNullableWithAggregatesFilter<"Reservation"> | string | null
    totalPrice?: DecimalNullableWithAggregatesFilter<"Reservation"> | Decimal | DecimalJsLike | number | string | null
  }

  export type PaymentWhereInput = {
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    id?: IntFilter<"Payment"> | number
    reservationId?: IntFilter<"Payment"> | number
    amount?: DecimalFilter<"Payment"> | Decimal | DecimalJsLike | number | string
    payDate?: DateTimeFilter<"Payment"> | Date | string
    refunded?: BoolFilter<"Payment"> | boolean
    reservation?: XOR<ReservationRelationFilter, ReservationWhereInput>
  }

  export type PaymentOrderByWithRelationInput = {
    id?: SortOrder
    reservationId?: SortOrder
    amount?: SortOrder
    payDate?: SortOrder
    refunded?: SortOrder
    reservation?: ReservationOrderByWithRelationInput
  }

  export type PaymentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    reservationId?: IntFilter<"Payment"> | number
    amount?: DecimalFilter<"Payment"> | Decimal | DecimalJsLike | number | string
    payDate?: DateTimeFilter<"Payment"> | Date | string
    refunded?: BoolFilter<"Payment"> | boolean
    reservation?: XOR<ReservationRelationFilter, ReservationWhereInput>
  }, "id">

  export type PaymentOrderByWithAggregationInput = {
    id?: SortOrder
    reservationId?: SortOrder
    amount?: SortOrder
    payDate?: SortOrder
    refunded?: SortOrder
    _count?: PaymentCountOrderByAggregateInput
    _avg?: PaymentAvgOrderByAggregateInput
    _max?: PaymentMaxOrderByAggregateInput
    _min?: PaymentMinOrderByAggregateInput
    _sum?: PaymentSumOrderByAggregateInput
  }

  export type PaymentScalarWhereWithAggregatesInput = {
    AND?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    OR?: PaymentScalarWhereWithAggregatesInput[]
    NOT?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Payment"> | number
    reservationId?: IntWithAggregatesFilter<"Payment"> | number
    amount?: DecimalWithAggregatesFilter<"Payment"> | Decimal | DecimalJsLike | number | string
    payDate?: DateTimeWithAggregatesFilter<"Payment"> | Date | string
    refunded?: BoolWithAggregatesFilter<"Payment"> | boolean
  }

  export type MenuTypeWhereInput = {
    AND?: MenuTypeWhereInput | MenuTypeWhereInput[]
    OR?: MenuTypeWhereInput[]
    NOT?: MenuTypeWhereInput | MenuTypeWhereInput[]
    id?: IntFilter<"MenuType"> | number
    name?: StringFilter<"MenuType"> | string
    slug?: StringFilter<"MenuType"> | string
    description?: StringNullableFilter<"MenuType"> | string | null
    isActive?: BoolFilter<"MenuType"> | boolean
    sortOrder?: IntFilter<"MenuType"> | number
    createdAt?: DateTimeFilter<"MenuType"> | Date | string
    updatedAt?: DateTimeFilter<"MenuType"> | Date | string
    categories?: MenuCategoryListRelationFilter
  }

  export type MenuTypeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrderInput | SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    categories?: MenuCategoryOrderByRelationAggregateInput
  }

  export type MenuTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    slug?: string
    AND?: MenuTypeWhereInput | MenuTypeWhereInput[]
    OR?: MenuTypeWhereInput[]
    NOT?: MenuTypeWhereInput | MenuTypeWhereInput[]
    name?: StringFilter<"MenuType"> | string
    description?: StringNullableFilter<"MenuType"> | string | null
    isActive?: BoolFilter<"MenuType"> | boolean
    sortOrder?: IntFilter<"MenuType"> | number
    createdAt?: DateTimeFilter<"MenuType"> | Date | string
    updatedAt?: DateTimeFilter<"MenuType"> | Date | string
    categories?: MenuCategoryListRelationFilter
  }, "id" | "slug">

  export type MenuTypeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrderInput | SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MenuTypeCountOrderByAggregateInput
    _avg?: MenuTypeAvgOrderByAggregateInput
    _max?: MenuTypeMaxOrderByAggregateInput
    _min?: MenuTypeMinOrderByAggregateInput
    _sum?: MenuTypeSumOrderByAggregateInput
  }

  export type MenuTypeScalarWhereWithAggregatesInput = {
    AND?: MenuTypeScalarWhereWithAggregatesInput | MenuTypeScalarWhereWithAggregatesInput[]
    OR?: MenuTypeScalarWhereWithAggregatesInput[]
    NOT?: MenuTypeScalarWhereWithAggregatesInput | MenuTypeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MenuType"> | number
    name?: StringWithAggregatesFilter<"MenuType"> | string
    slug?: StringWithAggregatesFilter<"MenuType"> | string
    description?: StringNullableWithAggregatesFilter<"MenuType"> | string | null
    isActive?: BoolWithAggregatesFilter<"MenuType"> | boolean
    sortOrder?: IntWithAggregatesFilter<"MenuType"> | number
    createdAt?: DateTimeWithAggregatesFilter<"MenuType"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MenuType"> | Date | string
  }

  export type MenuCategoryWhereInput = {
    AND?: MenuCategoryWhereInput | MenuCategoryWhereInput[]
    OR?: MenuCategoryWhereInput[]
    NOT?: MenuCategoryWhereInput | MenuCategoryWhereInput[]
    id?: IntFilter<"MenuCategory"> | number
    menuTypeId?: IntFilter<"MenuCategory"> | number
    name?: StringFilter<"MenuCategory"> | string
    slug?: StringFilter<"MenuCategory"> | string
    description?: StringNullableFilter<"MenuCategory"> | string | null
    isActive?: BoolFilter<"MenuCategory"> | boolean
    sortOrder?: IntFilter<"MenuCategory"> | number
    createdAt?: DateTimeFilter<"MenuCategory"> | Date | string
    updatedAt?: DateTimeFilter<"MenuCategory"> | Date | string
    menuType?: XOR<MenuTypeRelationFilter, MenuTypeWhereInput>
    items?: MenuItemListRelationFilter
  }

  export type MenuCategoryOrderByWithRelationInput = {
    id?: SortOrder
    menuTypeId?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrderInput | SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    menuType?: MenuTypeOrderByWithRelationInput
    items?: MenuItemOrderByRelationAggregateInput
  }

  export type MenuCategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    slug?: string
    AND?: MenuCategoryWhereInput | MenuCategoryWhereInput[]
    OR?: MenuCategoryWhereInput[]
    NOT?: MenuCategoryWhereInput | MenuCategoryWhereInput[]
    menuTypeId?: IntFilter<"MenuCategory"> | number
    name?: StringFilter<"MenuCategory"> | string
    description?: StringNullableFilter<"MenuCategory"> | string | null
    isActive?: BoolFilter<"MenuCategory"> | boolean
    sortOrder?: IntFilter<"MenuCategory"> | number
    createdAt?: DateTimeFilter<"MenuCategory"> | Date | string
    updatedAt?: DateTimeFilter<"MenuCategory"> | Date | string
    menuType?: XOR<MenuTypeRelationFilter, MenuTypeWhereInput>
    items?: MenuItemListRelationFilter
  }, "id" | "slug">

  export type MenuCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    menuTypeId?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrderInput | SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MenuCategoryCountOrderByAggregateInput
    _avg?: MenuCategoryAvgOrderByAggregateInput
    _max?: MenuCategoryMaxOrderByAggregateInput
    _min?: MenuCategoryMinOrderByAggregateInput
    _sum?: MenuCategorySumOrderByAggregateInput
  }

  export type MenuCategoryScalarWhereWithAggregatesInput = {
    AND?: MenuCategoryScalarWhereWithAggregatesInput | MenuCategoryScalarWhereWithAggregatesInput[]
    OR?: MenuCategoryScalarWhereWithAggregatesInput[]
    NOT?: MenuCategoryScalarWhereWithAggregatesInput | MenuCategoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MenuCategory"> | number
    menuTypeId?: IntWithAggregatesFilter<"MenuCategory"> | number
    name?: StringWithAggregatesFilter<"MenuCategory"> | string
    slug?: StringWithAggregatesFilter<"MenuCategory"> | string
    description?: StringNullableWithAggregatesFilter<"MenuCategory"> | string | null
    isActive?: BoolWithAggregatesFilter<"MenuCategory"> | boolean
    sortOrder?: IntWithAggregatesFilter<"MenuCategory"> | number
    createdAt?: DateTimeWithAggregatesFilter<"MenuCategory"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MenuCategory"> | Date | string
  }

  export type MenuItemWhereInput = {
    AND?: MenuItemWhereInput | MenuItemWhereInput[]
    OR?: MenuItemWhereInput[]
    NOT?: MenuItemWhereInput | MenuItemWhereInput[]
    id?: IntFilter<"MenuItem"> | number
    categoryId?: IntFilter<"MenuItem"> | number
    name?: StringFilter<"MenuItem"> | string
    description?: StringNullableFilter<"MenuItem"> | string | null
    price?: DecimalFilter<"MenuItem"> | Decimal | DecimalJsLike | number | string
    imageUrl?: StringNullableFilter<"MenuItem"> | string | null
    isActive?: BoolFilter<"MenuItem"> | boolean
    sortOrder?: IntFilter<"MenuItem"> | number
    createdAt?: DateTimeFilter<"MenuItem"> | Date | string
    updatedAt?: DateTimeFilter<"MenuItem"> | Date | string
    category?: XOR<MenuCategoryRelationFilter, MenuCategoryWhereInput>
  }

  export type MenuItemOrderByWithRelationInput = {
    id?: SortOrder
    categoryId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    price?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    category?: MenuCategoryOrderByWithRelationInput
  }

  export type MenuItemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MenuItemWhereInput | MenuItemWhereInput[]
    OR?: MenuItemWhereInput[]
    NOT?: MenuItemWhereInput | MenuItemWhereInput[]
    categoryId?: IntFilter<"MenuItem"> | number
    name?: StringFilter<"MenuItem"> | string
    description?: StringNullableFilter<"MenuItem"> | string | null
    price?: DecimalFilter<"MenuItem"> | Decimal | DecimalJsLike | number | string
    imageUrl?: StringNullableFilter<"MenuItem"> | string | null
    isActive?: BoolFilter<"MenuItem"> | boolean
    sortOrder?: IntFilter<"MenuItem"> | number
    createdAt?: DateTimeFilter<"MenuItem"> | Date | string
    updatedAt?: DateTimeFilter<"MenuItem"> | Date | string
    category?: XOR<MenuCategoryRelationFilter, MenuCategoryWhereInput>
  }, "id">

  export type MenuItemOrderByWithAggregationInput = {
    id?: SortOrder
    categoryId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    price?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MenuItemCountOrderByAggregateInput
    _avg?: MenuItemAvgOrderByAggregateInput
    _max?: MenuItemMaxOrderByAggregateInput
    _min?: MenuItemMinOrderByAggregateInput
    _sum?: MenuItemSumOrderByAggregateInput
  }

  export type MenuItemScalarWhereWithAggregatesInput = {
    AND?: MenuItemScalarWhereWithAggregatesInput | MenuItemScalarWhereWithAggregatesInput[]
    OR?: MenuItemScalarWhereWithAggregatesInput[]
    NOT?: MenuItemScalarWhereWithAggregatesInput | MenuItemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MenuItem"> | number
    categoryId?: IntWithAggregatesFilter<"MenuItem"> | number
    name?: StringWithAggregatesFilter<"MenuItem"> | string
    description?: StringNullableWithAggregatesFilter<"MenuItem"> | string | null
    price?: DecimalWithAggregatesFilter<"MenuItem"> | Decimal | DecimalJsLike | number | string
    imageUrl?: StringNullableWithAggregatesFilter<"MenuItem"> | string | null
    isActive?: BoolWithAggregatesFilter<"MenuItem"> | boolean
    sortOrder?: IntWithAggregatesFilter<"MenuItem"> | number
    createdAt?: DateTimeWithAggregatesFilter<"MenuItem"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MenuItem"> | Date | string
  }

  export type HookahWhereInput = {
    AND?: HookahWhereInput | HookahWhereInput[]
    OR?: HookahWhereInput[]
    NOT?: HookahWhereInput | HookahWhereInput[]
    id?: IntFilter<"Hookah"> | number
    name?: StringFilter<"Hookah"> | string
    description?: StringNullableFilter<"Hookah"> | string | null
    price?: DecimalFilter<"Hookah"> | Decimal | DecimalJsLike | number | string
    features?: StringNullableListFilter<"Hookah">
    isActive?: BoolFilter<"Hookah"> | boolean
    sortOrder?: IntFilter<"Hookah"> | number
    createdAt?: DateTimeFilter<"Hookah"> | Date | string
    updatedAt?: DateTimeFilter<"Hookah"> | Date | string
  }

  export type HookahOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    price?: SortOrder
    features?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HookahWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: HookahWhereInput | HookahWhereInput[]
    OR?: HookahWhereInput[]
    NOT?: HookahWhereInput | HookahWhereInput[]
    name?: StringFilter<"Hookah"> | string
    description?: StringNullableFilter<"Hookah"> | string | null
    price?: DecimalFilter<"Hookah"> | Decimal | DecimalJsLike | number | string
    features?: StringNullableListFilter<"Hookah">
    isActive?: BoolFilter<"Hookah"> | boolean
    sortOrder?: IntFilter<"Hookah"> | number
    createdAt?: DateTimeFilter<"Hookah"> | Date | string
    updatedAt?: DateTimeFilter<"Hookah"> | Date | string
  }, "id">

  export type HookahOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    price?: SortOrder
    features?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: HookahCountOrderByAggregateInput
    _avg?: HookahAvgOrderByAggregateInput
    _max?: HookahMaxOrderByAggregateInput
    _min?: HookahMinOrderByAggregateInput
    _sum?: HookahSumOrderByAggregateInput
  }

  export type HookahScalarWhereWithAggregatesInput = {
    AND?: HookahScalarWhereWithAggregatesInput | HookahScalarWhereWithAggregatesInput[]
    OR?: HookahScalarWhereWithAggregatesInput[]
    NOT?: HookahScalarWhereWithAggregatesInput | HookahScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Hookah"> | number
    name?: StringWithAggregatesFilter<"Hookah"> | string
    description?: StringNullableWithAggregatesFilter<"Hookah"> | string | null
    price?: DecimalWithAggregatesFilter<"Hookah"> | Decimal | DecimalJsLike | number | string
    features?: StringNullableListFilter<"Hookah">
    isActive?: BoolWithAggregatesFilter<"Hookah"> | boolean
    sortOrder?: IntWithAggregatesFilter<"Hookah"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Hookah"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Hookah"> | Date | string
  }

  export type BoardGameWhereInput = {
    AND?: BoardGameWhereInput | BoardGameWhereInput[]
    OR?: BoardGameWhereInput[]
    NOT?: BoardGameWhereInput | BoardGameWhereInput[]
    id?: IntFilter<"BoardGame"> | number
    name?: StringFilter<"BoardGame"> | string
    description?: StringNullableFilter<"BoardGame"> | string | null
    price?: DecimalFilter<"BoardGame"> | Decimal | DecimalJsLike | number | string
    duration?: StringNullableFilter<"BoardGame"> | string | null
    players?: StringNullableFilter<"BoardGame"> | string | null
    difficulty?: StringNullableFilter<"BoardGame"> | string | null
    category?: StringNullableFilter<"BoardGame"> | string | null
    imageUrl?: StringNullableFilter<"BoardGame"> | string | null
    isActive?: BoolFilter<"BoardGame"> | boolean
    sortOrder?: IntFilter<"BoardGame"> | number
    createdAt?: DateTimeFilter<"BoardGame"> | Date | string
    updatedAt?: DateTimeFilter<"BoardGame"> | Date | string
  }

  export type BoardGameOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    price?: SortOrder
    duration?: SortOrderInput | SortOrder
    players?: SortOrderInput | SortOrder
    difficulty?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BoardGameWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BoardGameWhereInput | BoardGameWhereInput[]
    OR?: BoardGameWhereInput[]
    NOT?: BoardGameWhereInput | BoardGameWhereInput[]
    name?: StringFilter<"BoardGame"> | string
    description?: StringNullableFilter<"BoardGame"> | string | null
    price?: DecimalFilter<"BoardGame"> | Decimal | DecimalJsLike | number | string
    duration?: StringNullableFilter<"BoardGame"> | string | null
    players?: StringNullableFilter<"BoardGame"> | string | null
    difficulty?: StringNullableFilter<"BoardGame"> | string | null
    category?: StringNullableFilter<"BoardGame"> | string | null
    imageUrl?: StringNullableFilter<"BoardGame"> | string | null
    isActive?: BoolFilter<"BoardGame"> | boolean
    sortOrder?: IntFilter<"BoardGame"> | number
    createdAt?: DateTimeFilter<"BoardGame"> | Date | string
    updatedAt?: DateTimeFilter<"BoardGame"> | Date | string
  }, "id">

  export type BoardGameOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    price?: SortOrder
    duration?: SortOrderInput | SortOrder
    players?: SortOrderInput | SortOrder
    difficulty?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BoardGameCountOrderByAggregateInput
    _avg?: BoardGameAvgOrderByAggregateInput
    _max?: BoardGameMaxOrderByAggregateInput
    _min?: BoardGameMinOrderByAggregateInput
    _sum?: BoardGameSumOrderByAggregateInput
  }

  export type BoardGameScalarWhereWithAggregatesInput = {
    AND?: BoardGameScalarWhereWithAggregatesInput | BoardGameScalarWhereWithAggregatesInput[]
    OR?: BoardGameScalarWhereWithAggregatesInput[]
    NOT?: BoardGameScalarWhereWithAggregatesInput | BoardGameScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"BoardGame"> | number
    name?: StringWithAggregatesFilter<"BoardGame"> | string
    description?: StringNullableWithAggregatesFilter<"BoardGame"> | string | null
    price?: DecimalWithAggregatesFilter<"BoardGame"> | Decimal | DecimalJsLike | number | string
    duration?: StringNullableWithAggregatesFilter<"BoardGame"> | string | null
    players?: StringNullableWithAggregatesFilter<"BoardGame"> | string | null
    difficulty?: StringNullableWithAggregatesFilter<"BoardGame"> | string | null
    category?: StringNullableWithAggregatesFilter<"BoardGame"> | string | null
    imageUrl?: StringNullableWithAggregatesFilter<"BoardGame"> | string | null
    isActive?: BoolWithAggregatesFilter<"BoardGame"> | boolean
    sortOrder?: IntWithAggregatesFilter<"BoardGame"> | number
    createdAt?: DateTimeWithAggregatesFilter<"BoardGame"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"BoardGame"> | Date | string
  }

  export type BilliardsServiceWhereInput = {
    AND?: BilliardsServiceWhereInput | BilliardsServiceWhereInput[]
    OR?: BilliardsServiceWhereInput[]
    NOT?: BilliardsServiceWhereInput | BilliardsServiceWhereInput[]
    id?: IntFilter<"BilliardsService"> | number
    name?: StringFilter<"BilliardsService"> | string
    type?: StringFilter<"BilliardsService"> | string
    price?: DecimalFilter<"BilliardsService"> | Decimal | DecimalJsLike | number | string
    description?: StringNullableFilter<"BilliardsService"> | string | null
    imageUrl?: StringNullableFilter<"BilliardsService"> | string | null
    isActive?: BoolNullableFilter<"BilliardsService"> | boolean | null
    sortOrder?: IntNullableFilter<"BilliardsService"> | number | null
    createdAt?: DateTimeNullableFilter<"BilliardsService"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"BilliardsService"> | Date | string | null
  }

  export type BilliardsServiceOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    price?: SortOrder
    description?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    isActive?: SortOrderInput | SortOrder
    sortOrder?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
  }

  export type BilliardsServiceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    type?: string
    AND?: BilliardsServiceWhereInput | BilliardsServiceWhereInput[]
    OR?: BilliardsServiceWhereInput[]
    NOT?: BilliardsServiceWhereInput | BilliardsServiceWhereInput[]
    name?: StringFilter<"BilliardsService"> | string
    price?: DecimalFilter<"BilliardsService"> | Decimal | DecimalJsLike | number | string
    description?: StringNullableFilter<"BilliardsService"> | string | null
    imageUrl?: StringNullableFilter<"BilliardsService"> | string | null
    isActive?: BoolNullableFilter<"BilliardsService"> | boolean | null
    sortOrder?: IntNullableFilter<"BilliardsService"> | number | null
    createdAt?: DateTimeNullableFilter<"BilliardsService"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"BilliardsService"> | Date | string | null
  }, "id" | "type">

  export type BilliardsServiceOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    price?: SortOrder
    description?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    isActive?: SortOrderInput | SortOrder
    sortOrder?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: BilliardsServiceCountOrderByAggregateInput
    _avg?: BilliardsServiceAvgOrderByAggregateInput
    _max?: BilliardsServiceMaxOrderByAggregateInput
    _min?: BilliardsServiceMinOrderByAggregateInput
    _sum?: BilliardsServiceSumOrderByAggregateInput
  }

  export type BilliardsServiceScalarWhereWithAggregatesInput = {
    AND?: BilliardsServiceScalarWhereWithAggregatesInput | BilliardsServiceScalarWhereWithAggregatesInput[]
    OR?: BilliardsServiceScalarWhereWithAggregatesInput[]
    NOT?: BilliardsServiceScalarWhereWithAggregatesInput | BilliardsServiceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"BilliardsService"> | number
    name?: StringWithAggregatesFilter<"BilliardsService"> | string
    type?: StringWithAggregatesFilter<"BilliardsService"> | string
    price?: DecimalWithAggregatesFilter<"BilliardsService"> | Decimal | DecimalJsLike | number | string
    description?: StringNullableWithAggregatesFilter<"BilliardsService"> | string | null
    imageUrl?: StringNullableWithAggregatesFilter<"BilliardsService"> | string | null
    isActive?: BoolNullableWithAggregatesFilter<"BilliardsService"> | boolean | null
    sortOrder?: IntNullableWithAggregatesFilter<"BilliardsService"> | number | null
    createdAt?: DateTimeNullableWithAggregatesFilter<"BilliardsService"> | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter<"BilliardsService"> | Date | string | null
  }

  export type BilliardsSettingsWhereInput = {
    AND?: BilliardsSettingsWhereInput | BilliardsSettingsWhereInput[]
    OR?: BilliardsSettingsWhereInput[]
    NOT?: BilliardsSettingsWhereInput | BilliardsSettingsWhereInput[]
    id?: IntFilter<"BilliardsSettings"> | number
    bookingFee?: DecimalNullableFilter<"BilliardsSettings"> | Decimal | DecimalJsLike | number | string | null
    bookingTimeoutMinutes?: IntNullableFilter<"BilliardsSettings"> | number | null
    minBookingDuration?: IntNullableFilter<"BilliardsSettings"> | number | null
    maxBookingDuration?: IntNullableFilter<"BilliardsSettings"> | number | null
    isActive?: BoolNullableFilter<"BilliardsSettings"> | boolean | null
    createdAt?: DateTimeNullableFilter<"BilliardsSettings"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"BilliardsSettings"> | Date | string | null
  }

  export type BilliardsSettingsOrderByWithRelationInput = {
    id?: SortOrder
    bookingFee?: SortOrderInput | SortOrder
    bookingTimeoutMinutes?: SortOrderInput | SortOrder
    minBookingDuration?: SortOrderInput | SortOrder
    maxBookingDuration?: SortOrderInput | SortOrder
    isActive?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
  }

  export type BilliardsSettingsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BilliardsSettingsWhereInput | BilliardsSettingsWhereInput[]
    OR?: BilliardsSettingsWhereInput[]
    NOT?: BilliardsSettingsWhereInput | BilliardsSettingsWhereInput[]
    bookingFee?: DecimalNullableFilter<"BilliardsSettings"> | Decimal | DecimalJsLike | number | string | null
    bookingTimeoutMinutes?: IntNullableFilter<"BilliardsSettings"> | number | null
    minBookingDuration?: IntNullableFilter<"BilliardsSettings"> | number | null
    maxBookingDuration?: IntNullableFilter<"BilliardsSettings"> | number | null
    isActive?: BoolNullableFilter<"BilliardsSettings"> | boolean | null
    createdAt?: DateTimeNullableFilter<"BilliardsSettings"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"BilliardsSettings"> | Date | string | null
  }, "id">

  export type BilliardsSettingsOrderByWithAggregationInput = {
    id?: SortOrder
    bookingFee?: SortOrderInput | SortOrder
    bookingTimeoutMinutes?: SortOrderInput | SortOrder
    minBookingDuration?: SortOrderInput | SortOrder
    maxBookingDuration?: SortOrderInput | SortOrder
    isActive?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: BilliardsSettingsCountOrderByAggregateInput
    _avg?: BilliardsSettingsAvgOrderByAggregateInput
    _max?: BilliardsSettingsMaxOrderByAggregateInput
    _min?: BilliardsSettingsMinOrderByAggregateInput
    _sum?: BilliardsSettingsSumOrderByAggregateInput
  }

  export type BilliardsSettingsScalarWhereWithAggregatesInput = {
    AND?: BilliardsSettingsScalarWhereWithAggregatesInput | BilliardsSettingsScalarWhereWithAggregatesInput[]
    OR?: BilliardsSettingsScalarWhereWithAggregatesInput[]
    NOT?: BilliardsSettingsScalarWhereWithAggregatesInput | BilliardsSettingsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"BilliardsSettings"> | number
    bookingFee?: DecimalNullableWithAggregatesFilter<"BilliardsSettings"> | Decimal | DecimalJsLike | number | string | null
    bookingTimeoutMinutes?: IntNullableWithAggregatesFilter<"BilliardsSettings"> | number | null
    minBookingDuration?: IntNullableWithAggregatesFilter<"BilliardsSettings"> | number | null
    maxBookingDuration?: IntNullableWithAggregatesFilter<"BilliardsSettings"> | number | null
    isActive?: BoolNullableWithAggregatesFilter<"BilliardsSettings"> | boolean | null
    createdAt?: DateTimeNullableWithAggregatesFilter<"BilliardsSettings"> | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter<"BilliardsSettings"> | Date | string | null
  }

  export type KaraokeServiceWhereInput = {
    AND?: KaraokeServiceWhereInput | KaraokeServiceWhereInput[]
    OR?: KaraokeServiceWhereInput[]
    NOT?: KaraokeServiceWhereInput | KaraokeServiceWhereInput[]
    id?: IntFilter<"KaraokeService"> | number
    name?: StringFilter<"KaraokeService"> | string
    type?: StringFilter<"KaraokeService"> | string
    price?: DecimalFilter<"KaraokeService"> | Decimal | DecimalJsLike | number | string
    description?: StringNullableFilter<"KaraokeService"> | string | null
    imageUrl?: StringNullableFilter<"KaraokeService"> | string | null
    isActive?: BoolNullableFilter<"KaraokeService"> | boolean | null
    sortOrder?: IntNullableFilter<"KaraokeService"> | number | null
    createdAt?: DateTimeNullableFilter<"KaraokeService"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"KaraokeService"> | Date | string | null
  }

  export type KaraokeServiceOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    price?: SortOrder
    description?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    isActive?: SortOrderInput | SortOrder
    sortOrder?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
  }

  export type KaraokeServiceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    type?: string
    AND?: KaraokeServiceWhereInput | KaraokeServiceWhereInput[]
    OR?: KaraokeServiceWhereInput[]
    NOT?: KaraokeServiceWhereInput | KaraokeServiceWhereInput[]
    name?: StringFilter<"KaraokeService"> | string
    price?: DecimalFilter<"KaraokeService"> | Decimal | DecimalJsLike | number | string
    description?: StringNullableFilter<"KaraokeService"> | string | null
    imageUrl?: StringNullableFilter<"KaraokeService"> | string | null
    isActive?: BoolNullableFilter<"KaraokeService"> | boolean | null
    sortOrder?: IntNullableFilter<"KaraokeService"> | number | null
    createdAt?: DateTimeNullableFilter<"KaraokeService"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"KaraokeService"> | Date | string | null
  }, "id" | "type">

  export type KaraokeServiceOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    price?: SortOrder
    description?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    isActive?: SortOrderInput | SortOrder
    sortOrder?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: KaraokeServiceCountOrderByAggregateInput
    _avg?: KaraokeServiceAvgOrderByAggregateInput
    _max?: KaraokeServiceMaxOrderByAggregateInput
    _min?: KaraokeServiceMinOrderByAggregateInput
    _sum?: KaraokeServiceSumOrderByAggregateInput
  }

  export type KaraokeServiceScalarWhereWithAggregatesInput = {
    AND?: KaraokeServiceScalarWhereWithAggregatesInput | KaraokeServiceScalarWhereWithAggregatesInput[]
    OR?: KaraokeServiceScalarWhereWithAggregatesInput[]
    NOT?: KaraokeServiceScalarWhereWithAggregatesInput | KaraokeServiceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"KaraokeService"> | number
    name?: StringWithAggregatesFilter<"KaraokeService"> | string
    type?: StringWithAggregatesFilter<"KaraokeService"> | string
    price?: DecimalWithAggregatesFilter<"KaraokeService"> | Decimal | DecimalJsLike | number | string
    description?: StringNullableWithAggregatesFilter<"KaraokeService"> | string | null
    imageUrl?: StringNullableWithAggregatesFilter<"KaraokeService"> | string | null
    isActive?: BoolNullableWithAggregatesFilter<"KaraokeService"> | boolean | null
    sortOrder?: IntNullableWithAggregatesFilter<"KaraokeService"> | number | null
    createdAt?: DateTimeNullableWithAggregatesFilter<"KaraokeService"> | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter<"KaraokeService"> | Date | string | null
  }

  export type KaraokeSettingsWhereInput = {
    AND?: KaraokeSettingsWhereInput | KaraokeSettingsWhereInput[]
    OR?: KaraokeSettingsWhereInput[]
    NOT?: KaraokeSettingsWhereInput | KaraokeSettingsWhereInput[]
    id?: IntFilter<"KaraokeSettings"> | number
    maxVipGuests?: IntNullableFilter<"KaraokeSettings"> | number | null
    baseVipPrice?: DecimalNullableFilter<"KaraokeSettings"> | Decimal | DecimalJsLike | number | string | null
    additionalGuestPrice?: DecimalNullableFilter<"KaraokeSettings"> | Decimal | DecimalJsLike | number | string | null
    depositPolicy?: StringNullableFilter<"KaraokeSettings"> | string | null
    isActive?: BoolNullableFilter<"KaraokeSettings"> | boolean | null
    createdAt?: DateTimeNullableFilter<"KaraokeSettings"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"KaraokeSettings"> | Date | string | null
  }

  export type KaraokeSettingsOrderByWithRelationInput = {
    id?: SortOrder
    maxVipGuests?: SortOrderInput | SortOrder
    baseVipPrice?: SortOrderInput | SortOrder
    additionalGuestPrice?: SortOrderInput | SortOrder
    depositPolicy?: SortOrderInput | SortOrder
    isActive?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
  }

  export type KaraokeSettingsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: KaraokeSettingsWhereInput | KaraokeSettingsWhereInput[]
    OR?: KaraokeSettingsWhereInput[]
    NOT?: KaraokeSettingsWhereInput | KaraokeSettingsWhereInput[]
    maxVipGuests?: IntNullableFilter<"KaraokeSettings"> | number | null
    baseVipPrice?: DecimalNullableFilter<"KaraokeSettings"> | Decimal | DecimalJsLike | number | string | null
    additionalGuestPrice?: DecimalNullableFilter<"KaraokeSettings"> | Decimal | DecimalJsLike | number | string | null
    depositPolicy?: StringNullableFilter<"KaraokeSettings"> | string | null
    isActive?: BoolNullableFilter<"KaraokeSettings"> | boolean | null
    createdAt?: DateTimeNullableFilter<"KaraokeSettings"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"KaraokeSettings"> | Date | string | null
  }, "id">

  export type KaraokeSettingsOrderByWithAggregationInput = {
    id?: SortOrder
    maxVipGuests?: SortOrderInput | SortOrder
    baseVipPrice?: SortOrderInput | SortOrder
    additionalGuestPrice?: SortOrderInput | SortOrder
    depositPolicy?: SortOrderInput | SortOrder
    isActive?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: KaraokeSettingsCountOrderByAggregateInput
    _avg?: KaraokeSettingsAvgOrderByAggregateInput
    _max?: KaraokeSettingsMaxOrderByAggregateInput
    _min?: KaraokeSettingsMinOrderByAggregateInput
    _sum?: KaraokeSettingsSumOrderByAggregateInput
  }

  export type KaraokeSettingsScalarWhereWithAggregatesInput = {
    AND?: KaraokeSettingsScalarWhereWithAggregatesInput | KaraokeSettingsScalarWhereWithAggregatesInput[]
    OR?: KaraokeSettingsScalarWhereWithAggregatesInput[]
    NOT?: KaraokeSettingsScalarWhereWithAggregatesInput | KaraokeSettingsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"KaraokeSettings"> | number
    maxVipGuests?: IntNullableWithAggregatesFilter<"KaraokeSettings"> | number | null
    baseVipPrice?: DecimalNullableWithAggregatesFilter<"KaraokeSettings"> | Decimal | DecimalJsLike | number | string | null
    additionalGuestPrice?: DecimalNullableWithAggregatesFilter<"KaraokeSettings"> | Decimal | DecimalJsLike | number | string | null
    depositPolicy?: StringNullableWithAggregatesFilter<"KaraokeSettings"> | string | null
    isActive?: BoolNullableWithAggregatesFilter<"KaraokeSettings"> | boolean | null
    createdAt?: DateTimeNullableWithAggregatesFilter<"KaraokeSettings"> | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter<"KaraokeSettings"> | Date | string | null
  }

  export type BanquetRequestWhereInput = {
    AND?: BanquetRequestWhereInput | BanquetRequestWhereInput[]
    OR?: BanquetRequestWhereInput[]
    NOT?: BanquetRequestWhereInput | BanquetRequestWhereInput[]
    id?: IntFilter<"BanquetRequest"> | number
    eventDate?: DateTimeFilter<"BanquetRequest"> | Date | string
    eventTime?: StringFilter<"BanquetRequest"> | string
    endTime?: StringNullableFilter<"BanquetRequest"> | string | null
    guestCount?: IntFilter<"BanquetRequest"> | number
    eventType?: StringFilter<"BanquetRequest"> | string
    budget?: StringFilter<"BanquetRequest"> | string
    banquetType?: StringNullableFilter<"BanquetRequest"> | string | null
    specialMenu?: StringNullableFilter<"BanquetRequest"> | string | null
    music?: StringNullableFilter<"BanquetRequest"> | string | null
    decor?: StringNullableFilter<"BanquetRequest"> | string | null
    name?: StringFilter<"BanquetRequest"> | string
    phone?: StringFilter<"BanquetRequest"> | string
    email?: StringNullableFilter<"BanquetRequest"> | string | null
    additionalWishes?: StringNullableFilter<"BanquetRequest"> | string | null
    status?: EnumBanquetRequestStatusFilter<"BanquetRequest"> | $Enums.BanquetRequestStatus
    createdAt?: DateTimeFilter<"BanquetRequest"> | Date | string
    updatedAt?: DateTimeFilter<"BanquetRequest"> | Date | string
  }

  export type BanquetRequestOrderByWithRelationInput = {
    id?: SortOrder
    eventDate?: SortOrder
    eventTime?: SortOrder
    endTime?: SortOrderInput | SortOrder
    guestCount?: SortOrder
    eventType?: SortOrder
    budget?: SortOrder
    banquetType?: SortOrderInput | SortOrder
    specialMenu?: SortOrderInput | SortOrder
    music?: SortOrderInput | SortOrder
    decor?: SortOrderInput | SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrderInput | SortOrder
    additionalWishes?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BanquetRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BanquetRequestWhereInput | BanquetRequestWhereInput[]
    OR?: BanquetRequestWhereInput[]
    NOT?: BanquetRequestWhereInput | BanquetRequestWhereInput[]
    eventDate?: DateTimeFilter<"BanquetRequest"> | Date | string
    eventTime?: StringFilter<"BanquetRequest"> | string
    endTime?: StringNullableFilter<"BanquetRequest"> | string | null
    guestCount?: IntFilter<"BanquetRequest"> | number
    eventType?: StringFilter<"BanquetRequest"> | string
    budget?: StringFilter<"BanquetRequest"> | string
    banquetType?: StringNullableFilter<"BanquetRequest"> | string | null
    specialMenu?: StringNullableFilter<"BanquetRequest"> | string | null
    music?: StringNullableFilter<"BanquetRequest"> | string | null
    decor?: StringNullableFilter<"BanquetRequest"> | string | null
    name?: StringFilter<"BanquetRequest"> | string
    phone?: StringFilter<"BanquetRequest"> | string
    email?: StringNullableFilter<"BanquetRequest"> | string | null
    additionalWishes?: StringNullableFilter<"BanquetRequest"> | string | null
    status?: EnumBanquetRequestStatusFilter<"BanquetRequest"> | $Enums.BanquetRequestStatus
    createdAt?: DateTimeFilter<"BanquetRequest"> | Date | string
    updatedAt?: DateTimeFilter<"BanquetRequest"> | Date | string
  }, "id">

  export type BanquetRequestOrderByWithAggregationInput = {
    id?: SortOrder
    eventDate?: SortOrder
    eventTime?: SortOrder
    endTime?: SortOrderInput | SortOrder
    guestCount?: SortOrder
    eventType?: SortOrder
    budget?: SortOrder
    banquetType?: SortOrderInput | SortOrder
    specialMenu?: SortOrderInput | SortOrder
    music?: SortOrderInput | SortOrder
    decor?: SortOrderInput | SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrderInput | SortOrder
    additionalWishes?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BanquetRequestCountOrderByAggregateInput
    _avg?: BanquetRequestAvgOrderByAggregateInput
    _max?: BanquetRequestMaxOrderByAggregateInput
    _min?: BanquetRequestMinOrderByAggregateInput
    _sum?: BanquetRequestSumOrderByAggregateInput
  }

  export type BanquetRequestScalarWhereWithAggregatesInput = {
    AND?: BanquetRequestScalarWhereWithAggregatesInput | BanquetRequestScalarWhereWithAggregatesInput[]
    OR?: BanquetRequestScalarWhereWithAggregatesInput[]
    NOT?: BanquetRequestScalarWhereWithAggregatesInput | BanquetRequestScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"BanquetRequest"> | number
    eventDate?: DateTimeWithAggregatesFilter<"BanquetRequest"> | Date | string
    eventTime?: StringWithAggregatesFilter<"BanquetRequest"> | string
    endTime?: StringNullableWithAggregatesFilter<"BanquetRequest"> | string | null
    guestCount?: IntWithAggregatesFilter<"BanquetRequest"> | number
    eventType?: StringWithAggregatesFilter<"BanquetRequest"> | string
    budget?: StringWithAggregatesFilter<"BanquetRequest"> | string
    banquetType?: StringNullableWithAggregatesFilter<"BanquetRequest"> | string | null
    specialMenu?: StringNullableWithAggregatesFilter<"BanquetRequest"> | string | null
    music?: StringNullableWithAggregatesFilter<"BanquetRequest"> | string | null
    decor?: StringNullableWithAggregatesFilter<"BanquetRequest"> | string | null
    name?: StringWithAggregatesFilter<"BanquetRequest"> | string
    phone?: StringWithAggregatesFilter<"BanquetRequest"> | string
    email?: StringNullableWithAggregatesFilter<"BanquetRequest"> | string | null
    additionalWishes?: StringNullableWithAggregatesFilter<"BanquetRequest"> | string | null
    status?: EnumBanquetRequestStatusWithAggregatesFilter<"BanquetRequest"> | $Enums.BanquetRequestStatus
    createdAt?: DateTimeWithAggregatesFilter<"BanquetRequest"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"BanquetRequest"> | Date | string
  }

  export type order_itemsWhereInput = {
    AND?: order_itemsWhereInput | order_itemsWhereInput[]
    OR?: order_itemsWhereInput[]
    NOT?: order_itemsWhereInput | order_itemsWhereInput[]
    id?: IntFilter<"order_items"> | number
    order_id?: IntFilter<"order_items"> | number
    user_ticket_id?: IntFilter<"order_items"> | number
    price?: DecimalFilter<"order_items"> | Decimal | DecimalJsLike | number | string
    quantity?: IntFilter<"order_items"> | number
    orders?: XOR<OrdersRelationFilter, ordersWhereInput>
    user_tickets?: XOR<User_ticketsRelationFilter, user_ticketsWhereInput>
  }

  export type order_itemsOrderByWithRelationInput = {
    id?: SortOrder
    order_id?: SortOrder
    user_ticket_id?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    orders?: ordersOrderByWithRelationInput
    user_tickets?: user_ticketsOrderByWithRelationInput
  }

  export type order_itemsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    user_ticket_id?: number
    AND?: order_itemsWhereInput | order_itemsWhereInput[]
    OR?: order_itemsWhereInput[]
    NOT?: order_itemsWhereInput | order_itemsWhereInput[]
    order_id?: IntFilter<"order_items"> | number
    price?: DecimalFilter<"order_items"> | Decimal | DecimalJsLike | number | string
    quantity?: IntFilter<"order_items"> | number
    orders?: XOR<OrdersRelationFilter, ordersWhereInput>
    user_tickets?: XOR<User_ticketsRelationFilter, user_ticketsWhereInput>
  }, "id" | "user_ticket_id">

  export type order_itemsOrderByWithAggregationInput = {
    id?: SortOrder
    order_id?: SortOrder
    user_ticket_id?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    _count?: order_itemsCountOrderByAggregateInput
    _avg?: order_itemsAvgOrderByAggregateInput
    _max?: order_itemsMaxOrderByAggregateInput
    _min?: order_itemsMinOrderByAggregateInput
    _sum?: order_itemsSumOrderByAggregateInput
  }

  export type order_itemsScalarWhereWithAggregatesInput = {
    AND?: order_itemsScalarWhereWithAggregatesInput | order_itemsScalarWhereWithAggregatesInput[]
    OR?: order_itemsScalarWhereWithAggregatesInput[]
    NOT?: order_itemsScalarWhereWithAggregatesInput | order_itemsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"order_items"> | number
    order_id?: IntWithAggregatesFilter<"order_items"> | number
    user_ticket_id?: IntWithAggregatesFilter<"order_items"> | number
    price?: DecimalWithAggregatesFilter<"order_items"> | Decimal | DecimalJsLike | number | string
    quantity?: IntWithAggregatesFilter<"order_items"> | number
  }

  export type ordersWhereInput = {
    AND?: ordersWhereInput | ordersWhereInput[]
    OR?: ordersWhereInput[]
    NOT?: ordersWhereInput | ordersWhereInput[]
    id?: IntFilter<"orders"> | number
    user_id?: IntNullableFilter<"orders"> | number | null
    first_name?: StringFilter<"orders"> | string
    last_name?: StringFilter<"orders"> | string
    email?: StringFilter<"orders"> | string
    phone?: StringFilter<"orders"> | string
    status?: EnumOrderStatusFilter<"orders"> | $Enums.OrderStatus
    total_amount?: DecimalFilter<"orders"> | Decimal | DecimalJsLike | number | string
    payment_id?: StringNullableFilter<"orders"> | string | null
    payment_method?: StringNullableFilter<"orders"> | string | null
    created_at?: DateTimeFilter<"orders"> | Date | string
    updated_at?: DateTimeFilter<"orders"> | Date | string
    order_items?: Order_itemsListRelationFilter
    users?: XOR<UsersNullableRelationFilter, usersWhereInput> | null
    user_tickets?: User_ticketsListRelationFilter
  }

  export type ordersOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrderInput | SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    status?: SortOrder
    total_amount?: SortOrder
    payment_id?: SortOrderInput | SortOrder
    payment_method?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    order_items?: order_itemsOrderByRelationAggregateInput
    users?: usersOrderByWithRelationInput
    user_tickets?: user_ticketsOrderByRelationAggregateInput
  }

  export type ordersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ordersWhereInput | ordersWhereInput[]
    OR?: ordersWhereInput[]
    NOT?: ordersWhereInput | ordersWhereInput[]
    user_id?: IntNullableFilter<"orders"> | number | null
    first_name?: StringFilter<"orders"> | string
    last_name?: StringFilter<"orders"> | string
    email?: StringFilter<"orders"> | string
    phone?: StringFilter<"orders"> | string
    status?: EnumOrderStatusFilter<"orders"> | $Enums.OrderStatus
    total_amount?: DecimalFilter<"orders"> | Decimal | DecimalJsLike | number | string
    payment_id?: StringNullableFilter<"orders"> | string | null
    payment_method?: StringNullableFilter<"orders"> | string | null
    created_at?: DateTimeFilter<"orders"> | Date | string
    updated_at?: DateTimeFilter<"orders"> | Date | string
    order_items?: Order_itemsListRelationFilter
    users?: XOR<UsersNullableRelationFilter, usersWhereInput> | null
    user_tickets?: User_ticketsListRelationFilter
  }, "id">

  export type ordersOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrderInput | SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    status?: SortOrder
    total_amount?: SortOrder
    payment_id?: SortOrderInput | SortOrder
    payment_method?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: ordersCountOrderByAggregateInput
    _avg?: ordersAvgOrderByAggregateInput
    _max?: ordersMaxOrderByAggregateInput
    _min?: ordersMinOrderByAggregateInput
    _sum?: ordersSumOrderByAggregateInput
  }

  export type ordersScalarWhereWithAggregatesInput = {
    AND?: ordersScalarWhereWithAggregatesInput | ordersScalarWhereWithAggregatesInput[]
    OR?: ordersScalarWhereWithAggregatesInput[]
    NOT?: ordersScalarWhereWithAggregatesInput | ordersScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"orders"> | number
    user_id?: IntNullableWithAggregatesFilter<"orders"> | number | null
    first_name?: StringWithAggregatesFilter<"orders"> | string
    last_name?: StringWithAggregatesFilter<"orders"> | string
    email?: StringWithAggregatesFilter<"orders"> | string
    phone?: StringWithAggregatesFilter<"orders"> | string
    status?: EnumOrderStatusWithAggregatesFilter<"orders"> | $Enums.OrderStatus
    total_amount?: DecimalWithAggregatesFilter<"orders"> | Decimal | DecimalJsLike | number | string
    payment_id?: StringNullableWithAggregatesFilter<"orders"> | string | null
    payment_method?: StringNullableWithAggregatesFilter<"orders"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"orders"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"orders"> | Date | string
  }

  export type refund_ticketsWhereInput = {
    AND?: refund_ticketsWhereInput | refund_ticketsWhereInput[]
    OR?: refund_ticketsWhereInput[]
    NOT?: refund_ticketsWhereInput | refund_ticketsWhereInput[]
    refund_id?: IntFilter<"refund_tickets"> | number
    user_ticket_id?: IntFilter<"refund_tickets"> | number
    ticket_number?: StringFilter<"refund_tickets"> | string
    refund_amount?: DecimalFilter<"refund_tickets"> | Decimal | DecimalJsLike | number | string
    refunds?: XOR<RefundsRelationFilter, refundsWhereInput>
    user_tickets?: XOR<User_ticketsRelationFilter, user_ticketsWhereInput>
  }

  export type refund_ticketsOrderByWithRelationInput = {
    refund_id?: SortOrder
    user_ticket_id?: SortOrder
    ticket_number?: SortOrder
    refund_amount?: SortOrder
    refunds?: refundsOrderByWithRelationInput
    user_tickets?: user_ticketsOrderByWithRelationInput
  }

  export type refund_ticketsWhereUniqueInput = Prisma.AtLeast<{
    refund_id_user_ticket_id?: refund_ticketsRefund_idUser_ticket_idCompoundUniqueInput
    AND?: refund_ticketsWhereInput | refund_ticketsWhereInput[]
    OR?: refund_ticketsWhereInput[]
    NOT?: refund_ticketsWhereInput | refund_ticketsWhereInput[]
    refund_id?: IntFilter<"refund_tickets"> | number
    user_ticket_id?: IntFilter<"refund_tickets"> | number
    ticket_number?: StringFilter<"refund_tickets"> | string
    refund_amount?: DecimalFilter<"refund_tickets"> | Decimal | DecimalJsLike | number | string
    refunds?: XOR<RefundsRelationFilter, refundsWhereInput>
    user_tickets?: XOR<User_ticketsRelationFilter, user_ticketsWhereInput>
  }, "refund_id_user_ticket_id">

  export type refund_ticketsOrderByWithAggregationInput = {
    refund_id?: SortOrder
    user_ticket_id?: SortOrder
    ticket_number?: SortOrder
    refund_amount?: SortOrder
    _count?: refund_ticketsCountOrderByAggregateInput
    _avg?: refund_ticketsAvgOrderByAggregateInput
    _max?: refund_ticketsMaxOrderByAggregateInput
    _min?: refund_ticketsMinOrderByAggregateInput
    _sum?: refund_ticketsSumOrderByAggregateInput
  }

  export type refund_ticketsScalarWhereWithAggregatesInput = {
    AND?: refund_ticketsScalarWhereWithAggregatesInput | refund_ticketsScalarWhereWithAggregatesInput[]
    OR?: refund_ticketsScalarWhereWithAggregatesInput[]
    NOT?: refund_ticketsScalarWhereWithAggregatesInput | refund_ticketsScalarWhereWithAggregatesInput[]
    refund_id?: IntWithAggregatesFilter<"refund_tickets"> | number
    user_ticket_id?: IntWithAggregatesFilter<"refund_tickets"> | number
    ticket_number?: StringWithAggregatesFilter<"refund_tickets"> | string
    refund_amount?: DecimalWithAggregatesFilter<"refund_tickets"> | Decimal | DecimalJsLike | number | string
  }

  export type refundsWhereInput = {
    AND?: refundsWhereInput | refundsWhereInput[]
    OR?: refundsWhereInput[]
    NOT?: refundsWhereInput | refundsWhereInput[]
    id?: IntFilter<"refunds"> | number
    user_id?: IntNullableFilter<"refunds"> | number | null
    email?: StringFilter<"refunds"> | string
    phone?: StringFilter<"refunds"> | string
    full_name?: StringFilter<"refunds"> | string
    account_number?: StringFilter<"refunds"> | string
    bank_name?: StringFilter<"refunds"> | string
    bik?: StringFilter<"refunds"> | string
    correspondent_account?: StringFilter<"refunds"> | string
    inn?: StringFilter<"refunds"> | string
    kpp?: StringNullableFilter<"refunds"> | string | null
    okpo?: StringNullableFilter<"refunds"> | string | null
    ogrn?: StringNullableFilter<"refunds"> | string | null
    refund_amount?: DecimalFilter<"refunds"> | Decimal | DecimalJsLike | number | string
    refund_reason?: StringFilter<"refunds"> | string
    created_at?: DateTimeFilter<"refunds"> | Date | string
    updated_at?: DateTimeFilter<"refunds"> | Date | string
    deleted_at?: DateTimeNullableFilter<"refunds"> | Date | string | null
    refund_tickets?: Refund_ticketsListRelationFilter
    users?: XOR<UsersNullableRelationFilter, usersWhereInput> | null
    user_tickets?: User_ticketsListRelationFilter
  }

  export type refundsOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrderInput | SortOrder
    email?: SortOrder
    phone?: SortOrder
    full_name?: SortOrder
    account_number?: SortOrder
    bank_name?: SortOrder
    bik?: SortOrder
    correspondent_account?: SortOrder
    inn?: SortOrder
    kpp?: SortOrderInput | SortOrder
    okpo?: SortOrderInput | SortOrder
    ogrn?: SortOrderInput | SortOrder
    refund_amount?: SortOrder
    refund_reason?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrderInput | SortOrder
    refund_tickets?: refund_ticketsOrderByRelationAggregateInput
    users?: usersOrderByWithRelationInput
    user_tickets?: user_ticketsOrderByRelationAggregateInput
  }

  export type refundsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: refundsWhereInput | refundsWhereInput[]
    OR?: refundsWhereInput[]
    NOT?: refundsWhereInput | refundsWhereInput[]
    user_id?: IntNullableFilter<"refunds"> | number | null
    email?: StringFilter<"refunds"> | string
    phone?: StringFilter<"refunds"> | string
    full_name?: StringFilter<"refunds"> | string
    account_number?: StringFilter<"refunds"> | string
    bank_name?: StringFilter<"refunds"> | string
    bik?: StringFilter<"refunds"> | string
    correspondent_account?: StringFilter<"refunds"> | string
    inn?: StringFilter<"refunds"> | string
    kpp?: StringNullableFilter<"refunds"> | string | null
    okpo?: StringNullableFilter<"refunds"> | string | null
    ogrn?: StringNullableFilter<"refunds"> | string | null
    refund_amount?: DecimalFilter<"refunds"> | Decimal | DecimalJsLike | number | string
    refund_reason?: StringFilter<"refunds"> | string
    created_at?: DateTimeFilter<"refunds"> | Date | string
    updated_at?: DateTimeFilter<"refunds"> | Date | string
    deleted_at?: DateTimeNullableFilter<"refunds"> | Date | string | null
    refund_tickets?: Refund_ticketsListRelationFilter
    users?: XOR<UsersNullableRelationFilter, usersWhereInput> | null
    user_tickets?: User_ticketsListRelationFilter
  }, "id">

  export type refundsOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrderInput | SortOrder
    email?: SortOrder
    phone?: SortOrder
    full_name?: SortOrder
    account_number?: SortOrder
    bank_name?: SortOrder
    bik?: SortOrder
    correspondent_account?: SortOrder
    inn?: SortOrder
    kpp?: SortOrderInput | SortOrder
    okpo?: SortOrderInput | SortOrder
    ogrn?: SortOrderInput | SortOrder
    refund_amount?: SortOrder
    refund_reason?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrderInput | SortOrder
    _count?: refundsCountOrderByAggregateInput
    _avg?: refundsAvgOrderByAggregateInput
    _max?: refundsMaxOrderByAggregateInput
    _min?: refundsMinOrderByAggregateInput
    _sum?: refundsSumOrderByAggregateInput
  }

  export type refundsScalarWhereWithAggregatesInput = {
    AND?: refundsScalarWhereWithAggregatesInput | refundsScalarWhereWithAggregatesInput[]
    OR?: refundsScalarWhereWithAggregatesInput[]
    NOT?: refundsScalarWhereWithAggregatesInput | refundsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"refunds"> | number
    user_id?: IntNullableWithAggregatesFilter<"refunds"> | number | null
    email?: StringWithAggregatesFilter<"refunds"> | string
    phone?: StringWithAggregatesFilter<"refunds"> | string
    full_name?: StringWithAggregatesFilter<"refunds"> | string
    account_number?: StringWithAggregatesFilter<"refunds"> | string
    bank_name?: StringWithAggregatesFilter<"refunds"> | string
    bik?: StringWithAggregatesFilter<"refunds"> | string
    correspondent_account?: StringWithAggregatesFilter<"refunds"> | string
    inn?: StringWithAggregatesFilter<"refunds"> | string
    kpp?: StringNullableWithAggregatesFilter<"refunds"> | string | null
    okpo?: StringNullableWithAggregatesFilter<"refunds"> | string | null
    ogrn?: StringNullableWithAggregatesFilter<"refunds"> | string | null
    refund_amount?: DecimalWithAggregatesFilter<"refunds"> | Decimal | DecimalJsLike | number | string
    refund_reason?: StringWithAggregatesFilter<"refunds"> | string
    created_at?: DateTimeWithAggregatesFilter<"refunds"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"refunds"> | Date | string
    deleted_at?: DateTimeNullableWithAggregatesFilter<"refunds"> | Date | string | null
  }

  export type ticketsWhereInput = {
    AND?: ticketsWhereInput | ticketsWhereInput[]
    OR?: ticketsWhereInput[]
    NOT?: ticketsWhereInput | ticketsWhereInput[]
    id?: IntFilter<"tickets"> | number
    title?: StringFilter<"tickets"> | string
    short_description?: StringNullableFilter<"tickets"> | string | null
    description?: StringNullableFilter<"tickets"> | string | null
    image_url?: StringNullableFilter<"tickets"> | string | null
    event_date?: DateTimeFilter<"tickets"> | Date | string
    event_location?: StringFilter<"tickets"> | string
    price?: DecimalFilter<"tickets"> | Decimal | DecimalJsLike | number | string
    is_used?: BoolFilter<"tickets"> | boolean
    qr_code?: StringNullableFilter<"tickets"> | string | null
    ticket_number?: StringFilter<"tickets"> | string
    user_id?: IntNullableFilter<"tickets"> | number | null
    created_at?: DateTimeFilter<"tickets"> | Date | string
    updated_at?: DateTimeFilter<"tickets"> | Date | string
    users?: XOR<UsersNullableRelationFilter, usersWhereInput> | null
    user_tickets?: User_ticketsListRelationFilter
  }

  export type ticketsOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    short_description?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    image_url?: SortOrderInput | SortOrder
    event_date?: SortOrder
    event_location?: SortOrder
    price?: SortOrder
    is_used?: SortOrder
    qr_code?: SortOrderInput | SortOrder
    ticket_number?: SortOrder
    user_id?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    users?: usersOrderByWithRelationInput
    user_tickets?: user_ticketsOrderByRelationAggregateInput
  }

  export type ticketsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    ticket_number?: string
    AND?: ticketsWhereInput | ticketsWhereInput[]
    OR?: ticketsWhereInput[]
    NOT?: ticketsWhereInput | ticketsWhereInput[]
    title?: StringFilter<"tickets"> | string
    short_description?: StringNullableFilter<"tickets"> | string | null
    description?: StringNullableFilter<"tickets"> | string | null
    image_url?: StringNullableFilter<"tickets"> | string | null
    event_date?: DateTimeFilter<"tickets"> | Date | string
    event_location?: StringFilter<"tickets"> | string
    price?: DecimalFilter<"tickets"> | Decimal | DecimalJsLike | number | string
    is_used?: BoolFilter<"tickets"> | boolean
    qr_code?: StringNullableFilter<"tickets"> | string | null
    user_id?: IntNullableFilter<"tickets"> | number | null
    created_at?: DateTimeFilter<"tickets"> | Date | string
    updated_at?: DateTimeFilter<"tickets"> | Date | string
    users?: XOR<UsersNullableRelationFilter, usersWhereInput> | null
    user_tickets?: User_ticketsListRelationFilter
  }, "id" | "ticket_number">

  export type ticketsOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    short_description?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    image_url?: SortOrderInput | SortOrder
    event_date?: SortOrder
    event_location?: SortOrder
    price?: SortOrder
    is_used?: SortOrder
    qr_code?: SortOrderInput | SortOrder
    ticket_number?: SortOrder
    user_id?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: ticketsCountOrderByAggregateInput
    _avg?: ticketsAvgOrderByAggregateInput
    _max?: ticketsMaxOrderByAggregateInput
    _min?: ticketsMinOrderByAggregateInput
    _sum?: ticketsSumOrderByAggregateInput
  }

  export type ticketsScalarWhereWithAggregatesInput = {
    AND?: ticketsScalarWhereWithAggregatesInput | ticketsScalarWhereWithAggregatesInput[]
    OR?: ticketsScalarWhereWithAggregatesInput[]
    NOT?: ticketsScalarWhereWithAggregatesInput | ticketsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"tickets"> | number
    title?: StringWithAggregatesFilter<"tickets"> | string
    short_description?: StringNullableWithAggregatesFilter<"tickets"> | string | null
    description?: StringNullableWithAggregatesFilter<"tickets"> | string | null
    image_url?: StringNullableWithAggregatesFilter<"tickets"> | string | null
    event_date?: DateTimeWithAggregatesFilter<"tickets"> | Date | string
    event_location?: StringWithAggregatesFilter<"tickets"> | string
    price?: DecimalWithAggregatesFilter<"tickets"> | Decimal | DecimalJsLike | number | string
    is_used?: BoolWithAggregatesFilter<"tickets"> | boolean
    qr_code?: StringNullableWithAggregatesFilter<"tickets"> | string | null
    ticket_number?: StringWithAggregatesFilter<"tickets"> | string
    user_id?: IntNullableWithAggregatesFilter<"tickets"> | number | null
    created_at?: DateTimeWithAggregatesFilter<"tickets"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"tickets"> | Date | string
  }

  export type user_ticketsWhereInput = {
    AND?: user_ticketsWhereInput | user_ticketsWhereInput[]
    OR?: user_ticketsWhereInput[]
    NOT?: user_ticketsWhereInput | user_ticketsWhereInput[]
    id?: IntFilter<"user_tickets"> | number
    user_id?: IntNullableFilter<"user_tickets"> | number | null
    ticket_id?: IntFilter<"user_tickets"> | number
    ticket_number?: StringFilter<"user_tickets"> | string
    qr_code?: StringNullableFilter<"user_tickets"> | string | null
    purchase_date?: DateTimeFilter<"user_tickets"> | Date | string
    is_used?: BoolFilter<"user_tickets"> | boolean
    used_at?: DateTimeNullableFilter<"user_tickets"> | Date | string | null
    payment_status?: EnumPaymentStatusFilter<"user_tickets"> | $Enums.PaymentStatus
    payment_id?: StringNullableFilter<"user_tickets"> | string | null
    expires_at?: DateTimeNullableFilter<"user_tickets"> | Date | string | null
    created_at?: DateTimeFilter<"user_tickets"> | Date | string
    updated_at?: DateTimeFilter<"user_tickets"> | Date | string
    email?: StringNullableFilter<"user_tickets"> | string | null
    first_name?: StringNullableFilter<"user_tickets"> | string | null
    last_name?: StringNullableFilter<"user_tickets"> | string | null
    phone?: StringNullableFilter<"user_tickets"> | string | null
    order_items?: XOR<Order_itemsNullableRelationFilter, order_itemsWhereInput> | null
    refund_tickets?: Refund_ticketsListRelationFilter
    tickets?: XOR<TicketsRelationFilter, ticketsWhereInput>
    users?: XOR<UsersNullableRelationFilter, usersWhereInput> | null
    orders?: OrdersListRelationFilter
    refunds?: RefundsListRelationFilter
  }

  export type user_ticketsOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrderInput | SortOrder
    ticket_id?: SortOrder
    ticket_number?: SortOrder
    qr_code?: SortOrderInput | SortOrder
    purchase_date?: SortOrder
    is_used?: SortOrder
    used_at?: SortOrderInput | SortOrder
    payment_status?: SortOrder
    payment_id?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    email?: SortOrderInput | SortOrder
    first_name?: SortOrderInput | SortOrder
    last_name?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    order_items?: order_itemsOrderByWithRelationInput
    refund_tickets?: refund_ticketsOrderByRelationAggregateInput
    tickets?: ticketsOrderByWithRelationInput
    users?: usersOrderByWithRelationInput
    orders?: ordersOrderByRelationAggregateInput
    refunds?: refundsOrderByRelationAggregateInput
  }

  export type user_ticketsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    ticket_number?: string
    AND?: user_ticketsWhereInput | user_ticketsWhereInput[]
    OR?: user_ticketsWhereInput[]
    NOT?: user_ticketsWhereInput | user_ticketsWhereInput[]
    user_id?: IntNullableFilter<"user_tickets"> | number | null
    ticket_id?: IntFilter<"user_tickets"> | number
    qr_code?: StringNullableFilter<"user_tickets"> | string | null
    purchase_date?: DateTimeFilter<"user_tickets"> | Date | string
    is_used?: BoolFilter<"user_tickets"> | boolean
    used_at?: DateTimeNullableFilter<"user_tickets"> | Date | string | null
    payment_status?: EnumPaymentStatusFilter<"user_tickets"> | $Enums.PaymentStatus
    payment_id?: StringNullableFilter<"user_tickets"> | string | null
    expires_at?: DateTimeNullableFilter<"user_tickets"> | Date | string | null
    created_at?: DateTimeFilter<"user_tickets"> | Date | string
    updated_at?: DateTimeFilter<"user_tickets"> | Date | string
    email?: StringNullableFilter<"user_tickets"> | string | null
    first_name?: StringNullableFilter<"user_tickets"> | string | null
    last_name?: StringNullableFilter<"user_tickets"> | string | null
    phone?: StringNullableFilter<"user_tickets"> | string | null
    order_items?: XOR<Order_itemsNullableRelationFilter, order_itemsWhereInput> | null
    refund_tickets?: Refund_ticketsListRelationFilter
    tickets?: XOR<TicketsRelationFilter, ticketsWhereInput>
    users?: XOR<UsersNullableRelationFilter, usersWhereInput> | null
    orders?: OrdersListRelationFilter
    refunds?: RefundsListRelationFilter
  }, "id" | "ticket_number">

  export type user_ticketsOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrderInput | SortOrder
    ticket_id?: SortOrder
    ticket_number?: SortOrder
    qr_code?: SortOrderInput | SortOrder
    purchase_date?: SortOrder
    is_used?: SortOrder
    used_at?: SortOrderInput | SortOrder
    payment_status?: SortOrder
    payment_id?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    email?: SortOrderInput | SortOrder
    first_name?: SortOrderInput | SortOrder
    last_name?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    _count?: user_ticketsCountOrderByAggregateInput
    _avg?: user_ticketsAvgOrderByAggregateInput
    _max?: user_ticketsMaxOrderByAggregateInput
    _min?: user_ticketsMinOrderByAggregateInput
    _sum?: user_ticketsSumOrderByAggregateInput
  }

  export type user_ticketsScalarWhereWithAggregatesInput = {
    AND?: user_ticketsScalarWhereWithAggregatesInput | user_ticketsScalarWhereWithAggregatesInput[]
    OR?: user_ticketsScalarWhereWithAggregatesInput[]
    NOT?: user_ticketsScalarWhereWithAggregatesInput | user_ticketsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"user_tickets"> | number
    user_id?: IntNullableWithAggregatesFilter<"user_tickets"> | number | null
    ticket_id?: IntWithAggregatesFilter<"user_tickets"> | number
    ticket_number?: StringWithAggregatesFilter<"user_tickets"> | string
    qr_code?: StringNullableWithAggregatesFilter<"user_tickets"> | string | null
    purchase_date?: DateTimeWithAggregatesFilter<"user_tickets"> | Date | string
    is_used?: BoolWithAggregatesFilter<"user_tickets"> | boolean
    used_at?: DateTimeNullableWithAggregatesFilter<"user_tickets"> | Date | string | null
    payment_status?: EnumPaymentStatusWithAggregatesFilter<"user_tickets"> | $Enums.PaymentStatus
    payment_id?: StringNullableWithAggregatesFilter<"user_tickets"> | string | null
    expires_at?: DateTimeNullableWithAggregatesFilter<"user_tickets"> | Date | string | null
    created_at?: DateTimeWithAggregatesFilter<"user_tickets"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"user_tickets"> | Date | string
    email?: StringNullableWithAggregatesFilter<"user_tickets"> | string | null
    first_name?: StringNullableWithAggregatesFilter<"user_tickets"> | string | null
    last_name?: StringNullableWithAggregatesFilter<"user_tickets"> | string | null
    phone?: StringNullableWithAggregatesFilter<"user_tickets"> | string | null
  }

  export type usersWhereInput = {
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    id?: IntFilter<"users"> | number
    telegram_id?: BigIntNullableFilter<"users"> | bigint | number | null
    username?: StringNullableFilter<"users"> | string | null
    first_name?: StringFilter<"users"> | string
    last_name?: StringNullableFilter<"users"> | string | null
    is_admin?: BoolFilter<"users"> | boolean
    language_code?: StringNullableFilter<"users"> | string | null
    is_bot?: BoolFilter<"users"> | boolean
    phone?: StringNullableFilter<"users"> | string | null
    email?: StringNullableFilter<"users"> | string | null
    created_at?: DateTimeFilter<"users"> | Date | string
    updated_at?: DateTimeFilter<"users"> | Date | string
    orders?: OrdersListRelationFilter
    refunds?: RefundsListRelationFilter
    tickets?: TicketsListRelationFilter
    user_tickets?: User_ticketsListRelationFilter
  }

  export type usersOrderByWithRelationInput = {
    id?: SortOrder
    telegram_id?: SortOrderInput | SortOrder
    username?: SortOrderInput | SortOrder
    first_name?: SortOrder
    last_name?: SortOrderInput | SortOrder
    is_admin?: SortOrder
    language_code?: SortOrderInput | SortOrder
    is_bot?: SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    orders?: ordersOrderByRelationAggregateInput
    refunds?: refundsOrderByRelationAggregateInput
    tickets?: ticketsOrderByRelationAggregateInput
    user_tickets?: user_ticketsOrderByRelationAggregateInput
  }

  export type usersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    telegram_id?: bigint | number
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    username?: StringNullableFilter<"users"> | string | null
    first_name?: StringFilter<"users"> | string
    last_name?: StringNullableFilter<"users"> | string | null
    is_admin?: BoolFilter<"users"> | boolean
    language_code?: StringNullableFilter<"users"> | string | null
    is_bot?: BoolFilter<"users"> | boolean
    phone?: StringNullableFilter<"users"> | string | null
    email?: StringNullableFilter<"users"> | string | null
    created_at?: DateTimeFilter<"users"> | Date | string
    updated_at?: DateTimeFilter<"users"> | Date | string
    orders?: OrdersListRelationFilter
    refunds?: RefundsListRelationFilter
    tickets?: TicketsListRelationFilter
    user_tickets?: User_ticketsListRelationFilter
  }, "id" | "telegram_id">

  export type usersOrderByWithAggregationInput = {
    id?: SortOrder
    telegram_id?: SortOrderInput | SortOrder
    username?: SortOrderInput | SortOrder
    first_name?: SortOrder
    last_name?: SortOrderInput | SortOrder
    is_admin?: SortOrder
    language_code?: SortOrderInput | SortOrder
    is_bot?: SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    OR?: usersScalarWhereWithAggregatesInput[]
    NOT?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"users"> | number
    telegram_id?: BigIntNullableWithAggregatesFilter<"users"> | bigint | number | null
    username?: StringNullableWithAggregatesFilter<"users"> | string | null
    first_name?: StringWithAggregatesFilter<"users"> | string
    last_name?: StringNullableWithAggregatesFilter<"users"> | string | null
    is_admin?: BoolWithAggregatesFilter<"users"> | boolean
    language_code?: StringNullableWithAggregatesFilter<"users"> | string | null
    is_bot?: BoolWithAggregatesFilter<"users"> | boolean
    phone?: StringNullableWithAggregatesFilter<"users"> | string | null
    email?: StringNullableWithAggregatesFilter<"users"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"users"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"users"> | Date | string
  }

  export type HallCreateInput = {
    name: string
    description?: string | null
    type?: $Enums.HallType
    imageUrl?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    zones?: ZoneCreateNestedManyWithoutHallInput
  }

  export type HallUncheckedCreateInput = {
    id?: number
    name: string
    description?: string | null
    type?: $Enums.HallType
    imageUrl?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    zones?: ZoneUncheckedCreateNestedManyWithoutHallInput
  }

  export type HallUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumHallTypeFieldUpdateOperationsInput | $Enums.HallType
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    zones?: ZoneUpdateManyWithoutHallNestedInput
  }

  export type HallUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumHallTypeFieldUpdateOperationsInput | $Enums.HallType
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    zones?: ZoneUncheckedUpdateManyWithoutHallNestedInput
  }

  export type HallCreateManyInput = {
    id?: number
    name: string
    description?: string | null
    type?: $Enums.HallType
    imageUrl?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HallUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumHallTypeFieldUpdateOperationsInput | $Enums.HallType
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HallUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumHallTypeFieldUpdateOperationsInput | $Enums.HallType
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ZoneCreateInput = {
    name: string
    type?: $Enums.ZoneType
    openTime: string
    closeTime: string
    imageUrl?: string | null
    description?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    hall?: HallCreateNestedOneWithoutZonesInput
    items?: ZoneItemCreateNestedManyWithoutZoneInput
  }

  export type ZoneUncheckedCreateInput = {
    id?: number
    name: string
    type?: $Enums.ZoneType
    hallId?: number
    openTime: string
    closeTime: string
    imageUrl?: string | null
    description?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ZoneItemUncheckedCreateNestedManyWithoutZoneInput
  }

  export type ZoneUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumZoneTypeFieldUpdateOperationsInput | $Enums.ZoneType
    openTime?: StringFieldUpdateOperationsInput | string
    closeTime?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hall?: HallUpdateOneRequiredWithoutZonesNestedInput
    items?: ZoneItemUpdateManyWithoutZoneNestedInput
  }

  export type ZoneUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumZoneTypeFieldUpdateOperationsInput | $Enums.ZoneType
    hallId?: IntFieldUpdateOperationsInput | number
    openTime?: StringFieldUpdateOperationsInput | string
    closeTime?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ZoneItemUncheckedUpdateManyWithoutZoneNestedInput
  }

  export type ZoneCreateManyInput = {
    id?: number
    name: string
    type?: $Enums.ZoneType
    hallId?: number
    openTime: string
    closeTime: string
    imageUrl?: string | null
    description?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ZoneUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumZoneTypeFieldUpdateOperationsInput | $Enums.ZoneType
    openTime?: StringFieldUpdateOperationsInput | string
    closeTime?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ZoneUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumZoneTypeFieldUpdateOperationsInput | $Enums.ZoneType
    hallId?: IntFieldUpdateOperationsInput | number
    openTime?: StringFieldUpdateOperationsInput | string
    closeTime?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ZoneItemCreateInput = {
    floor?: number
    label: string
    type?: $Enums.ZoneItemType
    isBooking?: boolean
    isActive?: boolean
    x: number
    y: number
    width: number
    height: number
    seats?: number | null
    capacity?: number | null
    pricePerHour?: Decimal | DecimalJsLike | number | string | null
    pricePerSeat?: Decimal | DecimalJsLike | number | string | null
    pricePerSlot?: Decimal | DecimalJsLike | number | string | null
    minDuration?: number | null
    maxDuration?: number | null
    timeSlots?: ZoneItemCreatetimeSlotsInput | string[]
    description?: string | null
    features?: ZoneItemCreatefeaturesInput | string[]
    reservations?: ReservationCreateNestedManyWithoutZoneItemInput
    zone: ZoneCreateNestedOneWithoutItemsInput
  }

  export type ZoneItemUncheckedCreateInput = {
    id?: number
    zoneId: number
    floor?: number
    label: string
    type?: $Enums.ZoneItemType
    isBooking?: boolean
    isActive?: boolean
    x: number
    y: number
    width: number
    height: number
    seats?: number | null
    capacity?: number | null
    pricePerHour?: Decimal | DecimalJsLike | number | string | null
    pricePerSeat?: Decimal | DecimalJsLike | number | string | null
    pricePerSlot?: Decimal | DecimalJsLike | number | string | null
    minDuration?: number | null
    maxDuration?: number | null
    timeSlots?: ZoneItemCreatetimeSlotsInput | string[]
    description?: string | null
    features?: ZoneItemCreatefeaturesInput | string[]
    reservations?: ReservationUncheckedCreateNestedManyWithoutZoneItemInput
  }

  export type ZoneItemUpdateInput = {
    floor?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    type?: EnumZoneItemTypeFieldUpdateOperationsInput | $Enums.ZoneItemType
    isBooking?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    seats?: NullableIntFieldUpdateOperationsInput | number | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    pricePerHour?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerSeat?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerSlot?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    minDuration?: NullableIntFieldUpdateOperationsInput | number | null
    maxDuration?: NullableIntFieldUpdateOperationsInput | number | null
    timeSlots?: ZoneItemUpdatetimeSlotsInput | string[]
    description?: NullableStringFieldUpdateOperationsInput | string | null
    features?: ZoneItemUpdatefeaturesInput | string[]
    reservations?: ReservationUpdateManyWithoutZoneItemNestedInput
    zone?: ZoneUpdateOneRequiredWithoutItemsNestedInput
  }

  export type ZoneItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    zoneId?: IntFieldUpdateOperationsInput | number
    floor?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    type?: EnumZoneItemTypeFieldUpdateOperationsInput | $Enums.ZoneItemType
    isBooking?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    seats?: NullableIntFieldUpdateOperationsInput | number | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    pricePerHour?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerSeat?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerSlot?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    minDuration?: NullableIntFieldUpdateOperationsInput | number | null
    maxDuration?: NullableIntFieldUpdateOperationsInput | number | null
    timeSlots?: ZoneItemUpdatetimeSlotsInput | string[]
    description?: NullableStringFieldUpdateOperationsInput | string | null
    features?: ZoneItemUpdatefeaturesInput | string[]
    reservations?: ReservationUncheckedUpdateManyWithoutZoneItemNestedInput
  }

  export type ZoneItemCreateManyInput = {
    id?: number
    zoneId: number
    floor?: number
    label: string
    type?: $Enums.ZoneItemType
    isBooking?: boolean
    isActive?: boolean
    x: number
    y: number
    width: number
    height: number
    seats?: number | null
    capacity?: number | null
    pricePerHour?: Decimal | DecimalJsLike | number | string | null
    pricePerSeat?: Decimal | DecimalJsLike | number | string | null
    pricePerSlot?: Decimal | DecimalJsLike | number | string | null
    minDuration?: number | null
    maxDuration?: number | null
    timeSlots?: ZoneItemCreatetimeSlotsInput | string[]
    description?: string | null
    features?: ZoneItemCreatefeaturesInput | string[]
  }

  export type ZoneItemUpdateManyMutationInput = {
    floor?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    type?: EnumZoneItemTypeFieldUpdateOperationsInput | $Enums.ZoneItemType
    isBooking?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    seats?: NullableIntFieldUpdateOperationsInput | number | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    pricePerHour?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerSeat?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerSlot?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    minDuration?: NullableIntFieldUpdateOperationsInput | number | null
    maxDuration?: NullableIntFieldUpdateOperationsInput | number | null
    timeSlots?: ZoneItemUpdatetimeSlotsInput | string[]
    description?: NullableStringFieldUpdateOperationsInput | string | null
    features?: ZoneItemUpdatefeaturesInput | string[]
  }

  export type ZoneItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    zoneId?: IntFieldUpdateOperationsInput | number
    floor?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    type?: EnumZoneItemTypeFieldUpdateOperationsInput | $Enums.ZoneItemType
    isBooking?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    seats?: NullableIntFieldUpdateOperationsInput | number | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    pricePerHour?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerSeat?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerSlot?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    minDuration?: NullableIntFieldUpdateOperationsInput | number | null
    maxDuration?: NullableIntFieldUpdateOperationsInput | number | null
    timeSlots?: ZoneItemUpdatetimeSlotsInput | string[]
    description?: NullableStringFieldUpdateOperationsInput | string | null
    features?: ZoneItemUpdatefeaturesInput | string[]
  }

  export type ReservationCreateInput = {
    type?: $Enums.ReservationType
    userName: string
    phone: string
    startsAt: Date | string
    endsAt: Date | string
    deposit: Decimal | DecimalJsLike | number | string
    status?: $Enums.ReservationStatus
    seatsCount?: number | null
    guestsCount?: number | null
    duration?: number | null
    comment?: string | null
    specialRequests?: string | null
    totalPrice?: Decimal | DecimalJsLike | number | string | null
    payments?: PaymentCreateNestedManyWithoutReservationInput
    zoneItem: ZoneItemCreateNestedOneWithoutReservationsInput
  }

  export type ReservationUncheckedCreateInput = {
    id?: number
    zoneItemId: number
    type?: $Enums.ReservationType
    userName: string
    phone: string
    startsAt: Date | string
    endsAt: Date | string
    deposit: Decimal | DecimalJsLike | number | string
    status?: $Enums.ReservationStatus
    seatsCount?: number | null
    guestsCount?: number | null
    duration?: number | null
    comment?: string | null
    specialRequests?: string | null
    totalPrice?: Decimal | DecimalJsLike | number | string | null
    payments?: PaymentUncheckedCreateNestedManyWithoutReservationInput
  }

  export type ReservationUpdateInput = {
    type?: EnumReservationTypeFieldUpdateOperationsInput | $Enums.ReservationType
    userName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    startsAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endsAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deposit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumReservationStatusFieldUpdateOperationsInput | $Enums.ReservationStatus
    seatsCount?: NullableIntFieldUpdateOperationsInput | number | null
    guestsCount?: NullableIntFieldUpdateOperationsInput | number | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    specialRequests?: NullableStringFieldUpdateOperationsInput | string | null
    totalPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    payments?: PaymentUpdateManyWithoutReservationNestedInput
    zoneItem?: ZoneItemUpdateOneRequiredWithoutReservationsNestedInput
  }

  export type ReservationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    zoneItemId?: IntFieldUpdateOperationsInput | number
    type?: EnumReservationTypeFieldUpdateOperationsInput | $Enums.ReservationType
    userName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    startsAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endsAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deposit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumReservationStatusFieldUpdateOperationsInput | $Enums.ReservationStatus
    seatsCount?: NullableIntFieldUpdateOperationsInput | number | null
    guestsCount?: NullableIntFieldUpdateOperationsInput | number | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    specialRequests?: NullableStringFieldUpdateOperationsInput | string | null
    totalPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    payments?: PaymentUncheckedUpdateManyWithoutReservationNestedInput
  }

  export type ReservationCreateManyInput = {
    id?: number
    zoneItemId: number
    type?: $Enums.ReservationType
    userName: string
    phone: string
    startsAt: Date | string
    endsAt: Date | string
    deposit: Decimal | DecimalJsLike | number | string
    status?: $Enums.ReservationStatus
    seatsCount?: number | null
    guestsCount?: number | null
    duration?: number | null
    comment?: string | null
    specialRequests?: string | null
    totalPrice?: Decimal | DecimalJsLike | number | string | null
  }

  export type ReservationUpdateManyMutationInput = {
    type?: EnumReservationTypeFieldUpdateOperationsInput | $Enums.ReservationType
    userName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    startsAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endsAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deposit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumReservationStatusFieldUpdateOperationsInput | $Enums.ReservationStatus
    seatsCount?: NullableIntFieldUpdateOperationsInput | number | null
    guestsCount?: NullableIntFieldUpdateOperationsInput | number | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    specialRequests?: NullableStringFieldUpdateOperationsInput | string | null
    totalPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type ReservationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    zoneItemId?: IntFieldUpdateOperationsInput | number
    type?: EnumReservationTypeFieldUpdateOperationsInput | $Enums.ReservationType
    userName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    startsAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endsAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deposit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumReservationStatusFieldUpdateOperationsInput | $Enums.ReservationStatus
    seatsCount?: NullableIntFieldUpdateOperationsInput | number | null
    guestsCount?: NullableIntFieldUpdateOperationsInput | number | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    specialRequests?: NullableStringFieldUpdateOperationsInput | string | null
    totalPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type PaymentCreateInput = {
    amount: Decimal | DecimalJsLike | number | string
    payDate?: Date | string
    refunded?: boolean
    reservation: ReservationCreateNestedOneWithoutPaymentsInput
  }

  export type PaymentUncheckedCreateInput = {
    id?: number
    reservationId: number
    amount: Decimal | DecimalJsLike | number | string
    payDate?: Date | string
    refunded?: boolean
  }

  export type PaymentUpdateInput = {
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    payDate?: DateTimeFieldUpdateOperationsInput | Date | string
    refunded?: BoolFieldUpdateOperationsInput | boolean
    reservation?: ReservationUpdateOneRequiredWithoutPaymentsNestedInput
  }

  export type PaymentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    reservationId?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    payDate?: DateTimeFieldUpdateOperationsInput | Date | string
    refunded?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PaymentCreateManyInput = {
    id?: number
    reservationId: number
    amount: Decimal | DecimalJsLike | number | string
    payDate?: Date | string
    refunded?: boolean
  }

  export type PaymentUpdateManyMutationInput = {
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    payDate?: DateTimeFieldUpdateOperationsInput | Date | string
    refunded?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PaymentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    reservationId?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    payDate?: DateTimeFieldUpdateOperationsInput | Date | string
    refunded?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MenuTypeCreateInput = {
    name: string
    slug: string
    description?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    categories?: MenuCategoryCreateNestedManyWithoutMenuTypeInput
  }

  export type MenuTypeUncheckedCreateInput = {
    id?: number
    name: string
    slug: string
    description?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    categories?: MenuCategoryUncheckedCreateNestedManyWithoutMenuTypeInput
  }

  export type MenuTypeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: MenuCategoryUpdateManyWithoutMenuTypeNestedInput
  }

  export type MenuTypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: MenuCategoryUncheckedUpdateManyWithoutMenuTypeNestedInput
  }

  export type MenuTypeCreateManyInput = {
    id?: number
    name: string
    slug: string
    description?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MenuTypeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MenuTypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MenuCategoryCreateInput = {
    name: string
    slug: string
    description?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    menuType: MenuTypeCreateNestedOneWithoutCategoriesInput
    items?: MenuItemCreateNestedManyWithoutCategoryInput
  }

  export type MenuCategoryUncheckedCreateInput = {
    id?: number
    menuTypeId: number
    name: string
    slug: string
    description?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: MenuItemUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type MenuCategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    menuType?: MenuTypeUpdateOneRequiredWithoutCategoriesNestedInput
    items?: MenuItemUpdateManyWithoutCategoryNestedInput
  }

  export type MenuCategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    menuTypeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: MenuItemUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type MenuCategoryCreateManyInput = {
    id?: number
    menuTypeId: number
    name: string
    slug: string
    description?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MenuCategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MenuCategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    menuTypeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MenuItemCreateInput = {
    name: string
    description?: string | null
    price: Decimal | DecimalJsLike | number | string
    imageUrl?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    category: MenuCategoryCreateNestedOneWithoutItemsInput
  }

  export type MenuItemUncheckedCreateInput = {
    id?: number
    categoryId: number
    name: string
    description?: string | null
    price: Decimal | DecimalJsLike | number | string
    imageUrl?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MenuItemUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: MenuCategoryUpdateOneRequiredWithoutItemsNestedInput
  }

  export type MenuItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MenuItemCreateManyInput = {
    id?: number
    categoryId: number
    name: string
    description?: string | null
    price: Decimal | DecimalJsLike | number | string
    imageUrl?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MenuItemUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MenuItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HookahCreateInput = {
    name: string
    description?: string | null
    price: Decimal | DecimalJsLike | number | string
    features?: HookahCreatefeaturesInput | string[]
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HookahUncheckedCreateInput = {
    id?: number
    name: string
    description?: string | null
    price: Decimal | DecimalJsLike | number | string
    features?: HookahCreatefeaturesInput | string[]
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HookahUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    features?: HookahUpdatefeaturesInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HookahUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    features?: HookahUpdatefeaturesInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HookahCreateManyInput = {
    id?: number
    name: string
    description?: string | null
    price: Decimal | DecimalJsLike | number | string
    features?: HookahCreatefeaturesInput | string[]
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HookahUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    features?: HookahUpdatefeaturesInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HookahUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    features?: HookahUpdatefeaturesInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BoardGameCreateInput = {
    name: string
    description?: string | null
    price: Decimal | DecimalJsLike | number | string
    duration?: string | null
    players?: string | null
    difficulty?: string | null
    category?: string | null
    imageUrl?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BoardGameUncheckedCreateInput = {
    id?: number
    name: string
    description?: string | null
    price: Decimal | DecimalJsLike | number | string
    duration?: string | null
    players?: string | null
    difficulty?: string | null
    category?: string | null
    imageUrl?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BoardGameUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    players?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BoardGameUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    players?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BoardGameCreateManyInput = {
    id?: number
    name: string
    description?: string | null
    price: Decimal | DecimalJsLike | number | string
    duration?: string | null
    players?: string | null
    difficulty?: string | null
    category?: string | null
    imageUrl?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BoardGameUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    players?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BoardGameUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    players?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BilliardsServiceCreateInput = {
    name: string
    type: string
    price: Decimal | DecimalJsLike | number | string
    description?: string | null
    imageUrl?: string | null
    isActive?: boolean | null
    sortOrder?: number | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type BilliardsServiceUncheckedCreateInput = {
    id?: number
    name: string
    type: string
    price: Decimal | DecimalJsLike | number | string
    description?: string | null
    imageUrl?: string | null
    isActive?: boolean | null
    sortOrder?: number | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type BilliardsServiceUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sortOrder?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BilliardsServiceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sortOrder?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BilliardsServiceCreateManyInput = {
    id?: number
    name: string
    type: string
    price: Decimal | DecimalJsLike | number | string
    description?: string | null
    imageUrl?: string | null
    isActive?: boolean | null
    sortOrder?: number | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type BilliardsServiceUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sortOrder?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BilliardsServiceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sortOrder?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BilliardsSettingsCreateInput = {
    bookingFee?: Decimal | DecimalJsLike | number | string | null
    bookingTimeoutMinutes?: number | null
    minBookingDuration?: number | null
    maxBookingDuration?: number | null
    isActive?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type BilliardsSettingsUncheckedCreateInput = {
    id?: number
    bookingFee?: Decimal | DecimalJsLike | number | string | null
    bookingTimeoutMinutes?: number | null
    minBookingDuration?: number | null
    maxBookingDuration?: number | null
    isActive?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type BilliardsSettingsUpdateInput = {
    bookingFee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    bookingTimeoutMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    minBookingDuration?: NullableIntFieldUpdateOperationsInput | number | null
    maxBookingDuration?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BilliardsSettingsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookingFee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    bookingTimeoutMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    minBookingDuration?: NullableIntFieldUpdateOperationsInput | number | null
    maxBookingDuration?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BilliardsSettingsCreateManyInput = {
    id?: number
    bookingFee?: Decimal | DecimalJsLike | number | string | null
    bookingTimeoutMinutes?: number | null
    minBookingDuration?: number | null
    maxBookingDuration?: number | null
    isActive?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type BilliardsSettingsUpdateManyMutationInput = {
    bookingFee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    bookingTimeoutMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    minBookingDuration?: NullableIntFieldUpdateOperationsInput | number | null
    maxBookingDuration?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BilliardsSettingsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookingFee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    bookingTimeoutMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    minBookingDuration?: NullableIntFieldUpdateOperationsInput | number | null
    maxBookingDuration?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type KaraokeServiceCreateInput = {
    name: string
    type: string
    price: Decimal | DecimalJsLike | number | string
    description?: string | null
    imageUrl?: string | null
    isActive?: boolean | null
    sortOrder?: number | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type KaraokeServiceUncheckedCreateInput = {
    id?: number
    name: string
    type: string
    price: Decimal | DecimalJsLike | number | string
    description?: string | null
    imageUrl?: string | null
    isActive?: boolean | null
    sortOrder?: number | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type KaraokeServiceUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sortOrder?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type KaraokeServiceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sortOrder?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type KaraokeServiceCreateManyInput = {
    id?: number
    name: string
    type: string
    price: Decimal | DecimalJsLike | number | string
    description?: string | null
    imageUrl?: string | null
    isActive?: boolean | null
    sortOrder?: number | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type KaraokeServiceUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sortOrder?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type KaraokeServiceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sortOrder?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type KaraokeSettingsCreateInput = {
    maxVipGuests?: number | null
    baseVipPrice?: Decimal | DecimalJsLike | number | string | null
    additionalGuestPrice?: Decimal | DecimalJsLike | number | string | null
    depositPolicy?: string | null
    isActive?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type KaraokeSettingsUncheckedCreateInput = {
    id?: number
    maxVipGuests?: number | null
    baseVipPrice?: Decimal | DecimalJsLike | number | string | null
    additionalGuestPrice?: Decimal | DecimalJsLike | number | string | null
    depositPolicy?: string | null
    isActive?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type KaraokeSettingsUpdateInput = {
    maxVipGuests?: NullableIntFieldUpdateOperationsInput | number | null
    baseVipPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    additionalGuestPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    depositPolicy?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type KaraokeSettingsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    maxVipGuests?: NullableIntFieldUpdateOperationsInput | number | null
    baseVipPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    additionalGuestPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    depositPolicy?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type KaraokeSettingsCreateManyInput = {
    id?: number
    maxVipGuests?: number | null
    baseVipPrice?: Decimal | DecimalJsLike | number | string | null
    additionalGuestPrice?: Decimal | DecimalJsLike | number | string | null
    depositPolicy?: string | null
    isActive?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type KaraokeSettingsUpdateManyMutationInput = {
    maxVipGuests?: NullableIntFieldUpdateOperationsInput | number | null
    baseVipPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    additionalGuestPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    depositPolicy?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type KaraokeSettingsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    maxVipGuests?: NullableIntFieldUpdateOperationsInput | number | null
    baseVipPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    additionalGuestPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    depositPolicy?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BanquetRequestCreateInput = {
    eventDate: Date | string
    eventTime: string
    endTime?: string | null
    guestCount: number
    eventType: string
    budget: string
    banquetType?: string | null
    specialMenu?: string | null
    music?: string | null
    decor?: string | null
    name: string
    phone: string
    email?: string | null
    additionalWishes?: string | null
    status?: $Enums.BanquetRequestStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BanquetRequestUncheckedCreateInput = {
    id?: number
    eventDate: Date | string
    eventTime: string
    endTime?: string | null
    guestCount: number
    eventType: string
    budget: string
    banquetType?: string | null
    specialMenu?: string | null
    music?: string | null
    decor?: string | null
    name: string
    phone: string
    email?: string | null
    additionalWishes?: string | null
    status?: $Enums.BanquetRequestStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BanquetRequestUpdateInput = {
    eventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    eventTime?: StringFieldUpdateOperationsInput | string
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    guestCount?: IntFieldUpdateOperationsInput | number
    eventType?: StringFieldUpdateOperationsInput | string
    budget?: StringFieldUpdateOperationsInput | string
    banquetType?: NullableStringFieldUpdateOperationsInput | string | null
    specialMenu?: NullableStringFieldUpdateOperationsInput | string | null
    music?: NullableStringFieldUpdateOperationsInput | string | null
    decor?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    additionalWishes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBanquetRequestStatusFieldUpdateOperationsInput | $Enums.BanquetRequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BanquetRequestUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    eventTime?: StringFieldUpdateOperationsInput | string
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    guestCount?: IntFieldUpdateOperationsInput | number
    eventType?: StringFieldUpdateOperationsInput | string
    budget?: StringFieldUpdateOperationsInput | string
    banquetType?: NullableStringFieldUpdateOperationsInput | string | null
    specialMenu?: NullableStringFieldUpdateOperationsInput | string | null
    music?: NullableStringFieldUpdateOperationsInput | string | null
    decor?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    additionalWishes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBanquetRequestStatusFieldUpdateOperationsInput | $Enums.BanquetRequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BanquetRequestCreateManyInput = {
    id?: number
    eventDate: Date | string
    eventTime: string
    endTime?: string | null
    guestCount: number
    eventType: string
    budget: string
    banquetType?: string | null
    specialMenu?: string | null
    music?: string | null
    decor?: string | null
    name: string
    phone: string
    email?: string | null
    additionalWishes?: string | null
    status?: $Enums.BanquetRequestStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BanquetRequestUpdateManyMutationInput = {
    eventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    eventTime?: StringFieldUpdateOperationsInput | string
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    guestCount?: IntFieldUpdateOperationsInput | number
    eventType?: StringFieldUpdateOperationsInput | string
    budget?: StringFieldUpdateOperationsInput | string
    banquetType?: NullableStringFieldUpdateOperationsInput | string | null
    specialMenu?: NullableStringFieldUpdateOperationsInput | string | null
    music?: NullableStringFieldUpdateOperationsInput | string | null
    decor?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    additionalWishes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBanquetRequestStatusFieldUpdateOperationsInput | $Enums.BanquetRequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BanquetRequestUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    eventTime?: StringFieldUpdateOperationsInput | string
    endTime?: NullableStringFieldUpdateOperationsInput | string | null
    guestCount?: IntFieldUpdateOperationsInput | number
    eventType?: StringFieldUpdateOperationsInput | string
    budget?: StringFieldUpdateOperationsInput | string
    banquetType?: NullableStringFieldUpdateOperationsInput | string | null
    specialMenu?: NullableStringFieldUpdateOperationsInput | string | null
    music?: NullableStringFieldUpdateOperationsInput | string | null
    decor?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    additionalWishes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBanquetRequestStatusFieldUpdateOperationsInput | $Enums.BanquetRequestStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type order_itemsCreateInput = {
    price: Decimal | DecimalJsLike | number | string
    quantity?: number
    orders: ordersCreateNestedOneWithoutOrder_itemsInput
    user_tickets: user_ticketsCreateNestedOneWithoutOrder_itemsInput
  }

  export type order_itemsUncheckedCreateInput = {
    id?: number
    order_id: number
    user_ticket_id: number
    price: Decimal | DecimalJsLike | number | string
    quantity?: number
  }

  export type order_itemsUpdateInput = {
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantity?: IntFieldUpdateOperationsInput | number
    orders?: ordersUpdateOneRequiredWithoutOrder_itemsNestedInput
    user_tickets?: user_ticketsUpdateOneRequiredWithoutOrder_itemsNestedInput
  }

  export type order_itemsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    order_id?: IntFieldUpdateOperationsInput | number
    user_ticket_id?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type order_itemsCreateManyInput = {
    id?: number
    order_id: number
    user_ticket_id: number
    price: Decimal | DecimalJsLike | number | string
    quantity?: number
  }

  export type order_itemsUpdateManyMutationInput = {
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type order_itemsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    order_id?: IntFieldUpdateOperationsInput | number
    user_ticket_id?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type ordersCreateInput = {
    first_name: string
    last_name: string
    email: string
    phone: string
    status?: $Enums.OrderStatus
    total_amount: Decimal | DecimalJsLike | number | string
    payment_id?: string | null
    payment_method?: string | null
    created_at?: Date | string
    updated_at: Date | string
    order_items?: order_itemsCreateNestedManyWithoutOrdersInput
    users?: usersCreateNestedOneWithoutOrdersInput
    user_tickets?: user_ticketsCreateNestedManyWithoutOrdersInput
  }

  export type ordersUncheckedCreateInput = {
    id?: number
    user_id?: number | null
    first_name: string
    last_name: string
    email: string
    phone: string
    status?: $Enums.OrderStatus
    total_amount: Decimal | DecimalJsLike | number | string
    payment_id?: string | null
    payment_method?: string | null
    created_at?: Date | string
    updated_at: Date | string
    order_items?: order_itemsUncheckedCreateNestedManyWithoutOrdersInput
    user_tickets?: user_ticketsUncheckedCreateNestedManyWithoutOrdersInput
  }

  export type ordersUpdateInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    total_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    payment_id?: NullableStringFieldUpdateOperationsInput | string | null
    payment_method?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    order_items?: order_itemsUpdateManyWithoutOrdersNestedInput
    users?: usersUpdateOneWithoutOrdersNestedInput
    user_tickets?: user_ticketsUpdateManyWithoutOrdersNestedInput
  }

  export type ordersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    total_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    payment_id?: NullableStringFieldUpdateOperationsInput | string | null
    payment_method?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    order_items?: order_itemsUncheckedUpdateManyWithoutOrdersNestedInput
    user_tickets?: user_ticketsUncheckedUpdateManyWithoutOrdersNestedInput
  }

  export type ordersCreateManyInput = {
    id?: number
    user_id?: number | null
    first_name: string
    last_name: string
    email: string
    phone: string
    status?: $Enums.OrderStatus
    total_amount: Decimal | DecimalJsLike | number | string
    payment_id?: string | null
    payment_method?: string | null
    created_at?: Date | string
    updated_at: Date | string
  }

  export type ordersUpdateManyMutationInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    total_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    payment_id?: NullableStringFieldUpdateOperationsInput | string | null
    payment_method?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ordersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    total_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    payment_id?: NullableStringFieldUpdateOperationsInput | string | null
    payment_method?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type refund_ticketsCreateInput = {
    ticket_number: string
    refund_amount: Decimal | DecimalJsLike | number | string
    refunds: refundsCreateNestedOneWithoutRefund_ticketsInput
    user_tickets: user_ticketsCreateNestedOneWithoutRefund_ticketsInput
  }

  export type refund_ticketsUncheckedCreateInput = {
    refund_id: number
    user_ticket_id: number
    ticket_number: string
    refund_amount: Decimal | DecimalJsLike | number | string
  }

  export type refund_ticketsUpdateInput = {
    ticket_number?: StringFieldUpdateOperationsInput | string
    refund_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    refunds?: refundsUpdateOneRequiredWithoutRefund_ticketsNestedInput
    user_tickets?: user_ticketsUpdateOneRequiredWithoutRefund_ticketsNestedInput
  }

  export type refund_ticketsUncheckedUpdateInput = {
    refund_id?: IntFieldUpdateOperationsInput | number
    user_ticket_id?: IntFieldUpdateOperationsInput | number
    ticket_number?: StringFieldUpdateOperationsInput | string
    refund_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type refund_ticketsCreateManyInput = {
    refund_id: number
    user_ticket_id: number
    ticket_number: string
    refund_amount: Decimal | DecimalJsLike | number | string
  }

  export type refund_ticketsUpdateManyMutationInput = {
    ticket_number?: StringFieldUpdateOperationsInput | string
    refund_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type refund_ticketsUncheckedUpdateManyInput = {
    refund_id?: IntFieldUpdateOperationsInput | number
    user_ticket_id?: IntFieldUpdateOperationsInput | number
    ticket_number?: StringFieldUpdateOperationsInput | string
    refund_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type refundsCreateInput = {
    email: string
    phone: string
    full_name: string
    account_number: string
    bank_name: string
    bik: string
    correspondent_account: string
    inn: string
    kpp?: string | null
    okpo?: string | null
    ogrn?: string | null
    refund_amount: Decimal | DecimalJsLike | number | string
    refund_reason: string
    created_at?: Date | string
    updated_at: Date | string
    deleted_at?: Date | string | null
    refund_tickets?: refund_ticketsCreateNestedManyWithoutRefundsInput
    users?: usersCreateNestedOneWithoutRefundsInput
    user_tickets?: user_ticketsCreateNestedManyWithoutRefundsInput
  }

  export type refundsUncheckedCreateInput = {
    id?: number
    user_id?: number | null
    email: string
    phone: string
    full_name: string
    account_number: string
    bank_name: string
    bik: string
    correspondent_account: string
    inn: string
    kpp?: string | null
    okpo?: string | null
    ogrn?: string | null
    refund_amount: Decimal | DecimalJsLike | number | string
    refund_reason: string
    created_at?: Date | string
    updated_at: Date | string
    deleted_at?: Date | string | null
    refund_tickets?: refund_ticketsUncheckedCreateNestedManyWithoutRefundsInput
    user_tickets?: user_ticketsUncheckedCreateNestedManyWithoutRefundsInput
  }

  export type refundsUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    account_number?: StringFieldUpdateOperationsInput | string
    bank_name?: StringFieldUpdateOperationsInput | string
    bik?: StringFieldUpdateOperationsInput | string
    correspondent_account?: StringFieldUpdateOperationsInput | string
    inn?: StringFieldUpdateOperationsInput | string
    kpp?: NullableStringFieldUpdateOperationsInput | string | null
    okpo?: NullableStringFieldUpdateOperationsInput | string | null
    ogrn?: NullableStringFieldUpdateOperationsInput | string | null
    refund_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    refund_reason?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refund_tickets?: refund_ticketsUpdateManyWithoutRefundsNestedInput
    users?: usersUpdateOneWithoutRefundsNestedInput
    user_tickets?: user_ticketsUpdateManyWithoutRefundsNestedInput
  }

  export type refundsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    account_number?: StringFieldUpdateOperationsInput | string
    bank_name?: StringFieldUpdateOperationsInput | string
    bik?: StringFieldUpdateOperationsInput | string
    correspondent_account?: StringFieldUpdateOperationsInput | string
    inn?: StringFieldUpdateOperationsInput | string
    kpp?: NullableStringFieldUpdateOperationsInput | string | null
    okpo?: NullableStringFieldUpdateOperationsInput | string | null
    ogrn?: NullableStringFieldUpdateOperationsInput | string | null
    refund_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    refund_reason?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refund_tickets?: refund_ticketsUncheckedUpdateManyWithoutRefundsNestedInput
    user_tickets?: user_ticketsUncheckedUpdateManyWithoutRefundsNestedInput
  }

  export type refundsCreateManyInput = {
    id?: number
    user_id?: number | null
    email: string
    phone: string
    full_name: string
    account_number: string
    bank_name: string
    bik: string
    correspondent_account: string
    inn: string
    kpp?: string | null
    okpo?: string | null
    ogrn?: string | null
    refund_amount: Decimal | DecimalJsLike | number | string
    refund_reason: string
    created_at?: Date | string
    updated_at: Date | string
    deleted_at?: Date | string | null
  }

  export type refundsUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    account_number?: StringFieldUpdateOperationsInput | string
    bank_name?: StringFieldUpdateOperationsInput | string
    bik?: StringFieldUpdateOperationsInput | string
    correspondent_account?: StringFieldUpdateOperationsInput | string
    inn?: StringFieldUpdateOperationsInput | string
    kpp?: NullableStringFieldUpdateOperationsInput | string | null
    okpo?: NullableStringFieldUpdateOperationsInput | string | null
    ogrn?: NullableStringFieldUpdateOperationsInput | string | null
    refund_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    refund_reason?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type refundsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    account_number?: StringFieldUpdateOperationsInput | string
    bank_name?: StringFieldUpdateOperationsInput | string
    bik?: StringFieldUpdateOperationsInput | string
    correspondent_account?: StringFieldUpdateOperationsInput | string
    inn?: StringFieldUpdateOperationsInput | string
    kpp?: NullableStringFieldUpdateOperationsInput | string | null
    okpo?: NullableStringFieldUpdateOperationsInput | string | null
    ogrn?: NullableStringFieldUpdateOperationsInput | string | null
    refund_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    refund_reason?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ticketsCreateInput = {
    title: string
    short_description?: string | null
    description?: string | null
    image_url?: string | null
    event_date: Date | string
    event_location: string
    price: Decimal | DecimalJsLike | number | string
    is_used?: boolean
    qr_code?: string | null
    ticket_number: string
    created_at?: Date | string
    updated_at: Date | string
    users?: usersCreateNestedOneWithoutTicketsInput
    user_tickets?: user_ticketsCreateNestedManyWithoutTicketsInput
  }

  export type ticketsUncheckedCreateInput = {
    id?: number
    title: string
    short_description?: string | null
    description?: string | null
    image_url?: string | null
    event_date: Date | string
    event_location: string
    price: Decimal | DecimalJsLike | number | string
    is_used?: boolean
    qr_code?: string | null
    ticket_number: string
    user_id?: number | null
    created_at?: Date | string
    updated_at: Date | string
    user_tickets?: user_ticketsUncheckedCreateNestedManyWithoutTicketsInput
  }

  export type ticketsUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    short_description?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    event_date?: DateTimeFieldUpdateOperationsInput | Date | string
    event_location?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    is_used?: BoolFieldUpdateOperationsInput | boolean
    qr_code?: NullableStringFieldUpdateOperationsInput | string | null
    ticket_number?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: usersUpdateOneWithoutTicketsNestedInput
    user_tickets?: user_ticketsUpdateManyWithoutTicketsNestedInput
  }

  export type ticketsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    short_description?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    event_date?: DateTimeFieldUpdateOperationsInput | Date | string
    event_location?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    is_used?: BoolFieldUpdateOperationsInput | boolean
    qr_code?: NullableStringFieldUpdateOperationsInput | string | null
    ticket_number?: StringFieldUpdateOperationsInput | string
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_tickets?: user_ticketsUncheckedUpdateManyWithoutTicketsNestedInput
  }

  export type ticketsCreateManyInput = {
    id?: number
    title: string
    short_description?: string | null
    description?: string | null
    image_url?: string | null
    event_date: Date | string
    event_location: string
    price: Decimal | DecimalJsLike | number | string
    is_used?: boolean
    qr_code?: string | null
    ticket_number: string
    user_id?: number | null
    created_at?: Date | string
    updated_at: Date | string
  }

  export type ticketsUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    short_description?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    event_date?: DateTimeFieldUpdateOperationsInput | Date | string
    event_location?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    is_used?: BoolFieldUpdateOperationsInput | boolean
    qr_code?: NullableStringFieldUpdateOperationsInput | string | null
    ticket_number?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ticketsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    short_description?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    event_date?: DateTimeFieldUpdateOperationsInput | Date | string
    event_location?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    is_used?: BoolFieldUpdateOperationsInput | boolean
    qr_code?: NullableStringFieldUpdateOperationsInput | string | null
    ticket_number?: StringFieldUpdateOperationsInput | string
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type user_ticketsCreateInput = {
    ticket_number: string
    qr_code?: string | null
    purchase_date?: Date | string
    is_used?: boolean
    used_at?: Date | string | null
    payment_status?: $Enums.PaymentStatus
    payment_id?: string | null
    expires_at?: Date | string | null
    created_at?: Date | string
    updated_at: Date | string
    email?: string | null
    first_name?: string | null
    last_name?: string | null
    phone?: string | null
    order_items?: order_itemsCreateNestedOneWithoutUser_ticketsInput
    refund_tickets?: refund_ticketsCreateNestedManyWithoutUser_ticketsInput
    tickets: ticketsCreateNestedOneWithoutUser_ticketsInput
    users?: usersCreateNestedOneWithoutUser_ticketsInput
    orders?: ordersCreateNestedManyWithoutUser_ticketsInput
    refunds?: refundsCreateNestedManyWithoutUser_ticketsInput
  }

  export type user_ticketsUncheckedCreateInput = {
    id?: number
    user_id?: number | null
    ticket_id: number
    ticket_number: string
    qr_code?: string | null
    purchase_date?: Date | string
    is_used?: boolean
    used_at?: Date | string | null
    payment_status?: $Enums.PaymentStatus
    payment_id?: string | null
    expires_at?: Date | string | null
    created_at?: Date | string
    updated_at: Date | string
    email?: string | null
    first_name?: string | null
    last_name?: string | null
    phone?: string | null
    order_items?: order_itemsUncheckedCreateNestedOneWithoutUser_ticketsInput
    refund_tickets?: refund_ticketsUncheckedCreateNestedManyWithoutUser_ticketsInput
    orders?: ordersUncheckedCreateNestedManyWithoutUser_ticketsInput
    refunds?: refundsUncheckedCreateNestedManyWithoutUser_ticketsInput
  }

  export type user_ticketsUpdateInput = {
    ticket_number?: StringFieldUpdateOperationsInput | string
    qr_code?: NullableStringFieldUpdateOperationsInput | string | null
    purchase_date?: DateTimeFieldUpdateOperationsInput | Date | string
    is_used?: BoolFieldUpdateOperationsInput | boolean
    used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    payment_id?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    order_items?: order_itemsUpdateOneWithoutUser_ticketsNestedInput
    refund_tickets?: refund_ticketsUpdateManyWithoutUser_ticketsNestedInput
    tickets?: ticketsUpdateOneRequiredWithoutUser_ticketsNestedInput
    users?: usersUpdateOneWithoutUser_ticketsNestedInput
    orders?: ordersUpdateManyWithoutUser_ticketsNestedInput
    refunds?: refundsUpdateManyWithoutUser_ticketsNestedInput
  }

  export type user_ticketsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    ticket_id?: IntFieldUpdateOperationsInput | number
    ticket_number?: StringFieldUpdateOperationsInput | string
    qr_code?: NullableStringFieldUpdateOperationsInput | string | null
    purchase_date?: DateTimeFieldUpdateOperationsInput | Date | string
    is_used?: BoolFieldUpdateOperationsInput | boolean
    used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    payment_id?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    order_items?: order_itemsUncheckedUpdateOneWithoutUser_ticketsNestedInput
    refund_tickets?: refund_ticketsUncheckedUpdateManyWithoutUser_ticketsNestedInput
    orders?: ordersUncheckedUpdateManyWithoutUser_ticketsNestedInput
    refunds?: refundsUncheckedUpdateManyWithoutUser_ticketsNestedInput
  }

  export type user_ticketsCreateManyInput = {
    id?: number
    user_id?: number | null
    ticket_id: number
    ticket_number: string
    qr_code?: string | null
    purchase_date?: Date | string
    is_used?: boolean
    used_at?: Date | string | null
    payment_status?: $Enums.PaymentStatus
    payment_id?: string | null
    expires_at?: Date | string | null
    created_at?: Date | string
    updated_at: Date | string
    email?: string | null
    first_name?: string | null
    last_name?: string | null
    phone?: string | null
  }

  export type user_ticketsUpdateManyMutationInput = {
    ticket_number?: StringFieldUpdateOperationsInput | string
    qr_code?: NullableStringFieldUpdateOperationsInput | string | null
    purchase_date?: DateTimeFieldUpdateOperationsInput | Date | string
    is_used?: BoolFieldUpdateOperationsInput | boolean
    used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    payment_id?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type user_ticketsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    ticket_id?: IntFieldUpdateOperationsInput | number
    ticket_number?: StringFieldUpdateOperationsInput | string
    qr_code?: NullableStringFieldUpdateOperationsInput | string | null
    purchase_date?: DateTimeFieldUpdateOperationsInput | Date | string
    is_used?: BoolFieldUpdateOperationsInput | boolean
    used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    payment_id?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type usersCreateInput = {
    telegram_id?: bigint | number | null
    username?: string | null
    first_name?: string
    last_name?: string | null
    is_admin?: boolean
    language_code?: string | null
    is_bot?: boolean
    phone?: string | null
    email?: string | null
    created_at?: Date | string
    updated_at: Date | string
    orders?: ordersCreateNestedManyWithoutUsersInput
    refunds?: refundsCreateNestedManyWithoutUsersInput
    tickets?: ticketsCreateNestedManyWithoutUsersInput
    user_tickets?: user_ticketsCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateInput = {
    id?: number
    telegram_id?: bigint | number | null
    username?: string | null
    first_name?: string
    last_name?: string | null
    is_admin?: boolean
    language_code?: string | null
    is_bot?: boolean
    phone?: string | null
    email?: string | null
    created_at?: Date | string
    updated_at: Date | string
    orders?: ordersUncheckedCreateNestedManyWithoutUsersInput
    refunds?: refundsUncheckedCreateNestedManyWithoutUsersInput
    tickets?: ticketsUncheckedCreateNestedManyWithoutUsersInput
    user_tickets?: user_ticketsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersUpdateInput = {
    telegram_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_admin?: BoolFieldUpdateOperationsInput | boolean
    language_code?: NullableStringFieldUpdateOperationsInput | string | null
    is_bot?: BoolFieldUpdateOperationsInput | boolean
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: ordersUpdateManyWithoutUsersNestedInput
    refunds?: refundsUpdateManyWithoutUsersNestedInput
    tickets?: ticketsUpdateManyWithoutUsersNestedInput
    user_tickets?: user_ticketsUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegram_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_admin?: BoolFieldUpdateOperationsInput | boolean
    language_code?: NullableStringFieldUpdateOperationsInput | string | null
    is_bot?: BoolFieldUpdateOperationsInput | boolean
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: ordersUncheckedUpdateManyWithoutUsersNestedInput
    refunds?: refundsUncheckedUpdateManyWithoutUsersNestedInput
    tickets?: ticketsUncheckedUpdateManyWithoutUsersNestedInput
    user_tickets?: user_ticketsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type usersCreateManyInput = {
    id?: number
    telegram_id?: bigint | number | null
    username?: string | null
    first_name?: string
    last_name?: string | null
    is_admin?: boolean
    language_code?: string | null
    is_bot?: boolean
    phone?: string | null
    email?: string | null
    created_at?: Date | string
    updated_at: Date | string
  }

  export type usersUpdateManyMutationInput = {
    telegram_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_admin?: BoolFieldUpdateOperationsInput | boolean
    language_code?: NullableStringFieldUpdateOperationsInput | string | null
    is_bot?: BoolFieldUpdateOperationsInput | boolean
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegram_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_admin?: BoolFieldUpdateOperationsInput | boolean
    language_code?: NullableStringFieldUpdateOperationsInput | string | null
    is_bot?: BoolFieldUpdateOperationsInput | boolean
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumHallTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.HallType | EnumHallTypeFieldRefInput<$PrismaModel>
    in?: $Enums.HallType[] | ListEnumHallTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.HallType[] | ListEnumHallTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumHallTypeFilter<$PrismaModel> | $Enums.HallType
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ZoneListRelationFilter = {
    every?: ZoneWhereInput
    some?: ZoneWhereInput
    none?: ZoneWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ZoneOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HallCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    type?: SortOrder
    imageUrl?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HallAvgOrderByAggregateInput = {
    id?: SortOrder
    sortOrder?: SortOrder
  }

  export type HallMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    type?: SortOrder
    imageUrl?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HallMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    type?: SortOrder
    imageUrl?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HallSumOrderByAggregateInput = {
    id?: SortOrder
    sortOrder?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumHallTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.HallType | EnumHallTypeFieldRefInput<$PrismaModel>
    in?: $Enums.HallType[] | ListEnumHallTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.HallType[] | ListEnumHallTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumHallTypeWithAggregatesFilter<$PrismaModel> | $Enums.HallType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumHallTypeFilter<$PrismaModel>
    _max?: NestedEnumHallTypeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumZoneTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ZoneType | EnumZoneTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ZoneType[] | ListEnumZoneTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ZoneType[] | ListEnumZoneTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumZoneTypeFilter<$PrismaModel> | $Enums.ZoneType
  }

  export type HallRelationFilter = {
    is?: HallWhereInput
    isNot?: HallWhereInput
  }

  export type ZoneItemListRelationFilter = {
    every?: ZoneItemWhereInput
    some?: ZoneItemWhereInput
    none?: ZoneItemWhereInput
  }

  export type ZoneItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ZoneCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    hallId?: SortOrder
    openTime?: SortOrder
    closeTime?: SortOrder
    imageUrl?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ZoneAvgOrderByAggregateInput = {
    id?: SortOrder
    hallId?: SortOrder
    sortOrder?: SortOrder
  }

  export type ZoneMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    hallId?: SortOrder
    openTime?: SortOrder
    closeTime?: SortOrder
    imageUrl?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ZoneMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    hallId?: SortOrder
    openTime?: SortOrder
    closeTime?: SortOrder
    imageUrl?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ZoneSumOrderByAggregateInput = {
    id?: SortOrder
    hallId?: SortOrder
    sortOrder?: SortOrder
  }

  export type EnumZoneTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ZoneType | EnumZoneTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ZoneType[] | ListEnumZoneTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ZoneType[] | ListEnumZoneTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumZoneTypeWithAggregatesFilter<$PrismaModel> | $Enums.ZoneType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumZoneTypeFilter<$PrismaModel>
    _max?: NestedEnumZoneTypeFilter<$PrismaModel>
  }

  export type EnumZoneItemTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ZoneItemType | EnumZoneItemTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ZoneItemType[] | ListEnumZoneItemTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ZoneItemType[] | ListEnumZoneItemTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumZoneItemTypeFilter<$PrismaModel> | $Enums.ZoneItemType
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type ReservationListRelationFilter = {
    every?: ReservationWhereInput
    some?: ReservationWhereInput
    none?: ReservationWhereInput
  }

  export type ZoneRelationFilter = {
    is?: ZoneWhereInput
    isNot?: ZoneWhereInput
  }

  export type ReservationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ZoneItemCountOrderByAggregateInput = {
    id?: SortOrder
    zoneId?: SortOrder
    floor?: SortOrder
    label?: SortOrder
    type?: SortOrder
    isBooking?: SortOrder
    isActive?: SortOrder
    x?: SortOrder
    y?: SortOrder
    width?: SortOrder
    height?: SortOrder
    seats?: SortOrder
    capacity?: SortOrder
    pricePerHour?: SortOrder
    pricePerSeat?: SortOrder
    pricePerSlot?: SortOrder
    minDuration?: SortOrder
    maxDuration?: SortOrder
    timeSlots?: SortOrder
    description?: SortOrder
    features?: SortOrder
  }

  export type ZoneItemAvgOrderByAggregateInput = {
    id?: SortOrder
    zoneId?: SortOrder
    floor?: SortOrder
    x?: SortOrder
    y?: SortOrder
    width?: SortOrder
    height?: SortOrder
    seats?: SortOrder
    capacity?: SortOrder
    pricePerHour?: SortOrder
    pricePerSeat?: SortOrder
    pricePerSlot?: SortOrder
    minDuration?: SortOrder
    maxDuration?: SortOrder
  }

  export type ZoneItemMaxOrderByAggregateInput = {
    id?: SortOrder
    zoneId?: SortOrder
    floor?: SortOrder
    label?: SortOrder
    type?: SortOrder
    isBooking?: SortOrder
    isActive?: SortOrder
    x?: SortOrder
    y?: SortOrder
    width?: SortOrder
    height?: SortOrder
    seats?: SortOrder
    capacity?: SortOrder
    pricePerHour?: SortOrder
    pricePerSeat?: SortOrder
    pricePerSlot?: SortOrder
    minDuration?: SortOrder
    maxDuration?: SortOrder
    description?: SortOrder
  }

  export type ZoneItemMinOrderByAggregateInput = {
    id?: SortOrder
    zoneId?: SortOrder
    floor?: SortOrder
    label?: SortOrder
    type?: SortOrder
    isBooking?: SortOrder
    isActive?: SortOrder
    x?: SortOrder
    y?: SortOrder
    width?: SortOrder
    height?: SortOrder
    seats?: SortOrder
    capacity?: SortOrder
    pricePerHour?: SortOrder
    pricePerSeat?: SortOrder
    pricePerSlot?: SortOrder
    minDuration?: SortOrder
    maxDuration?: SortOrder
    description?: SortOrder
  }

  export type ZoneItemSumOrderByAggregateInput = {
    id?: SortOrder
    zoneId?: SortOrder
    floor?: SortOrder
    x?: SortOrder
    y?: SortOrder
    width?: SortOrder
    height?: SortOrder
    seats?: SortOrder
    capacity?: SortOrder
    pricePerHour?: SortOrder
    pricePerSeat?: SortOrder
    pricePerSlot?: SortOrder
    minDuration?: SortOrder
    maxDuration?: SortOrder
  }

  export type EnumZoneItemTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ZoneItemType | EnumZoneItemTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ZoneItemType[] | ListEnumZoneItemTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ZoneItemType[] | ListEnumZoneItemTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumZoneItemTypeWithAggregatesFilter<$PrismaModel> | $Enums.ZoneItemType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumZoneItemTypeFilter<$PrismaModel>
    _max?: NestedEnumZoneItemTypeFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type EnumReservationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ReservationType | EnumReservationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ReservationType[] | ListEnumReservationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReservationType[] | ListEnumReservationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumReservationTypeFilter<$PrismaModel> | $Enums.ReservationType
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type EnumReservationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ReservationStatus | EnumReservationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ReservationStatus[] | ListEnumReservationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReservationStatus[] | ListEnumReservationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumReservationStatusFilter<$PrismaModel> | $Enums.ReservationStatus
  }

  export type PaymentListRelationFilter = {
    every?: PaymentWhereInput
    some?: PaymentWhereInput
    none?: PaymentWhereInput
  }

  export type ZoneItemRelationFilter = {
    is?: ZoneItemWhereInput
    isNot?: ZoneItemWhereInput
  }

  export type PaymentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReservationCountOrderByAggregateInput = {
    id?: SortOrder
    zoneItemId?: SortOrder
    type?: SortOrder
    userName?: SortOrder
    phone?: SortOrder
    startsAt?: SortOrder
    endsAt?: SortOrder
    deposit?: SortOrder
    status?: SortOrder
    seatsCount?: SortOrder
    guestsCount?: SortOrder
    duration?: SortOrder
    comment?: SortOrder
    specialRequests?: SortOrder
    totalPrice?: SortOrder
  }

  export type ReservationAvgOrderByAggregateInput = {
    id?: SortOrder
    zoneItemId?: SortOrder
    deposit?: SortOrder
    seatsCount?: SortOrder
    guestsCount?: SortOrder
    duration?: SortOrder
    totalPrice?: SortOrder
  }

  export type ReservationMaxOrderByAggregateInput = {
    id?: SortOrder
    zoneItemId?: SortOrder
    type?: SortOrder
    userName?: SortOrder
    phone?: SortOrder
    startsAt?: SortOrder
    endsAt?: SortOrder
    deposit?: SortOrder
    status?: SortOrder
    seatsCount?: SortOrder
    guestsCount?: SortOrder
    duration?: SortOrder
    comment?: SortOrder
    specialRequests?: SortOrder
    totalPrice?: SortOrder
  }

  export type ReservationMinOrderByAggregateInput = {
    id?: SortOrder
    zoneItemId?: SortOrder
    type?: SortOrder
    userName?: SortOrder
    phone?: SortOrder
    startsAt?: SortOrder
    endsAt?: SortOrder
    deposit?: SortOrder
    status?: SortOrder
    seatsCount?: SortOrder
    guestsCount?: SortOrder
    duration?: SortOrder
    comment?: SortOrder
    specialRequests?: SortOrder
    totalPrice?: SortOrder
  }

  export type ReservationSumOrderByAggregateInput = {
    id?: SortOrder
    zoneItemId?: SortOrder
    deposit?: SortOrder
    seatsCount?: SortOrder
    guestsCount?: SortOrder
    duration?: SortOrder
    totalPrice?: SortOrder
  }

  export type EnumReservationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReservationType | EnumReservationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ReservationType[] | ListEnumReservationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReservationType[] | ListEnumReservationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumReservationTypeWithAggregatesFilter<$PrismaModel> | $Enums.ReservationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReservationTypeFilter<$PrismaModel>
    _max?: NestedEnumReservationTypeFilter<$PrismaModel>
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type EnumReservationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReservationStatus | EnumReservationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ReservationStatus[] | ListEnumReservationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReservationStatus[] | ListEnumReservationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumReservationStatusWithAggregatesFilter<$PrismaModel> | $Enums.ReservationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReservationStatusFilter<$PrismaModel>
    _max?: NestedEnumReservationStatusFilter<$PrismaModel>
  }

  export type ReservationRelationFilter = {
    is?: ReservationWhereInput
    isNot?: ReservationWhereInput
  }

  export type PaymentCountOrderByAggregateInput = {
    id?: SortOrder
    reservationId?: SortOrder
    amount?: SortOrder
    payDate?: SortOrder
    refunded?: SortOrder
  }

  export type PaymentAvgOrderByAggregateInput = {
    id?: SortOrder
    reservationId?: SortOrder
    amount?: SortOrder
  }

  export type PaymentMaxOrderByAggregateInput = {
    id?: SortOrder
    reservationId?: SortOrder
    amount?: SortOrder
    payDate?: SortOrder
    refunded?: SortOrder
  }

  export type PaymentMinOrderByAggregateInput = {
    id?: SortOrder
    reservationId?: SortOrder
    amount?: SortOrder
    payDate?: SortOrder
    refunded?: SortOrder
  }

  export type PaymentSumOrderByAggregateInput = {
    id?: SortOrder
    reservationId?: SortOrder
    amount?: SortOrder
  }

  export type MenuCategoryListRelationFilter = {
    every?: MenuCategoryWhereInput
    some?: MenuCategoryWhereInput
    none?: MenuCategoryWhereInput
  }

  export type MenuCategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MenuTypeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MenuTypeAvgOrderByAggregateInput = {
    id?: SortOrder
    sortOrder?: SortOrder
  }

  export type MenuTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MenuTypeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MenuTypeSumOrderByAggregateInput = {
    id?: SortOrder
    sortOrder?: SortOrder
  }

  export type MenuTypeRelationFilter = {
    is?: MenuTypeWhereInput
    isNot?: MenuTypeWhereInput
  }

  export type MenuItemListRelationFilter = {
    every?: MenuItemWhereInput
    some?: MenuItemWhereInput
    none?: MenuItemWhereInput
  }

  export type MenuItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MenuCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    menuTypeId?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MenuCategoryAvgOrderByAggregateInput = {
    id?: SortOrder
    menuTypeId?: SortOrder
    sortOrder?: SortOrder
  }

  export type MenuCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    menuTypeId?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MenuCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    menuTypeId?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MenuCategorySumOrderByAggregateInput = {
    id?: SortOrder
    menuTypeId?: SortOrder
    sortOrder?: SortOrder
  }

  export type MenuCategoryRelationFilter = {
    is?: MenuCategoryWhereInput
    isNot?: MenuCategoryWhereInput
  }

  export type MenuItemCountOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    imageUrl?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MenuItemAvgOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    price?: SortOrder
    sortOrder?: SortOrder
  }

  export type MenuItemMaxOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    imageUrl?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MenuItemMinOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    imageUrl?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MenuItemSumOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    price?: SortOrder
    sortOrder?: SortOrder
  }

  export type HookahCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    features?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HookahAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    sortOrder?: SortOrder
  }

  export type HookahMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HookahMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HookahSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    sortOrder?: SortOrder
  }

  export type BoardGameCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    duration?: SortOrder
    players?: SortOrder
    difficulty?: SortOrder
    category?: SortOrder
    imageUrl?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BoardGameAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    sortOrder?: SortOrder
  }

  export type BoardGameMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    duration?: SortOrder
    players?: SortOrder
    difficulty?: SortOrder
    category?: SortOrder
    imageUrl?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BoardGameMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    duration?: SortOrder
    players?: SortOrder
    difficulty?: SortOrder
    category?: SortOrder
    imageUrl?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BoardGameSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    sortOrder?: SortOrder
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type BilliardsServiceCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    price?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BilliardsServiceAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    sortOrder?: SortOrder
  }

  export type BilliardsServiceMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    price?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BilliardsServiceMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    price?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BilliardsServiceSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    sortOrder?: SortOrder
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BilliardsSettingsCountOrderByAggregateInput = {
    id?: SortOrder
    bookingFee?: SortOrder
    bookingTimeoutMinutes?: SortOrder
    minBookingDuration?: SortOrder
    maxBookingDuration?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BilliardsSettingsAvgOrderByAggregateInput = {
    id?: SortOrder
    bookingFee?: SortOrder
    bookingTimeoutMinutes?: SortOrder
    minBookingDuration?: SortOrder
    maxBookingDuration?: SortOrder
  }

  export type BilliardsSettingsMaxOrderByAggregateInput = {
    id?: SortOrder
    bookingFee?: SortOrder
    bookingTimeoutMinutes?: SortOrder
    minBookingDuration?: SortOrder
    maxBookingDuration?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BilliardsSettingsMinOrderByAggregateInput = {
    id?: SortOrder
    bookingFee?: SortOrder
    bookingTimeoutMinutes?: SortOrder
    minBookingDuration?: SortOrder
    maxBookingDuration?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BilliardsSettingsSumOrderByAggregateInput = {
    id?: SortOrder
    bookingFee?: SortOrder
    bookingTimeoutMinutes?: SortOrder
    minBookingDuration?: SortOrder
    maxBookingDuration?: SortOrder
  }

  export type KaraokeServiceCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    price?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KaraokeServiceAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    sortOrder?: SortOrder
  }

  export type KaraokeServiceMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    price?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KaraokeServiceMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    price?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    isActive?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KaraokeServiceSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    sortOrder?: SortOrder
  }

  export type KaraokeSettingsCountOrderByAggregateInput = {
    id?: SortOrder
    maxVipGuests?: SortOrder
    baseVipPrice?: SortOrder
    additionalGuestPrice?: SortOrder
    depositPolicy?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KaraokeSettingsAvgOrderByAggregateInput = {
    id?: SortOrder
    maxVipGuests?: SortOrder
    baseVipPrice?: SortOrder
    additionalGuestPrice?: SortOrder
  }

  export type KaraokeSettingsMaxOrderByAggregateInput = {
    id?: SortOrder
    maxVipGuests?: SortOrder
    baseVipPrice?: SortOrder
    additionalGuestPrice?: SortOrder
    depositPolicy?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KaraokeSettingsMinOrderByAggregateInput = {
    id?: SortOrder
    maxVipGuests?: SortOrder
    baseVipPrice?: SortOrder
    additionalGuestPrice?: SortOrder
    depositPolicy?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KaraokeSettingsSumOrderByAggregateInput = {
    id?: SortOrder
    maxVipGuests?: SortOrder
    baseVipPrice?: SortOrder
    additionalGuestPrice?: SortOrder
  }

  export type EnumBanquetRequestStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.BanquetRequestStatus | EnumBanquetRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BanquetRequestStatus[] | ListEnumBanquetRequestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BanquetRequestStatus[] | ListEnumBanquetRequestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBanquetRequestStatusFilter<$PrismaModel> | $Enums.BanquetRequestStatus
  }

  export type BanquetRequestCountOrderByAggregateInput = {
    id?: SortOrder
    eventDate?: SortOrder
    eventTime?: SortOrder
    endTime?: SortOrder
    guestCount?: SortOrder
    eventType?: SortOrder
    budget?: SortOrder
    banquetType?: SortOrder
    specialMenu?: SortOrder
    music?: SortOrder
    decor?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    additionalWishes?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BanquetRequestAvgOrderByAggregateInput = {
    id?: SortOrder
    guestCount?: SortOrder
  }

  export type BanquetRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    eventDate?: SortOrder
    eventTime?: SortOrder
    endTime?: SortOrder
    guestCount?: SortOrder
    eventType?: SortOrder
    budget?: SortOrder
    banquetType?: SortOrder
    specialMenu?: SortOrder
    music?: SortOrder
    decor?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    additionalWishes?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BanquetRequestMinOrderByAggregateInput = {
    id?: SortOrder
    eventDate?: SortOrder
    eventTime?: SortOrder
    endTime?: SortOrder
    guestCount?: SortOrder
    eventType?: SortOrder
    budget?: SortOrder
    banquetType?: SortOrder
    specialMenu?: SortOrder
    music?: SortOrder
    decor?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    additionalWishes?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BanquetRequestSumOrderByAggregateInput = {
    id?: SortOrder
    guestCount?: SortOrder
  }

  export type EnumBanquetRequestStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BanquetRequestStatus | EnumBanquetRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BanquetRequestStatus[] | ListEnumBanquetRequestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BanquetRequestStatus[] | ListEnumBanquetRequestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBanquetRequestStatusWithAggregatesFilter<$PrismaModel> | $Enums.BanquetRequestStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBanquetRequestStatusFilter<$PrismaModel>
    _max?: NestedEnumBanquetRequestStatusFilter<$PrismaModel>
  }

  export type OrdersRelationFilter = {
    is?: ordersWhereInput
    isNot?: ordersWhereInput
  }

  export type User_ticketsRelationFilter = {
    is?: user_ticketsWhereInput
    isNot?: user_ticketsWhereInput
  }

  export type order_itemsCountOrderByAggregateInput = {
    id?: SortOrder
    order_id?: SortOrder
    user_ticket_id?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
  }

  export type order_itemsAvgOrderByAggregateInput = {
    id?: SortOrder
    order_id?: SortOrder
    user_ticket_id?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
  }

  export type order_itemsMaxOrderByAggregateInput = {
    id?: SortOrder
    order_id?: SortOrder
    user_ticket_id?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
  }

  export type order_itemsMinOrderByAggregateInput = {
    id?: SortOrder
    order_id?: SortOrder
    user_ticket_id?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
  }

  export type order_itemsSumOrderByAggregateInput = {
    id?: SortOrder
    order_id?: SortOrder
    user_ticket_id?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
  }

  export type EnumOrderStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusFilter<$PrismaModel> | $Enums.OrderStatus
  }

  export type Order_itemsListRelationFilter = {
    every?: order_itemsWhereInput
    some?: order_itemsWhereInput
    none?: order_itemsWhereInput
  }

  export type UsersNullableRelationFilter = {
    is?: usersWhereInput | null
    isNot?: usersWhereInput | null
  }

  export type User_ticketsListRelationFilter = {
    every?: user_ticketsWhereInput
    some?: user_ticketsWhereInput
    none?: user_ticketsWhereInput
  }

  export type order_itemsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type user_ticketsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ordersCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    status?: SortOrder
    total_amount?: SortOrder
    payment_id?: SortOrder
    payment_method?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ordersAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    total_amount?: SortOrder
  }

  export type ordersMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    status?: SortOrder
    total_amount?: SortOrder
    payment_id?: SortOrder
    payment_method?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ordersMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    status?: SortOrder
    total_amount?: SortOrder
    payment_id?: SortOrder
    payment_method?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ordersSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    total_amount?: SortOrder
  }

  export type EnumOrderStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel> | $Enums.OrderStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrderStatusFilter<$PrismaModel>
    _max?: NestedEnumOrderStatusFilter<$PrismaModel>
  }

  export type RefundsRelationFilter = {
    is?: refundsWhereInput
    isNot?: refundsWhereInput
  }

  export type refund_ticketsRefund_idUser_ticket_idCompoundUniqueInput = {
    refund_id: number
    user_ticket_id: number
  }

  export type refund_ticketsCountOrderByAggregateInput = {
    refund_id?: SortOrder
    user_ticket_id?: SortOrder
    ticket_number?: SortOrder
    refund_amount?: SortOrder
  }

  export type refund_ticketsAvgOrderByAggregateInput = {
    refund_id?: SortOrder
    user_ticket_id?: SortOrder
    refund_amount?: SortOrder
  }

  export type refund_ticketsMaxOrderByAggregateInput = {
    refund_id?: SortOrder
    user_ticket_id?: SortOrder
    ticket_number?: SortOrder
    refund_amount?: SortOrder
  }

  export type refund_ticketsMinOrderByAggregateInput = {
    refund_id?: SortOrder
    user_ticket_id?: SortOrder
    ticket_number?: SortOrder
    refund_amount?: SortOrder
  }

  export type refund_ticketsSumOrderByAggregateInput = {
    refund_id?: SortOrder
    user_ticket_id?: SortOrder
    refund_amount?: SortOrder
  }

  export type Refund_ticketsListRelationFilter = {
    every?: refund_ticketsWhereInput
    some?: refund_ticketsWhereInput
    none?: refund_ticketsWhereInput
  }

  export type refund_ticketsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type refundsCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    full_name?: SortOrder
    account_number?: SortOrder
    bank_name?: SortOrder
    bik?: SortOrder
    correspondent_account?: SortOrder
    inn?: SortOrder
    kpp?: SortOrder
    okpo?: SortOrder
    ogrn?: SortOrder
    refund_amount?: SortOrder
    refund_reason?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrder
  }

  export type refundsAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    refund_amount?: SortOrder
  }

  export type refundsMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    full_name?: SortOrder
    account_number?: SortOrder
    bank_name?: SortOrder
    bik?: SortOrder
    correspondent_account?: SortOrder
    inn?: SortOrder
    kpp?: SortOrder
    okpo?: SortOrder
    ogrn?: SortOrder
    refund_amount?: SortOrder
    refund_reason?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrder
  }

  export type refundsMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    full_name?: SortOrder
    account_number?: SortOrder
    bank_name?: SortOrder
    bik?: SortOrder
    correspondent_account?: SortOrder
    inn?: SortOrder
    kpp?: SortOrder
    okpo?: SortOrder
    ogrn?: SortOrder
    refund_amount?: SortOrder
    refund_reason?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrder
  }

  export type refundsSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    refund_amount?: SortOrder
  }

  export type ticketsCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    short_description?: SortOrder
    description?: SortOrder
    image_url?: SortOrder
    event_date?: SortOrder
    event_location?: SortOrder
    price?: SortOrder
    is_used?: SortOrder
    qr_code?: SortOrder
    ticket_number?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ticketsAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    user_id?: SortOrder
  }

  export type ticketsMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    short_description?: SortOrder
    description?: SortOrder
    image_url?: SortOrder
    event_date?: SortOrder
    event_location?: SortOrder
    price?: SortOrder
    is_used?: SortOrder
    qr_code?: SortOrder
    ticket_number?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ticketsMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    short_description?: SortOrder
    description?: SortOrder
    image_url?: SortOrder
    event_date?: SortOrder
    event_location?: SortOrder
    price?: SortOrder
    is_used?: SortOrder
    qr_code?: SortOrder
    ticket_number?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ticketsSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    user_id?: SortOrder
  }

  export type EnumPaymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusFilter<$PrismaModel> | $Enums.PaymentStatus
  }

  export type Order_itemsNullableRelationFilter = {
    is?: order_itemsWhereInput | null
    isNot?: order_itemsWhereInput | null
  }

  export type TicketsRelationFilter = {
    is?: ticketsWhereInput
    isNot?: ticketsWhereInput
  }

  export type OrdersListRelationFilter = {
    every?: ordersWhereInput
    some?: ordersWhereInput
    none?: ordersWhereInput
  }

  export type RefundsListRelationFilter = {
    every?: refundsWhereInput
    some?: refundsWhereInput
    none?: refundsWhereInput
  }

  export type ordersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type refundsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type user_ticketsCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    ticket_id?: SortOrder
    ticket_number?: SortOrder
    qr_code?: SortOrder
    purchase_date?: SortOrder
    is_used?: SortOrder
    used_at?: SortOrder
    payment_status?: SortOrder
    payment_id?: SortOrder
    expires_at?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    email?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    phone?: SortOrder
  }

  export type user_ticketsAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    ticket_id?: SortOrder
  }

  export type user_ticketsMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    ticket_id?: SortOrder
    ticket_number?: SortOrder
    qr_code?: SortOrder
    purchase_date?: SortOrder
    is_used?: SortOrder
    used_at?: SortOrder
    payment_status?: SortOrder
    payment_id?: SortOrder
    expires_at?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    email?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    phone?: SortOrder
  }

  export type user_ticketsMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    ticket_id?: SortOrder
    ticket_number?: SortOrder
    qr_code?: SortOrder
    purchase_date?: SortOrder
    is_used?: SortOrder
    used_at?: SortOrder
    payment_status?: SortOrder
    payment_id?: SortOrder
    expires_at?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    email?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    phone?: SortOrder
  }

  export type user_ticketsSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    ticket_id?: SortOrder
  }

  export type EnumPaymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusFilter<$PrismaModel>
  }

  export type BigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type TicketsListRelationFilter = {
    every?: ticketsWhereInput
    some?: ticketsWhereInput
    none?: ticketsWhereInput
  }

  export type ticketsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersCountOrderByAggregateInput = {
    id?: SortOrder
    telegram_id?: SortOrder
    username?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    is_admin?: SortOrder
    language_code?: SortOrder
    is_bot?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    id?: SortOrder
    telegram_id?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    id?: SortOrder
    telegram_id?: SortOrder
    username?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    is_admin?: SortOrder
    language_code?: SortOrder
    is_bot?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    id?: SortOrder
    telegram_id?: SortOrder
    username?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    is_admin?: SortOrder
    language_code?: SortOrder
    is_bot?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    id?: SortOrder
    telegram_id?: SortOrder
  }

  export type BigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type ZoneCreateNestedManyWithoutHallInput = {
    create?: XOR<ZoneCreateWithoutHallInput, ZoneUncheckedCreateWithoutHallInput> | ZoneCreateWithoutHallInput[] | ZoneUncheckedCreateWithoutHallInput[]
    connectOrCreate?: ZoneCreateOrConnectWithoutHallInput | ZoneCreateOrConnectWithoutHallInput[]
    createMany?: ZoneCreateManyHallInputEnvelope
    connect?: ZoneWhereUniqueInput | ZoneWhereUniqueInput[]
  }

  export type ZoneUncheckedCreateNestedManyWithoutHallInput = {
    create?: XOR<ZoneCreateWithoutHallInput, ZoneUncheckedCreateWithoutHallInput> | ZoneCreateWithoutHallInput[] | ZoneUncheckedCreateWithoutHallInput[]
    connectOrCreate?: ZoneCreateOrConnectWithoutHallInput | ZoneCreateOrConnectWithoutHallInput[]
    createMany?: ZoneCreateManyHallInputEnvelope
    connect?: ZoneWhereUniqueInput | ZoneWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumHallTypeFieldUpdateOperationsInput = {
    set?: $Enums.HallType
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ZoneUpdateManyWithoutHallNestedInput = {
    create?: XOR<ZoneCreateWithoutHallInput, ZoneUncheckedCreateWithoutHallInput> | ZoneCreateWithoutHallInput[] | ZoneUncheckedCreateWithoutHallInput[]
    connectOrCreate?: ZoneCreateOrConnectWithoutHallInput | ZoneCreateOrConnectWithoutHallInput[]
    upsert?: ZoneUpsertWithWhereUniqueWithoutHallInput | ZoneUpsertWithWhereUniqueWithoutHallInput[]
    createMany?: ZoneCreateManyHallInputEnvelope
    set?: ZoneWhereUniqueInput | ZoneWhereUniqueInput[]
    disconnect?: ZoneWhereUniqueInput | ZoneWhereUniqueInput[]
    delete?: ZoneWhereUniqueInput | ZoneWhereUniqueInput[]
    connect?: ZoneWhereUniqueInput | ZoneWhereUniqueInput[]
    update?: ZoneUpdateWithWhereUniqueWithoutHallInput | ZoneUpdateWithWhereUniqueWithoutHallInput[]
    updateMany?: ZoneUpdateManyWithWhereWithoutHallInput | ZoneUpdateManyWithWhereWithoutHallInput[]
    deleteMany?: ZoneScalarWhereInput | ZoneScalarWhereInput[]
  }

  export type ZoneUncheckedUpdateManyWithoutHallNestedInput = {
    create?: XOR<ZoneCreateWithoutHallInput, ZoneUncheckedCreateWithoutHallInput> | ZoneCreateWithoutHallInput[] | ZoneUncheckedCreateWithoutHallInput[]
    connectOrCreate?: ZoneCreateOrConnectWithoutHallInput | ZoneCreateOrConnectWithoutHallInput[]
    upsert?: ZoneUpsertWithWhereUniqueWithoutHallInput | ZoneUpsertWithWhereUniqueWithoutHallInput[]
    createMany?: ZoneCreateManyHallInputEnvelope
    set?: ZoneWhereUniqueInput | ZoneWhereUniqueInput[]
    disconnect?: ZoneWhereUniqueInput | ZoneWhereUniqueInput[]
    delete?: ZoneWhereUniqueInput | ZoneWhereUniqueInput[]
    connect?: ZoneWhereUniqueInput | ZoneWhereUniqueInput[]
    update?: ZoneUpdateWithWhereUniqueWithoutHallInput | ZoneUpdateWithWhereUniqueWithoutHallInput[]
    updateMany?: ZoneUpdateManyWithWhereWithoutHallInput | ZoneUpdateManyWithWhereWithoutHallInput[]
    deleteMany?: ZoneScalarWhereInput | ZoneScalarWhereInput[]
  }

  export type HallCreateNestedOneWithoutZonesInput = {
    create?: XOR<HallCreateWithoutZonesInput, HallUncheckedCreateWithoutZonesInput>
    connectOrCreate?: HallCreateOrConnectWithoutZonesInput
    connect?: HallWhereUniqueInput
  }

  export type ZoneItemCreateNestedManyWithoutZoneInput = {
    create?: XOR<ZoneItemCreateWithoutZoneInput, ZoneItemUncheckedCreateWithoutZoneInput> | ZoneItemCreateWithoutZoneInput[] | ZoneItemUncheckedCreateWithoutZoneInput[]
    connectOrCreate?: ZoneItemCreateOrConnectWithoutZoneInput | ZoneItemCreateOrConnectWithoutZoneInput[]
    createMany?: ZoneItemCreateManyZoneInputEnvelope
    connect?: ZoneItemWhereUniqueInput | ZoneItemWhereUniqueInput[]
  }

  export type ZoneItemUncheckedCreateNestedManyWithoutZoneInput = {
    create?: XOR<ZoneItemCreateWithoutZoneInput, ZoneItemUncheckedCreateWithoutZoneInput> | ZoneItemCreateWithoutZoneInput[] | ZoneItemUncheckedCreateWithoutZoneInput[]
    connectOrCreate?: ZoneItemCreateOrConnectWithoutZoneInput | ZoneItemCreateOrConnectWithoutZoneInput[]
    createMany?: ZoneItemCreateManyZoneInputEnvelope
    connect?: ZoneItemWhereUniqueInput | ZoneItemWhereUniqueInput[]
  }

  export type EnumZoneTypeFieldUpdateOperationsInput = {
    set?: $Enums.ZoneType
  }

  export type HallUpdateOneRequiredWithoutZonesNestedInput = {
    create?: XOR<HallCreateWithoutZonesInput, HallUncheckedCreateWithoutZonesInput>
    connectOrCreate?: HallCreateOrConnectWithoutZonesInput
    upsert?: HallUpsertWithoutZonesInput
    connect?: HallWhereUniqueInput
    update?: XOR<XOR<HallUpdateToOneWithWhereWithoutZonesInput, HallUpdateWithoutZonesInput>, HallUncheckedUpdateWithoutZonesInput>
  }

  export type ZoneItemUpdateManyWithoutZoneNestedInput = {
    create?: XOR<ZoneItemCreateWithoutZoneInput, ZoneItemUncheckedCreateWithoutZoneInput> | ZoneItemCreateWithoutZoneInput[] | ZoneItemUncheckedCreateWithoutZoneInput[]
    connectOrCreate?: ZoneItemCreateOrConnectWithoutZoneInput | ZoneItemCreateOrConnectWithoutZoneInput[]
    upsert?: ZoneItemUpsertWithWhereUniqueWithoutZoneInput | ZoneItemUpsertWithWhereUniqueWithoutZoneInput[]
    createMany?: ZoneItemCreateManyZoneInputEnvelope
    set?: ZoneItemWhereUniqueInput | ZoneItemWhereUniqueInput[]
    disconnect?: ZoneItemWhereUniqueInput | ZoneItemWhereUniqueInput[]
    delete?: ZoneItemWhereUniqueInput | ZoneItemWhereUniqueInput[]
    connect?: ZoneItemWhereUniqueInput | ZoneItemWhereUniqueInput[]
    update?: ZoneItemUpdateWithWhereUniqueWithoutZoneInput | ZoneItemUpdateWithWhereUniqueWithoutZoneInput[]
    updateMany?: ZoneItemUpdateManyWithWhereWithoutZoneInput | ZoneItemUpdateManyWithWhereWithoutZoneInput[]
    deleteMany?: ZoneItemScalarWhereInput | ZoneItemScalarWhereInput[]
  }

  export type ZoneItemUncheckedUpdateManyWithoutZoneNestedInput = {
    create?: XOR<ZoneItemCreateWithoutZoneInput, ZoneItemUncheckedCreateWithoutZoneInput> | ZoneItemCreateWithoutZoneInput[] | ZoneItemUncheckedCreateWithoutZoneInput[]
    connectOrCreate?: ZoneItemCreateOrConnectWithoutZoneInput | ZoneItemCreateOrConnectWithoutZoneInput[]
    upsert?: ZoneItemUpsertWithWhereUniqueWithoutZoneInput | ZoneItemUpsertWithWhereUniqueWithoutZoneInput[]
    createMany?: ZoneItemCreateManyZoneInputEnvelope
    set?: ZoneItemWhereUniqueInput | ZoneItemWhereUniqueInput[]
    disconnect?: ZoneItemWhereUniqueInput | ZoneItemWhereUniqueInput[]
    delete?: ZoneItemWhereUniqueInput | ZoneItemWhereUniqueInput[]
    connect?: ZoneItemWhereUniqueInput | ZoneItemWhereUniqueInput[]
    update?: ZoneItemUpdateWithWhereUniqueWithoutZoneInput | ZoneItemUpdateWithWhereUniqueWithoutZoneInput[]
    updateMany?: ZoneItemUpdateManyWithWhereWithoutZoneInput | ZoneItemUpdateManyWithWhereWithoutZoneInput[]
    deleteMany?: ZoneItemScalarWhereInput | ZoneItemScalarWhereInput[]
  }

  export type ZoneItemCreatetimeSlotsInput = {
    set: string[]
  }

  export type ZoneItemCreatefeaturesInput = {
    set: string[]
  }

  export type ReservationCreateNestedManyWithoutZoneItemInput = {
    create?: XOR<ReservationCreateWithoutZoneItemInput, ReservationUncheckedCreateWithoutZoneItemInput> | ReservationCreateWithoutZoneItemInput[] | ReservationUncheckedCreateWithoutZoneItemInput[]
    connectOrCreate?: ReservationCreateOrConnectWithoutZoneItemInput | ReservationCreateOrConnectWithoutZoneItemInput[]
    createMany?: ReservationCreateManyZoneItemInputEnvelope
    connect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
  }

  export type ZoneCreateNestedOneWithoutItemsInput = {
    create?: XOR<ZoneCreateWithoutItemsInput, ZoneUncheckedCreateWithoutItemsInput>
    connectOrCreate?: ZoneCreateOrConnectWithoutItemsInput
    connect?: ZoneWhereUniqueInput
  }

  export type ReservationUncheckedCreateNestedManyWithoutZoneItemInput = {
    create?: XOR<ReservationCreateWithoutZoneItemInput, ReservationUncheckedCreateWithoutZoneItemInput> | ReservationCreateWithoutZoneItemInput[] | ReservationUncheckedCreateWithoutZoneItemInput[]
    connectOrCreate?: ReservationCreateOrConnectWithoutZoneItemInput | ReservationCreateOrConnectWithoutZoneItemInput[]
    createMany?: ReservationCreateManyZoneItemInputEnvelope
    connect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
  }

  export type EnumZoneItemTypeFieldUpdateOperationsInput = {
    set?: $Enums.ZoneItemType
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type ZoneItemUpdatetimeSlotsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ZoneItemUpdatefeaturesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ReservationUpdateManyWithoutZoneItemNestedInput = {
    create?: XOR<ReservationCreateWithoutZoneItemInput, ReservationUncheckedCreateWithoutZoneItemInput> | ReservationCreateWithoutZoneItemInput[] | ReservationUncheckedCreateWithoutZoneItemInput[]
    connectOrCreate?: ReservationCreateOrConnectWithoutZoneItemInput | ReservationCreateOrConnectWithoutZoneItemInput[]
    upsert?: ReservationUpsertWithWhereUniqueWithoutZoneItemInput | ReservationUpsertWithWhereUniqueWithoutZoneItemInput[]
    createMany?: ReservationCreateManyZoneItemInputEnvelope
    set?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    disconnect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    delete?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    connect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    update?: ReservationUpdateWithWhereUniqueWithoutZoneItemInput | ReservationUpdateWithWhereUniqueWithoutZoneItemInput[]
    updateMany?: ReservationUpdateManyWithWhereWithoutZoneItemInput | ReservationUpdateManyWithWhereWithoutZoneItemInput[]
    deleteMany?: ReservationScalarWhereInput | ReservationScalarWhereInput[]
  }

  export type ZoneUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<ZoneCreateWithoutItemsInput, ZoneUncheckedCreateWithoutItemsInput>
    connectOrCreate?: ZoneCreateOrConnectWithoutItemsInput
    upsert?: ZoneUpsertWithoutItemsInput
    connect?: ZoneWhereUniqueInput
    update?: XOR<XOR<ZoneUpdateToOneWithWhereWithoutItemsInput, ZoneUpdateWithoutItemsInput>, ZoneUncheckedUpdateWithoutItemsInput>
  }

  export type ReservationUncheckedUpdateManyWithoutZoneItemNestedInput = {
    create?: XOR<ReservationCreateWithoutZoneItemInput, ReservationUncheckedCreateWithoutZoneItemInput> | ReservationCreateWithoutZoneItemInput[] | ReservationUncheckedCreateWithoutZoneItemInput[]
    connectOrCreate?: ReservationCreateOrConnectWithoutZoneItemInput | ReservationCreateOrConnectWithoutZoneItemInput[]
    upsert?: ReservationUpsertWithWhereUniqueWithoutZoneItemInput | ReservationUpsertWithWhereUniqueWithoutZoneItemInput[]
    createMany?: ReservationCreateManyZoneItemInputEnvelope
    set?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    disconnect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    delete?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    connect?: ReservationWhereUniqueInput | ReservationWhereUniqueInput[]
    update?: ReservationUpdateWithWhereUniqueWithoutZoneItemInput | ReservationUpdateWithWhereUniqueWithoutZoneItemInput[]
    updateMany?: ReservationUpdateManyWithWhereWithoutZoneItemInput | ReservationUpdateManyWithWhereWithoutZoneItemInput[]
    deleteMany?: ReservationScalarWhereInput | ReservationScalarWhereInput[]
  }

  export type PaymentCreateNestedManyWithoutReservationInput = {
    create?: XOR<PaymentCreateWithoutReservationInput, PaymentUncheckedCreateWithoutReservationInput> | PaymentCreateWithoutReservationInput[] | PaymentUncheckedCreateWithoutReservationInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutReservationInput | PaymentCreateOrConnectWithoutReservationInput[]
    createMany?: PaymentCreateManyReservationInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type ZoneItemCreateNestedOneWithoutReservationsInput = {
    create?: XOR<ZoneItemCreateWithoutReservationsInput, ZoneItemUncheckedCreateWithoutReservationsInput>
    connectOrCreate?: ZoneItemCreateOrConnectWithoutReservationsInput
    connect?: ZoneItemWhereUniqueInput
  }

  export type PaymentUncheckedCreateNestedManyWithoutReservationInput = {
    create?: XOR<PaymentCreateWithoutReservationInput, PaymentUncheckedCreateWithoutReservationInput> | PaymentCreateWithoutReservationInput[] | PaymentUncheckedCreateWithoutReservationInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutReservationInput | PaymentCreateOrConnectWithoutReservationInput[]
    createMany?: PaymentCreateManyReservationInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type EnumReservationTypeFieldUpdateOperationsInput = {
    set?: $Enums.ReservationType
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type EnumReservationStatusFieldUpdateOperationsInput = {
    set?: $Enums.ReservationStatus
  }

  export type PaymentUpdateManyWithoutReservationNestedInput = {
    create?: XOR<PaymentCreateWithoutReservationInput, PaymentUncheckedCreateWithoutReservationInput> | PaymentCreateWithoutReservationInput[] | PaymentUncheckedCreateWithoutReservationInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutReservationInput | PaymentCreateOrConnectWithoutReservationInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutReservationInput | PaymentUpsertWithWhereUniqueWithoutReservationInput[]
    createMany?: PaymentCreateManyReservationInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutReservationInput | PaymentUpdateWithWhereUniqueWithoutReservationInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutReservationInput | PaymentUpdateManyWithWhereWithoutReservationInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type ZoneItemUpdateOneRequiredWithoutReservationsNestedInput = {
    create?: XOR<ZoneItemCreateWithoutReservationsInput, ZoneItemUncheckedCreateWithoutReservationsInput>
    connectOrCreate?: ZoneItemCreateOrConnectWithoutReservationsInput
    upsert?: ZoneItemUpsertWithoutReservationsInput
    connect?: ZoneItemWhereUniqueInput
    update?: XOR<XOR<ZoneItemUpdateToOneWithWhereWithoutReservationsInput, ZoneItemUpdateWithoutReservationsInput>, ZoneItemUncheckedUpdateWithoutReservationsInput>
  }

  export type PaymentUncheckedUpdateManyWithoutReservationNestedInput = {
    create?: XOR<PaymentCreateWithoutReservationInput, PaymentUncheckedCreateWithoutReservationInput> | PaymentCreateWithoutReservationInput[] | PaymentUncheckedCreateWithoutReservationInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutReservationInput | PaymentCreateOrConnectWithoutReservationInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutReservationInput | PaymentUpsertWithWhereUniqueWithoutReservationInput[]
    createMany?: PaymentCreateManyReservationInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutReservationInput | PaymentUpdateWithWhereUniqueWithoutReservationInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutReservationInput | PaymentUpdateManyWithWhereWithoutReservationInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type ReservationCreateNestedOneWithoutPaymentsInput = {
    create?: XOR<ReservationCreateWithoutPaymentsInput, ReservationUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: ReservationCreateOrConnectWithoutPaymentsInput
    connect?: ReservationWhereUniqueInput
  }

  export type ReservationUpdateOneRequiredWithoutPaymentsNestedInput = {
    create?: XOR<ReservationCreateWithoutPaymentsInput, ReservationUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: ReservationCreateOrConnectWithoutPaymentsInput
    upsert?: ReservationUpsertWithoutPaymentsInput
    connect?: ReservationWhereUniqueInput
    update?: XOR<XOR<ReservationUpdateToOneWithWhereWithoutPaymentsInput, ReservationUpdateWithoutPaymentsInput>, ReservationUncheckedUpdateWithoutPaymentsInput>
  }

  export type MenuCategoryCreateNestedManyWithoutMenuTypeInput = {
    create?: XOR<MenuCategoryCreateWithoutMenuTypeInput, MenuCategoryUncheckedCreateWithoutMenuTypeInput> | MenuCategoryCreateWithoutMenuTypeInput[] | MenuCategoryUncheckedCreateWithoutMenuTypeInput[]
    connectOrCreate?: MenuCategoryCreateOrConnectWithoutMenuTypeInput | MenuCategoryCreateOrConnectWithoutMenuTypeInput[]
    createMany?: MenuCategoryCreateManyMenuTypeInputEnvelope
    connect?: MenuCategoryWhereUniqueInput | MenuCategoryWhereUniqueInput[]
  }

  export type MenuCategoryUncheckedCreateNestedManyWithoutMenuTypeInput = {
    create?: XOR<MenuCategoryCreateWithoutMenuTypeInput, MenuCategoryUncheckedCreateWithoutMenuTypeInput> | MenuCategoryCreateWithoutMenuTypeInput[] | MenuCategoryUncheckedCreateWithoutMenuTypeInput[]
    connectOrCreate?: MenuCategoryCreateOrConnectWithoutMenuTypeInput | MenuCategoryCreateOrConnectWithoutMenuTypeInput[]
    createMany?: MenuCategoryCreateManyMenuTypeInputEnvelope
    connect?: MenuCategoryWhereUniqueInput | MenuCategoryWhereUniqueInput[]
  }

  export type MenuCategoryUpdateManyWithoutMenuTypeNestedInput = {
    create?: XOR<MenuCategoryCreateWithoutMenuTypeInput, MenuCategoryUncheckedCreateWithoutMenuTypeInput> | MenuCategoryCreateWithoutMenuTypeInput[] | MenuCategoryUncheckedCreateWithoutMenuTypeInput[]
    connectOrCreate?: MenuCategoryCreateOrConnectWithoutMenuTypeInput | MenuCategoryCreateOrConnectWithoutMenuTypeInput[]
    upsert?: MenuCategoryUpsertWithWhereUniqueWithoutMenuTypeInput | MenuCategoryUpsertWithWhereUniqueWithoutMenuTypeInput[]
    createMany?: MenuCategoryCreateManyMenuTypeInputEnvelope
    set?: MenuCategoryWhereUniqueInput | MenuCategoryWhereUniqueInput[]
    disconnect?: MenuCategoryWhereUniqueInput | MenuCategoryWhereUniqueInput[]
    delete?: MenuCategoryWhereUniqueInput | MenuCategoryWhereUniqueInput[]
    connect?: MenuCategoryWhereUniqueInput | MenuCategoryWhereUniqueInput[]
    update?: MenuCategoryUpdateWithWhereUniqueWithoutMenuTypeInput | MenuCategoryUpdateWithWhereUniqueWithoutMenuTypeInput[]
    updateMany?: MenuCategoryUpdateManyWithWhereWithoutMenuTypeInput | MenuCategoryUpdateManyWithWhereWithoutMenuTypeInput[]
    deleteMany?: MenuCategoryScalarWhereInput | MenuCategoryScalarWhereInput[]
  }

  export type MenuCategoryUncheckedUpdateManyWithoutMenuTypeNestedInput = {
    create?: XOR<MenuCategoryCreateWithoutMenuTypeInput, MenuCategoryUncheckedCreateWithoutMenuTypeInput> | MenuCategoryCreateWithoutMenuTypeInput[] | MenuCategoryUncheckedCreateWithoutMenuTypeInput[]
    connectOrCreate?: MenuCategoryCreateOrConnectWithoutMenuTypeInput | MenuCategoryCreateOrConnectWithoutMenuTypeInput[]
    upsert?: MenuCategoryUpsertWithWhereUniqueWithoutMenuTypeInput | MenuCategoryUpsertWithWhereUniqueWithoutMenuTypeInput[]
    createMany?: MenuCategoryCreateManyMenuTypeInputEnvelope
    set?: MenuCategoryWhereUniqueInput | MenuCategoryWhereUniqueInput[]
    disconnect?: MenuCategoryWhereUniqueInput | MenuCategoryWhereUniqueInput[]
    delete?: MenuCategoryWhereUniqueInput | MenuCategoryWhereUniqueInput[]
    connect?: MenuCategoryWhereUniqueInput | MenuCategoryWhereUniqueInput[]
    update?: MenuCategoryUpdateWithWhereUniqueWithoutMenuTypeInput | MenuCategoryUpdateWithWhereUniqueWithoutMenuTypeInput[]
    updateMany?: MenuCategoryUpdateManyWithWhereWithoutMenuTypeInput | MenuCategoryUpdateManyWithWhereWithoutMenuTypeInput[]
    deleteMany?: MenuCategoryScalarWhereInput | MenuCategoryScalarWhereInput[]
  }

  export type MenuTypeCreateNestedOneWithoutCategoriesInput = {
    create?: XOR<MenuTypeCreateWithoutCategoriesInput, MenuTypeUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: MenuTypeCreateOrConnectWithoutCategoriesInput
    connect?: MenuTypeWhereUniqueInput
  }

  export type MenuItemCreateNestedManyWithoutCategoryInput = {
    create?: XOR<MenuItemCreateWithoutCategoryInput, MenuItemUncheckedCreateWithoutCategoryInput> | MenuItemCreateWithoutCategoryInput[] | MenuItemUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: MenuItemCreateOrConnectWithoutCategoryInput | MenuItemCreateOrConnectWithoutCategoryInput[]
    createMany?: MenuItemCreateManyCategoryInputEnvelope
    connect?: MenuItemWhereUniqueInput | MenuItemWhereUniqueInput[]
  }

  export type MenuItemUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<MenuItemCreateWithoutCategoryInput, MenuItemUncheckedCreateWithoutCategoryInput> | MenuItemCreateWithoutCategoryInput[] | MenuItemUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: MenuItemCreateOrConnectWithoutCategoryInput | MenuItemCreateOrConnectWithoutCategoryInput[]
    createMany?: MenuItemCreateManyCategoryInputEnvelope
    connect?: MenuItemWhereUniqueInput | MenuItemWhereUniqueInput[]
  }

  export type MenuTypeUpdateOneRequiredWithoutCategoriesNestedInput = {
    create?: XOR<MenuTypeCreateWithoutCategoriesInput, MenuTypeUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: MenuTypeCreateOrConnectWithoutCategoriesInput
    upsert?: MenuTypeUpsertWithoutCategoriesInput
    connect?: MenuTypeWhereUniqueInput
    update?: XOR<XOR<MenuTypeUpdateToOneWithWhereWithoutCategoriesInput, MenuTypeUpdateWithoutCategoriesInput>, MenuTypeUncheckedUpdateWithoutCategoriesInput>
  }

  export type MenuItemUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<MenuItemCreateWithoutCategoryInput, MenuItemUncheckedCreateWithoutCategoryInput> | MenuItemCreateWithoutCategoryInput[] | MenuItemUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: MenuItemCreateOrConnectWithoutCategoryInput | MenuItemCreateOrConnectWithoutCategoryInput[]
    upsert?: MenuItemUpsertWithWhereUniqueWithoutCategoryInput | MenuItemUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: MenuItemCreateManyCategoryInputEnvelope
    set?: MenuItemWhereUniqueInput | MenuItemWhereUniqueInput[]
    disconnect?: MenuItemWhereUniqueInput | MenuItemWhereUniqueInput[]
    delete?: MenuItemWhereUniqueInput | MenuItemWhereUniqueInput[]
    connect?: MenuItemWhereUniqueInput | MenuItemWhereUniqueInput[]
    update?: MenuItemUpdateWithWhereUniqueWithoutCategoryInput | MenuItemUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: MenuItemUpdateManyWithWhereWithoutCategoryInput | MenuItemUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: MenuItemScalarWhereInput | MenuItemScalarWhereInput[]
  }

  export type MenuItemUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<MenuItemCreateWithoutCategoryInput, MenuItemUncheckedCreateWithoutCategoryInput> | MenuItemCreateWithoutCategoryInput[] | MenuItemUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: MenuItemCreateOrConnectWithoutCategoryInput | MenuItemCreateOrConnectWithoutCategoryInput[]
    upsert?: MenuItemUpsertWithWhereUniqueWithoutCategoryInput | MenuItemUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: MenuItemCreateManyCategoryInputEnvelope
    set?: MenuItemWhereUniqueInput | MenuItemWhereUniqueInput[]
    disconnect?: MenuItemWhereUniqueInput | MenuItemWhereUniqueInput[]
    delete?: MenuItemWhereUniqueInput | MenuItemWhereUniqueInput[]
    connect?: MenuItemWhereUniqueInput | MenuItemWhereUniqueInput[]
    update?: MenuItemUpdateWithWhereUniqueWithoutCategoryInput | MenuItemUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: MenuItemUpdateManyWithWhereWithoutCategoryInput | MenuItemUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: MenuItemScalarWhereInput | MenuItemScalarWhereInput[]
  }

  export type MenuCategoryCreateNestedOneWithoutItemsInput = {
    create?: XOR<MenuCategoryCreateWithoutItemsInput, MenuCategoryUncheckedCreateWithoutItemsInput>
    connectOrCreate?: MenuCategoryCreateOrConnectWithoutItemsInput
    connect?: MenuCategoryWhereUniqueInput
  }

  export type MenuCategoryUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<MenuCategoryCreateWithoutItemsInput, MenuCategoryUncheckedCreateWithoutItemsInput>
    connectOrCreate?: MenuCategoryCreateOrConnectWithoutItemsInput
    upsert?: MenuCategoryUpsertWithoutItemsInput
    connect?: MenuCategoryWhereUniqueInput
    update?: XOR<XOR<MenuCategoryUpdateToOneWithWhereWithoutItemsInput, MenuCategoryUpdateWithoutItemsInput>, MenuCategoryUncheckedUpdateWithoutItemsInput>
  }

  export type HookahCreatefeaturesInput = {
    set: string[]
  }

  export type HookahUpdatefeaturesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type EnumBanquetRequestStatusFieldUpdateOperationsInput = {
    set?: $Enums.BanquetRequestStatus
  }

  export type ordersCreateNestedOneWithoutOrder_itemsInput = {
    create?: XOR<ordersCreateWithoutOrder_itemsInput, ordersUncheckedCreateWithoutOrder_itemsInput>
    connectOrCreate?: ordersCreateOrConnectWithoutOrder_itemsInput
    connect?: ordersWhereUniqueInput
  }

  export type user_ticketsCreateNestedOneWithoutOrder_itemsInput = {
    create?: XOR<user_ticketsCreateWithoutOrder_itemsInput, user_ticketsUncheckedCreateWithoutOrder_itemsInput>
    connectOrCreate?: user_ticketsCreateOrConnectWithoutOrder_itemsInput
    connect?: user_ticketsWhereUniqueInput
  }

  export type ordersUpdateOneRequiredWithoutOrder_itemsNestedInput = {
    create?: XOR<ordersCreateWithoutOrder_itemsInput, ordersUncheckedCreateWithoutOrder_itemsInput>
    connectOrCreate?: ordersCreateOrConnectWithoutOrder_itemsInput
    upsert?: ordersUpsertWithoutOrder_itemsInput
    connect?: ordersWhereUniqueInput
    update?: XOR<XOR<ordersUpdateToOneWithWhereWithoutOrder_itemsInput, ordersUpdateWithoutOrder_itemsInput>, ordersUncheckedUpdateWithoutOrder_itemsInput>
  }

  export type user_ticketsUpdateOneRequiredWithoutOrder_itemsNestedInput = {
    create?: XOR<user_ticketsCreateWithoutOrder_itemsInput, user_ticketsUncheckedCreateWithoutOrder_itemsInput>
    connectOrCreate?: user_ticketsCreateOrConnectWithoutOrder_itemsInput
    upsert?: user_ticketsUpsertWithoutOrder_itemsInput
    connect?: user_ticketsWhereUniqueInput
    update?: XOR<XOR<user_ticketsUpdateToOneWithWhereWithoutOrder_itemsInput, user_ticketsUpdateWithoutOrder_itemsInput>, user_ticketsUncheckedUpdateWithoutOrder_itemsInput>
  }

  export type order_itemsCreateNestedManyWithoutOrdersInput = {
    create?: XOR<order_itemsCreateWithoutOrdersInput, order_itemsUncheckedCreateWithoutOrdersInput> | order_itemsCreateWithoutOrdersInput[] | order_itemsUncheckedCreateWithoutOrdersInput[]
    connectOrCreate?: order_itemsCreateOrConnectWithoutOrdersInput | order_itemsCreateOrConnectWithoutOrdersInput[]
    createMany?: order_itemsCreateManyOrdersInputEnvelope
    connect?: order_itemsWhereUniqueInput | order_itemsWhereUniqueInput[]
  }

  export type usersCreateNestedOneWithoutOrdersInput = {
    create?: XOR<usersCreateWithoutOrdersInput, usersUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: usersCreateOrConnectWithoutOrdersInput
    connect?: usersWhereUniqueInput
  }

  export type user_ticketsCreateNestedManyWithoutOrdersInput = {
    create?: XOR<user_ticketsCreateWithoutOrdersInput, user_ticketsUncheckedCreateWithoutOrdersInput> | user_ticketsCreateWithoutOrdersInput[] | user_ticketsUncheckedCreateWithoutOrdersInput[]
    connectOrCreate?: user_ticketsCreateOrConnectWithoutOrdersInput | user_ticketsCreateOrConnectWithoutOrdersInput[]
    connect?: user_ticketsWhereUniqueInput | user_ticketsWhereUniqueInput[]
  }

  export type order_itemsUncheckedCreateNestedManyWithoutOrdersInput = {
    create?: XOR<order_itemsCreateWithoutOrdersInput, order_itemsUncheckedCreateWithoutOrdersInput> | order_itemsCreateWithoutOrdersInput[] | order_itemsUncheckedCreateWithoutOrdersInput[]
    connectOrCreate?: order_itemsCreateOrConnectWithoutOrdersInput | order_itemsCreateOrConnectWithoutOrdersInput[]
    createMany?: order_itemsCreateManyOrdersInputEnvelope
    connect?: order_itemsWhereUniqueInput | order_itemsWhereUniqueInput[]
  }

  export type user_ticketsUncheckedCreateNestedManyWithoutOrdersInput = {
    create?: XOR<user_ticketsCreateWithoutOrdersInput, user_ticketsUncheckedCreateWithoutOrdersInput> | user_ticketsCreateWithoutOrdersInput[] | user_ticketsUncheckedCreateWithoutOrdersInput[]
    connectOrCreate?: user_ticketsCreateOrConnectWithoutOrdersInput | user_ticketsCreateOrConnectWithoutOrdersInput[]
    connect?: user_ticketsWhereUniqueInput | user_ticketsWhereUniqueInput[]
  }

  export type EnumOrderStatusFieldUpdateOperationsInput = {
    set?: $Enums.OrderStatus
  }

  export type order_itemsUpdateManyWithoutOrdersNestedInput = {
    create?: XOR<order_itemsCreateWithoutOrdersInput, order_itemsUncheckedCreateWithoutOrdersInput> | order_itemsCreateWithoutOrdersInput[] | order_itemsUncheckedCreateWithoutOrdersInput[]
    connectOrCreate?: order_itemsCreateOrConnectWithoutOrdersInput | order_itemsCreateOrConnectWithoutOrdersInput[]
    upsert?: order_itemsUpsertWithWhereUniqueWithoutOrdersInput | order_itemsUpsertWithWhereUniqueWithoutOrdersInput[]
    createMany?: order_itemsCreateManyOrdersInputEnvelope
    set?: order_itemsWhereUniqueInput | order_itemsWhereUniqueInput[]
    disconnect?: order_itemsWhereUniqueInput | order_itemsWhereUniqueInput[]
    delete?: order_itemsWhereUniqueInput | order_itemsWhereUniqueInput[]
    connect?: order_itemsWhereUniqueInput | order_itemsWhereUniqueInput[]
    update?: order_itemsUpdateWithWhereUniqueWithoutOrdersInput | order_itemsUpdateWithWhereUniqueWithoutOrdersInput[]
    updateMany?: order_itemsUpdateManyWithWhereWithoutOrdersInput | order_itemsUpdateManyWithWhereWithoutOrdersInput[]
    deleteMany?: order_itemsScalarWhereInput | order_itemsScalarWhereInput[]
  }

  export type usersUpdateOneWithoutOrdersNestedInput = {
    create?: XOR<usersCreateWithoutOrdersInput, usersUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: usersCreateOrConnectWithoutOrdersInput
    upsert?: usersUpsertWithoutOrdersInput
    disconnect?: usersWhereInput | boolean
    delete?: usersWhereInput | boolean
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutOrdersInput, usersUpdateWithoutOrdersInput>, usersUncheckedUpdateWithoutOrdersInput>
  }

  export type user_ticketsUpdateManyWithoutOrdersNestedInput = {
    create?: XOR<user_ticketsCreateWithoutOrdersInput, user_ticketsUncheckedCreateWithoutOrdersInput> | user_ticketsCreateWithoutOrdersInput[] | user_ticketsUncheckedCreateWithoutOrdersInput[]
    connectOrCreate?: user_ticketsCreateOrConnectWithoutOrdersInput | user_ticketsCreateOrConnectWithoutOrdersInput[]
    upsert?: user_ticketsUpsertWithWhereUniqueWithoutOrdersInput | user_ticketsUpsertWithWhereUniqueWithoutOrdersInput[]
    set?: user_ticketsWhereUniqueInput | user_ticketsWhereUniqueInput[]
    disconnect?: user_ticketsWhereUniqueInput | user_ticketsWhereUniqueInput[]
    delete?: user_ticketsWhereUniqueInput | user_ticketsWhereUniqueInput[]
    connect?: user_ticketsWhereUniqueInput | user_ticketsWhereUniqueInput[]
    update?: user_ticketsUpdateWithWhereUniqueWithoutOrdersInput | user_ticketsUpdateWithWhereUniqueWithoutOrdersInput[]
    updateMany?: user_ticketsUpdateManyWithWhereWithoutOrdersInput | user_ticketsUpdateManyWithWhereWithoutOrdersInput[]
    deleteMany?: user_ticketsScalarWhereInput | user_ticketsScalarWhereInput[]
  }

  export type order_itemsUncheckedUpdateManyWithoutOrdersNestedInput = {
    create?: XOR<order_itemsCreateWithoutOrdersInput, order_itemsUncheckedCreateWithoutOrdersInput> | order_itemsCreateWithoutOrdersInput[] | order_itemsUncheckedCreateWithoutOrdersInput[]
    connectOrCreate?: order_itemsCreateOrConnectWithoutOrdersInput | order_itemsCreateOrConnectWithoutOrdersInput[]
    upsert?: order_itemsUpsertWithWhereUniqueWithoutOrdersInput | order_itemsUpsertWithWhereUniqueWithoutOrdersInput[]
    createMany?: order_itemsCreateManyOrdersInputEnvelope
    set?: order_itemsWhereUniqueInput | order_itemsWhereUniqueInput[]
    disconnect?: order_itemsWhereUniqueInput | order_itemsWhereUniqueInput[]
    delete?: order_itemsWhereUniqueInput | order_itemsWhereUniqueInput[]
    connect?: order_itemsWhereUniqueInput | order_itemsWhereUniqueInput[]
    update?: order_itemsUpdateWithWhereUniqueWithoutOrdersInput | order_itemsUpdateWithWhereUniqueWithoutOrdersInput[]
    updateMany?: order_itemsUpdateManyWithWhereWithoutOrdersInput | order_itemsUpdateManyWithWhereWithoutOrdersInput[]
    deleteMany?: order_itemsScalarWhereInput | order_itemsScalarWhereInput[]
  }

  export type user_ticketsUncheckedUpdateManyWithoutOrdersNestedInput = {
    create?: XOR<user_ticketsCreateWithoutOrdersInput, user_ticketsUncheckedCreateWithoutOrdersInput> | user_ticketsCreateWithoutOrdersInput[] | user_ticketsUncheckedCreateWithoutOrdersInput[]
    connectOrCreate?: user_ticketsCreateOrConnectWithoutOrdersInput | user_ticketsCreateOrConnectWithoutOrdersInput[]
    upsert?: user_ticketsUpsertWithWhereUniqueWithoutOrdersInput | user_ticketsUpsertWithWhereUniqueWithoutOrdersInput[]
    set?: user_ticketsWhereUniqueInput | user_ticketsWhereUniqueInput[]
    disconnect?: user_ticketsWhereUniqueInput | user_ticketsWhereUniqueInput[]
    delete?: user_ticketsWhereUniqueInput | user_ticketsWhereUniqueInput[]
    connect?: user_ticketsWhereUniqueInput | user_ticketsWhereUniqueInput[]
    update?: user_ticketsUpdateWithWhereUniqueWithoutOrdersInput | user_ticketsUpdateWithWhereUniqueWithoutOrdersInput[]
    updateMany?: user_ticketsUpdateManyWithWhereWithoutOrdersInput | user_ticketsUpdateManyWithWhereWithoutOrdersInput[]
    deleteMany?: user_ticketsScalarWhereInput | user_ticketsScalarWhereInput[]
  }

  export type refundsCreateNestedOneWithoutRefund_ticketsInput = {
    create?: XOR<refundsCreateWithoutRefund_ticketsInput, refundsUncheckedCreateWithoutRefund_ticketsInput>
    connectOrCreate?: refundsCreateOrConnectWithoutRefund_ticketsInput
    connect?: refundsWhereUniqueInput
  }

  export type user_ticketsCreateNestedOneWithoutRefund_ticketsInput = {
    create?: XOR<user_ticketsCreateWithoutRefund_ticketsInput, user_ticketsUncheckedCreateWithoutRefund_ticketsInput>
    connectOrCreate?: user_ticketsCreateOrConnectWithoutRefund_ticketsInput
    connect?: user_ticketsWhereUniqueInput
  }

  export type refundsUpdateOneRequiredWithoutRefund_ticketsNestedInput = {
    create?: XOR<refundsCreateWithoutRefund_ticketsInput, refundsUncheckedCreateWithoutRefund_ticketsInput>
    connectOrCreate?: refundsCreateOrConnectWithoutRefund_ticketsInput
    upsert?: refundsUpsertWithoutRefund_ticketsInput
    connect?: refundsWhereUniqueInput
    update?: XOR<XOR<refundsUpdateToOneWithWhereWithoutRefund_ticketsInput, refundsUpdateWithoutRefund_ticketsInput>, refundsUncheckedUpdateWithoutRefund_ticketsInput>
  }

  export type user_ticketsUpdateOneRequiredWithoutRefund_ticketsNestedInput = {
    create?: XOR<user_ticketsCreateWithoutRefund_ticketsInput, user_ticketsUncheckedCreateWithoutRefund_ticketsInput>
    connectOrCreate?: user_ticketsCreateOrConnectWithoutRefund_ticketsInput
    upsert?: user_ticketsUpsertWithoutRefund_ticketsInput
    connect?: user_ticketsWhereUniqueInput
    update?: XOR<XOR<user_ticketsUpdateToOneWithWhereWithoutRefund_ticketsInput, user_ticketsUpdateWithoutRefund_ticketsInput>, user_ticketsUncheckedUpdateWithoutRefund_ticketsInput>
  }

  export type refund_ticketsCreateNestedManyWithoutRefundsInput = {
    create?: XOR<refund_ticketsCreateWithoutRefundsInput, refund_ticketsUncheckedCreateWithoutRefundsInput> | refund_ticketsCreateWithoutRefundsInput[] | refund_ticketsUncheckedCreateWithoutRefundsInput[]
    connectOrCreate?: refund_ticketsCreateOrConnectWithoutRefundsInput | refund_ticketsCreateOrConnectWithoutRefundsInput[]
    createMany?: refund_ticketsCreateManyRefundsInputEnvelope
    connect?: refund_ticketsWhereUniqueInput | refund_ticketsWhereUniqueInput[]
  }

  export type usersCreateNestedOneWithoutRefundsInput = {
    create?: XOR<usersCreateWithoutRefundsInput, usersUncheckedCreateWithoutRefundsInput>
    connectOrCreate?: usersCreateOrConnectWithoutRefundsInput
    connect?: usersWhereUniqueInput
  }

  export type user_ticketsCreateNestedManyWithoutRefundsInput = {
    create?: XOR<user_ticketsCreateWithoutRefundsInput, user_ticketsUncheckedCreateWithoutRefundsInput> | user_ticketsCreateWithoutRefundsInput[] | user_ticketsUncheckedCreateWithoutRefundsInput[]
    connectOrCreate?: user_ticketsCreateOrConnectWithoutRefundsInput | user_ticketsCreateOrConnectWithoutRefundsInput[]
    connect?: user_ticketsWhereUniqueInput | user_ticketsWhereUniqueInput[]
  }

  export type refund_ticketsUncheckedCreateNestedManyWithoutRefundsInput = {
    create?: XOR<refund_ticketsCreateWithoutRefundsInput, refund_ticketsUncheckedCreateWithoutRefundsInput> | refund_ticketsCreateWithoutRefundsInput[] | refund_ticketsUncheckedCreateWithoutRefundsInput[]
    connectOrCreate?: refund_ticketsCreateOrConnectWithoutRefundsInput | refund_ticketsCreateOrConnectWithoutRefundsInput[]
    createMany?: refund_ticketsCreateManyRefundsInputEnvelope
    connect?: refund_ticketsWhereUniqueInput | refund_ticketsWhereUniqueInput[]
  }

  export type user_ticketsUncheckedCreateNestedManyWithoutRefundsInput = {
    create?: XOR<user_ticketsCreateWithoutRefundsInput, user_ticketsUncheckedCreateWithoutRefundsInput> | user_ticketsCreateWithoutRefundsInput[] | user_ticketsUncheckedCreateWithoutRefundsInput[]
    connectOrCreate?: user_ticketsCreateOrConnectWithoutRefundsInput | user_ticketsCreateOrConnectWithoutRefundsInput[]
    connect?: user_ticketsWhereUniqueInput | user_ticketsWhereUniqueInput[]
  }

  export type refund_ticketsUpdateManyWithoutRefundsNestedInput = {
    create?: XOR<refund_ticketsCreateWithoutRefundsInput, refund_ticketsUncheckedCreateWithoutRefundsInput> | refund_ticketsCreateWithoutRefundsInput[] | refund_ticketsUncheckedCreateWithoutRefundsInput[]
    connectOrCreate?: refund_ticketsCreateOrConnectWithoutRefundsInput | refund_ticketsCreateOrConnectWithoutRefundsInput[]
    upsert?: refund_ticketsUpsertWithWhereUniqueWithoutRefundsInput | refund_ticketsUpsertWithWhereUniqueWithoutRefundsInput[]
    createMany?: refund_ticketsCreateManyRefundsInputEnvelope
    set?: refund_ticketsWhereUniqueInput | refund_ticketsWhereUniqueInput[]
    disconnect?: refund_ticketsWhereUniqueInput | refund_ticketsWhereUniqueInput[]
    delete?: refund_ticketsWhereUniqueInput | refund_ticketsWhereUniqueInput[]
    connect?: refund_ticketsWhereUniqueInput | refund_ticketsWhereUniqueInput[]
    update?: refund_ticketsUpdateWithWhereUniqueWithoutRefundsInput | refund_ticketsUpdateWithWhereUniqueWithoutRefundsInput[]
    updateMany?: refund_ticketsUpdateManyWithWhereWithoutRefundsInput | refund_ticketsUpdateManyWithWhereWithoutRefundsInput[]
    deleteMany?: refund_ticketsScalarWhereInput | refund_ticketsScalarWhereInput[]
  }

  export type usersUpdateOneWithoutRefundsNestedInput = {
    create?: XOR<usersCreateWithoutRefundsInput, usersUncheckedCreateWithoutRefundsInput>
    connectOrCreate?: usersCreateOrConnectWithoutRefundsInput
    upsert?: usersUpsertWithoutRefundsInput
    disconnect?: usersWhereInput | boolean
    delete?: usersWhereInput | boolean
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutRefundsInput, usersUpdateWithoutRefundsInput>, usersUncheckedUpdateWithoutRefundsInput>
  }

  export type user_ticketsUpdateManyWithoutRefundsNestedInput = {
    create?: XOR<user_ticketsCreateWithoutRefundsInput, user_ticketsUncheckedCreateWithoutRefundsInput> | user_ticketsCreateWithoutRefundsInput[] | user_ticketsUncheckedCreateWithoutRefundsInput[]
    connectOrCreate?: user_ticketsCreateOrConnectWithoutRefundsInput | user_ticketsCreateOrConnectWithoutRefundsInput[]
    upsert?: user_ticketsUpsertWithWhereUniqueWithoutRefundsInput | user_ticketsUpsertWithWhereUniqueWithoutRefundsInput[]
    set?: user_ticketsWhereUniqueInput | user_ticketsWhereUniqueInput[]
    disconnect?: user_ticketsWhereUniqueInput | user_ticketsWhereUniqueInput[]
    delete?: user_ticketsWhereUniqueInput | user_ticketsWhereUniqueInput[]
    connect?: user_ticketsWhereUniqueInput | user_ticketsWhereUniqueInput[]
    update?: user_ticketsUpdateWithWhereUniqueWithoutRefundsInput | user_ticketsUpdateWithWhereUniqueWithoutRefundsInput[]
    updateMany?: user_ticketsUpdateManyWithWhereWithoutRefundsInput | user_ticketsUpdateManyWithWhereWithoutRefundsInput[]
    deleteMany?: user_ticketsScalarWhereInput | user_ticketsScalarWhereInput[]
  }

  export type refund_ticketsUncheckedUpdateManyWithoutRefundsNestedInput = {
    create?: XOR<refund_ticketsCreateWithoutRefundsInput, refund_ticketsUncheckedCreateWithoutRefundsInput> | refund_ticketsCreateWithoutRefundsInput[] | refund_ticketsUncheckedCreateWithoutRefundsInput[]
    connectOrCreate?: refund_ticketsCreateOrConnectWithoutRefundsInput | refund_ticketsCreateOrConnectWithoutRefundsInput[]
    upsert?: refund_ticketsUpsertWithWhereUniqueWithoutRefundsInput | refund_ticketsUpsertWithWhereUniqueWithoutRefundsInput[]
    createMany?: refund_ticketsCreateManyRefundsInputEnvelope
    set?: refund_ticketsWhereUniqueInput | refund_ticketsWhereUniqueInput[]
    disconnect?: refund_ticketsWhereUniqueInput | refund_ticketsWhereUniqueInput[]
    delete?: refund_ticketsWhereUniqueInput | refund_ticketsWhereUniqueInput[]
    connect?: refund_ticketsWhereUniqueInput | refund_ticketsWhereUniqueInput[]
    update?: refund_ticketsUpdateWithWhereUniqueWithoutRefundsInput | refund_ticketsUpdateWithWhereUniqueWithoutRefundsInput[]
    updateMany?: refund_ticketsUpdateManyWithWhereWithoutRefundsInput | refund_ticketsUpdateManyWithWhereWithoutRefundsInput[]
    deleteMany?: refund_ticketsScalarWhereInput | refund_ticketsScalarWhereInput[]
  }

  export type user_ticketsUncheckedUpdateManyWithoutRefundsNestedInput = {
    create?: XOR<user_ticketsCreateWithoutRefundsInput, user_ticketsUncheckedCreateWithoutRefundsInput> | user_ticketsCreateWithoutRefundsInput[] | user_ticketsUncheckedCreateWithoutRefundsInput[]
    connectOrCreate?: user_ticketsCreateOrConnectWithoutRefundsInput | user_ticketsCreateOrConnectWithoutRefundsInput[]
    upsert?: user_ticketsUpsertWithWhereUniqueWithoutRefundsInput | user_ticketsUpsertWithWhereUniqueWithoutRefundsInput[]
    set?: user_ticketsWhereUniqueInput | user_ticketsWhereUniqueInput[]
    disconnect?: user_ticketsWhereUniqueInput | user_ticketsWhereUniqueInput[]
    delete?: user_ticketsWhereUniqueInput | user_ticketsWhereUniqueInput[]
    connect?: user_ticketsWhereUniqueInput | user_ticketsWhereUniqueInput[]
    update?: user_ticketsUpdateWithWhereUniqueWithoutRefundsInput | user_ticketsUpdateWithWhereUniqueWithoutRefundsInput[]
    updateMany?: user_ticketsUpdateManyWithWhereWithoutRefundsInput | user_ticketsUpdateManyWithWhereWithoutRefundsInput[]
    deleteMany?: user_ticketsScalarWhereInput | user_ticketsScalarWhereInput[]
  }

  export type usersCreateNestedOneWithoutTicketsInput = {
    create?: XOR<usersCreateWithoutTicketsInput, usersUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: usersCreateOrConnectWithoutTicketsInput
    connect?: usersWhereUniqueInput
  }

  export type user_ticketsCreateNestedManyWithoutTicketsInput = {
    create?: XOR<user_ticketsCreateWithoutTicketsInput, user_ticketsUncheckedCreateWithoutTicketsInput> | user_ticketsCreateWithoutTicketsInput[] | user_ticketsUncheckedCreateWithoutTicketsInput[]
    connectOrCreate?: user_ticketsCreateOrConnectWithoutTicketsInput | user_ticketsCreateOrConnectWithoutTicketsInput[]
    createMany?: user_ticketsCreateManyTicketsInputEnvelope
    connect?: user_ticketsWhereUniqueInput | user_ticketsWhereUniqueInput[]
  }

  export type user_ticketsUncheckedCreateNestedManyWithoutTicketsInput = {
    create?: XOR<user_ticketsCreateWithoutTicketsInput, user_ticketsUncheckedCreateWithoutTicketsInput> | user_ticketsCreateWithoutTicketsInput[] | user_ticketsUncheckedCreateWithoutTicketsInput[]
    connectOrCreate?: user_ticketsCreateOrConnectWithoutTicketsInput | user_ticketsCreateOrConnectWithoutTicketsInput[]
    createMany?: user_ticketsCreateManyTicketsInputEnvelope
    connect?: user_ticketsWhereUniqueInput | user_ticketsWhereUniqueInput[]
  }

  export type usersUpdateOneWithoutTicketsNestedInput = {
    create?: XOR<usersCreateWithoutTicketsInput, usersUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: usersCreateOrConnectWithoutTicketsInput
    upsert?: usersUpsertWithoutTicketsInput
    disconnect?: usersWhereInput | boolean
    delete?: usersWhereInput | boolean
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutTicketsInput, usersUpdateWithoutTicketsInput>, usersUncheckedUpdateWithoutTicketsInput>
  }

  export type user_ticketsUpdateManyWithoutTicketsNestedInput = {
    create?: XOR<user_ticketsCreateWithoutTicketsInput, user_ticketsUncheckedCreateWithoutTicketsInput> | user_ticketsCreateWithoutTicketsInput[] | user_ticketsUncheckedCreateWithoutTicketsInput[]
    connectOrCreate?: user_ticketsCreateOrConnectWithoutTicketsInput | user_ticketsCreateOrConnectWithoutTicketsInput[]
    upsert?: user_ticketsUpsertWithWhereUniqueWithoutTicketsInput | user_ticketsUpsertWithWhereUniqueWithoutTicketsInput[]
    createMany?: user_ticketsCreateManyTicketsInputEnvelope
    set?: user_ticketsWhereUniqueInput | user_ticketsWhereUniqueInput[]
    disconnect?: user_ticketsWhereUniqueInput | user_ticketsWhereUniqueInput[]
    delete?: user_ticketsWhereUniqueInput | user_ticketsWhereUniqueInput[]
    connect?: user_ticketsWhereUniqueInput | user_ticketsWhereUniqueInput[]
    update?: user_ticketsUpdateWithWhereUniqueWithoutTicketsInput | user_ticketsUpdateWithWhereUniqueWithoutTicketsInput[]
    updateMany?: user_ticketsUpdateManyWithWhereWithoutTicketsInput | user_ticketsUpdateManyWithWhereWithoutTicketsInput[]
    deleteMany?: user_ticketsScalarWhereInput | user_ticketsScalarWhereInput[]
  }

  export type user_ticketsUncheckedUpdateManyWithoutTicketsNestedInput = {
    create?: XOR<user_ticketsCreateWithoutTicketsInput, user_ticketsUncheckedCreateWithoutTicketsInput> | user_ticketsCreateWithoutTicketsInput[] | user_ticketsUncheckedCreateWithoutTicketsInput[]
    connectOrCreate?: user_ticketsCreateOrConnectWithoutTicketsInput | user_ticketsCreateOrConnectWithoutTicketsInput[]
    upsert?: user_ticketsUpsertWithWhereUniqueWithoutTicketsInput | user_ticketsUpsertWithWhereUniqueWithoutTicketsInput[]
    createMany?: user_ticketsCreateManyTicketsInputEnvelope
    set?: user_ticketsWhereUniqueInput | user_ticketsWhereUniqueInput[]
    disconnect?: user_ticketsWhereUniqueInput | user_ticketsWhereUniqueInput[]
    delete?: user_ticketsWhereUniqueInput | user_ticketsWhereUniqueInput[]
    connect?: user_ticketsWhereUniqueInput | user_ticketsWhereUniqueInput[]
    update?: user_ticketsUpdateWithWhereUniqueWithoutTicketsInput | user_ticketsUpdateWithWhereUniqueWithoutTicketsInput[]
    updateMany?: user_ticketsUpdateManyWithWhereWithoutTicketsInput | user_ticketsUpdateManyWithWhereWithoutTicketsInput[]
    deleteMany?: user_ticketsScalarWhereInput | user_ticketsScalarWhereInput[]
  }

  export type order_itemsCreateNestedOneWithoutUser_ticketsInput = {
    create?: XOR<order_itemsCreateWithoutUser_ticketsInput, order_itemsUncheckedCreateWithoutUser_ticketsInput>
    connectOrCreate?: order_itemsCreateOrConnectWithoutUser_ticketsInput
    connect?: order_itemsWhereUniqueInput
  }

  export type refund_ticketsCreateNestedManyWithoutUser_ticketsInput = {
    create?: XOR<refund_ticketsCreateWithoutUser_ticketsInput, refund_ticketsUncheckedCreateWithoutUser_ticketsInput> | refund_ticketsCreateWithoutUser_ticketsInput[] | refund_ticketsUncheckedCreateWithoutUser_ticketsInput[]
    connectOrCreate?: refund_ticketsCreateOrConnectWithoutUser_ticketsInput | refund_ticketsCreateOrConnectWithoutUser_ticketsInput[]
    createMany?: refund_ticketsCreateManyUser_ticketsInputEnvelope
    connect?: refund_ticketsWhereUniqueInput | refund_ticketsWhereUniqueInput[]
  }

  export type ticketsCreateNestedOneWithoutUser_ticketsInput = {
    create?: XOR<ticketsCreateWithoutUser_ticketsInput, ticketsUncheckedCreateWithoutUser_ticketsInput>
    connectOrCreate?: ticketsCreateOrConnectWithoutUser_ticketsInput
    connect?: ticketsWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutUser_ticketsInput = {
    create?: XOR<usersCreateWithoutUser_ticketsInput, usersUncheckedCreateWithoutUser_ticketsInput>
    connectOrCreate?: usersCreateOrConnectWithoutUser_ticketsInput
    connect?: usersWhereUniqueInput
  }

  export type ordersCreateNestedManyWithoutUser_ticketsInput = {
    create?: XOR<ordersCreateWithoutUser_ticketsInput, ordersUncheckedCreateWithoutUser_ticketsInput> | ordersCreateWithoutUser_ticketsInput[] | ordersUncheckedCreateWithoutUser_ticketsInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutUser_ticketsInput | ordersCreateOrConnectWithoutUser_ticketsInput[]
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
  }

  export type refundsCreateNestedManyWithoutUser_ticketsInput = {
    create?: XOR<refundsCreateWithoutUser_ticketsInput, refundsUncheckedCreateWithoutUser_ticketsInput> | refundsCreateWithoutUser_ticketsInput[] | refundsUncheckedCreateWithoutUser_ticketsInput[]
    connectOrCreate?: refundsCreateOrConnectWithoutUser_ticketsInput | refundsCreateOrConnectWithoutUser_ticketsInput[]
    connect?: refundsWhereUniqueInput | refundsWhereUniqueInput[]
  }

  export type order_itemsUncheckedCreateNestedOneWithoutUser_ticketsInput = {
    create?: XOR<order_itemsCreateWithoutUser_ticketsInput, order_itemsUncheckedCreateWithoutUser_ticketsInput>
    connectOrCreate?: order_itemsCreateOrConnectWithoutUser_ticketsInput
    connect?: order_itemsWhereUniqueInput
  }

  export type refund_ticketsUncheckedCreateNestedManyWithoutUser_ticketsInput = {
    create?: XOR<refund_ticketsCreateWithoutUser_ticketsInput, refund_ticketsUncheckedCreateWithoutUser_ticketsInput> | refund_ticketsCreateWithoutUser_ticketsInput[] | refund_ticketsUncheckedCreateWithoutUser_ticketsInput[]
    connectOrCreate?: refund_ticketsCreateOrConnectWithoutUser_ticketsInput | refund_ticketsCreateOrConnectWithoutUser_ticketsInput[]
    createMany?: refund_ticketsCreateManyUser_ticketsInputEnvelope
    connect?: refund_ticketsWhereUniqueInput | refund_ticketsWhereUniqueInput[]
  }

  export type ordersUncheckedCreateNestedManyWithoutUser_ticketsInput = {
    create?: XOR<ordersCreateWithoutUser_ticketsInput, ordersUncheckedCreateWithoutUser_ticketsInput> | ordersCreateWithoutUser_ticketsInput[] | ordersUncheckedCreateWithoutUser_ticketsInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutUser_ticketsInput | ordersCreateOrConnectWithoutUser_ticketsInput[]
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
  }

  export type refundsUncheckedCreateNestedManyWithoutUser_ticketsInput = {
    create?: XOR<refundsCreateWithoutUser_ticketsInput, refundsUncheckedCreateWithoutUser_ticketsInput> | refundsCreateWithoutUser_ticketsInput[] | refundsUncheckedCreateWithoutUser_ticketsInput[]
    connectOrCreate?: refundsCreateOrConnectWithoutUser_ticketsInput | refundsCreateOrConnectWithoutUser_ticketsInput[]
    connect?: refundsWhereUniqueInput | refundsWhereUniqueInput[]
  }

  export type EnumPaymentStatusFieldUpdateOperationsInput = {
    set?: $Enums.PaymentStatus
  }

  export type order_itemsUpdateOneWithoutUser_ticketsNestedInput = {
    create?: XOR<order_itemsCreateWithoutUser_ticketsInput, order_itemsUncheckedCreateWithoutUser_ticketsInput>
    connectOrCreate?: order_itemsCreateOrConnectWithoutUser_ticketsInput
    upsert?: order_itemsUpsertWithoutUser_ticketsInput
    disconnect?: order_itemsWhereInput | boolean
    delete?: order_itemsWhereInput | boolean
    connect?: order_itemsWhereUniqueInput
    update?: XOR<XOR<order_itemsUpdateToOneWithWhereWithoutUser_ticketsInput, order_itemsUpdateWithoutUser_ticketsInput>, order_itemsUncheckedUpdateWithoutUser_ticketsInput>
  }

  export type refund_ticketsUpdateManyWithoutUser_ticketsNestedInput = {
    create?: XOR<refund_ticketsCreateWithoutUser_ticketsInput, refund_ticketsUncheckedCreateWithoutUser_ticketsInput> | refund_ticketsCreateWithoutUser_ticketsInput[] | refund_ticketsUncheckedCreateWithoutUser_ticketsInput[]
    connectOrCreate?: refund_ticketsCreateOrConnectWithoutUser_ticketsInput | refund_ticketsCreateOrConnectWithoutUser_ticketsInput[]
    upsert?: refund_ticketsUpsertWithWhereUniqueWithoutUser_ticketsInput | refund_ticketsUpsertWithWhereUniqueWithoutUser_ticketsInput[]
    createMany?: refund_ticketsCreateManyUser_ticketsInputEnvelope
    set?: refund_ticketsWhereUniqueInput | refund_ticketsWhereUniqueInput[]
    disconnect?: refund_ticketsWhereUniqueInput | refund_ticketsWhereUniqueInput[]
    delete?: refund_ticketsWhereUniqueInput | refund_ticketsWhereUniqueInput[]
    connect?: refund_ticketsWhereUniqueInput | refund_ticketsWhereUniqueInput[]
    update?: refund_ticketsUpdateWithWhereUniqueWithoutUser_ticketsInput | refund_ticketsUpdateWithWhereUniqueWithoutUser_ticketsInput[]
    updateMany?: refund_ticketsUpdateManyWithWhereWithoutUser_ticketsInput | refund_ticketsUpdateManyWithWhereWithoutUser_ticketsInput[]
    deleteMany?: refund_ticketsScalarWhereInput | refund_ticketsScalarWhereInput[]
  }

  export type ticketsUpdateOneRequiredWithoutUser_ticketsNestedInput = {
    create?: XOR<ticketsCreateWithoutUser_ticketsInput, ticketsUncheckedCreateWithoutUser_ticketsInput>
    connectOrCreate?: ticketsCreateOrConnectWithoutUser_ticketsInput
    upsert?: ticketsUpsertWithoutUser_ticketsInput
    connect?: ticketsWhereUniqueInput
    update?: XOR<XOR<ticketsUpdateToOneWithWhereWithoutUser_ticketsInput, ticketsUpdateWithoutUser_ticketsInput>, ticketsUncheckedUpdateWithoutUser_ticketsInput>
  }

  export type usersUpdateOneWithoutUser_ticketsNestedInput = {
    create?: XOR<usersCreateWithoutUser_ticketsInput, usersUncheckedCreateWithoutUser_ticketsInput>
    connectOrCreate?: usersCreateOrConnectWithoutUser_ticketsInput
    upsert?: usersUpsertWithoutUser_ticketsInput
    disconnect?: usersWhereInput | boolean
    delete?: usersWhereInput | boolean
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutUser_ticketsInput, usersUpdateWithoutUser_ticketsInput>, usersUncheckedUpdateWithoutUser_ticketsInput>
  }

  export type ordersUpdateManyWithoutUser_ticketsNestedInput = {
    create?: XOR<ordersCreateWithoutUser_ticketsInput, ordersUncheckedCreateWithoutUser_ticketsInput> | ordersCreateWithoutUser_ticketsInput[] | ordersUncheckedCreateWithoutUser_ticketsInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutUser_ticketsInput | ordersCreateOrConnectWithoutUser_ticketsInput[]
    upsert?: ordersUpsertWithWhereUniqueWithoutUser_ticketsInput | ordersUpsertWithWhereUniqueWithoutUser_ticketsInput[]
    set?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    disconnect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    delete?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    update?: ordersUpdateWithWhereUniqueWithoutUser_ticketsInput | ordersUpdateWithWhereUniqueWithoutUser_ticketsInput[]
    updateMany?: ordersUpdateManyWithWhereWithoutUser_ticketsInput | ordersUpdateManyWithWhereWithoutUser_ticketsInput[]
    deleteMany?: ordersScalarWhereInput | ordersScalarWhereInput[]
  }

  export type refundsUpdateManyWithoutUser_ticketsNestedInput = {
    create?: XOR<refundsCreateWithoutUser_ticketsInput, refundsUncheckedCreateWithoutUser_ticketsInput> | refundsCreateWithoutUser_ticketsInput[] | refundsUncheckedCreateWithoutUser_ticketsInput[]
    connectOrCreate?: refundsCreateOrConnectWithoutUser_ticketsInput | refundsCreateOrConnectWithoutUser_ticketsInput[]
    upsert?: refundsUpsertWithWhereUniqueWithoutUser_ticketsInput | refundsUpsertWithWhereUniqueWithoutUser_ticketsInput[]
    set?: refundsWhereUniqueInput | refundsWhereUniqueInput[]
    disconnect?: refundsWhereUniqueInput | refundsWhereUniqueInput[]
    delete?: refundsWhereUniqueInput | refundsWhereUniqueInput[]
    connect?: refundsWhereUniqueInput | refundsWhereUniqueInput[]
    update?: refundsUpdateWithWhereUniqueWithoutUser_ticketsInput | refundsUpdateWithWhereUniqueWithoutUser_ticketsInput[]
    updateMany?: refundsUpdateManyWithWhereWithoutUser_ticketsInput | refundsUpdateManyWithWhereWithoutUser_ticketsInput[]
    deleteMany?: refundsScalarWhereInput | refundsScalarWhereInput[]
  }

  export type order_itemsUncheckedUpdateOneWithoutUser_ticketsNestedInput = {
    create?: XOR<order_itemsCreateWithoutUser_ticketsInput, order_itemsUncheckedCreateWithoutUser_ticketsInput>
    connectOrCreate?: order_itemsCreateOrConnectWithoutUser_ticketsInput
    upsert?: order_itemsUpsertWithoutUser_ticketsInput
    disconnect?: order_itemsWhereInput | boolean
    delete?: order_itemsWhereInput | boolean
    connect?: order_itemsWhereUniqueInput
    update?: XOR<XOR<order_itemsUpdateToOneWithWhereWithoutUser_ticketsInput, order_itemsUpdateWithoutUser_ticketsInput>, order_itemsUncheckedUpdateWithoutUser_ticketsInput>
  }

  export type refund_ticketsUncheckedUpdateManyWithoutUser_ticketsNestedInput = {
    create?: XOR<refund_ticketsCreateWithoutUser_ticketsInput, refund_ticketsUncheckedCreateWithoutUser_ticketsInput> | refund_ticketsCreateWithoutUser_ticketsInput[] | refund_ticketsUncheckedCreateWithoutUser_ticketsInput[]
    connectOrCreate?: refund_ticketsCreateOrConnectWithoutUser_ticketsInput | refund_ticketsCreateOrConnectWithoutUser_ticketsInput[]
    upsert?: refund_ticketsUpsertWithWhereUniqueWithoutUser_ticketsInput | refund_ticketsUpsertWithWhereUniqueWithoutUser_ticketsInput[]
    createMany?: refund_ticketsCreateManyUser_ticketsInputEnvelope
    set?: refund_ticketsWhereUniqueInput | refund_ticketsWhereUniqueInput[]
    disconnect?: refund_ticketsWhereUniqueInput | refund_ticketsWhereUniqueInput[]
    delete?: refund_ticketsWhereUniqueInput | refund_ticketsWhereUniqueInput[]
    connect?: refund_ticketsWhereUniqueInput | refund_ticketsWhereUniqueInput[]
    update?: refund_ticketsUpdateWithWhereUniqueWithoutUser_ticketsInput | refund_ticketsUpdateWithWhereUniqueWithoutUser_ticketsInput[]
    updateMany?: refund_ticketsUpdateManyWithWhereWithoutUser_ticketsInput | refund_ticketsUpdateManyWithWhereWithoutUser_ticketsInput[]
    deleteMany?: refund_ticketsScalarWhereInput | refund_ticketsScalarWhereInput[]
  }

  export type ordersUncheckedUpdateManyWithoutUser_ticketsNestedInput = {
    create?: XOR<ordersCreateWithoutUser_ticketsInput, ordersUncheckedCreateWithoutUser_ticketsInput> | ordersCreateWithoutUser_ticketsInput[] | ordersUncheckedCreateWithoutUser_ticketsInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutUser_ticketsInput | ordersCreateOrConnectWithoutUser_ticketsInput[]
    upsert?: ordersUpsertWithWhereUniqueWithoutUser_ticketsInput | ordersUpsertWithWhereUniqueWithoutUser_ticketsInput[]
    set?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    disconnect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    delete?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    update?: ordersUpdateWithWhereUniqueWithoutUser_ticketsInput | ordersUpdateWithWhereUniqueWithoutUser_ticketsInput[]
    updateMany?: ordersUpdateManyWithWhereWithoutUser_ticketsInput | ordersUpdateManyWithWhereWithoutUser_ticketsInput[]
    deleteMany?: ordersScalarWhereInput | ordersScalarWhereInput[]
  }

  export type refundsUncheckedUpdateManyWithoutUser_ticketsNestedInput = {
    create?: XOR<refundsCreateWithoutUser_ticketsInput, refundsUncheckedCreateWithoutUser_ticketsInput> | refundsCreateWithoutUser_ticketsInput[] | refundsUncheckedCreateWithoutUser_ticketsInput[]
    connectOrCreate?: refundsCreateOrConnectWithoutUser_ticketsInput | refundsCreateOrConnectWithoutUser_ticketsInput[]
    upsert?: refundsUpsertWithWhereUniqueWithoutUser_ticketsInput | refundsUpsertWithWhereUniqueWithoutUser_ticketsInput[]
    set?: refundsWhereUniqueInput | refundsWhereUniqueInput[]
    disconnect?: refundsWhereUniqueInput | refundsWhereUniqueInput[]
    delete?: refundsWhereUniqueInput | refundsWhereUniqueInput[]
    connect?: refundsWhereUniqueInput | refundsWhereUniqueInput[]
    update?: refundsUpdateWithWhereUniqueWithoutUser_ticketsInput | refundsUpdateWithWhereUniqueWithoutUser_ticketsInput[]
    updateMany?: refundsUpdateManyWithWhereWithoutUser_ticketsInput | refundsUpdateManyWithWhereWithoutUser_ticketsInput[]
    deleteMany?: refundsScalarWhereInput | refundsScalarWhereInput[]
  }

  export type ordersCreateNestedManyWithoutUsersInput = {
    create?: XOR<ordersCreateWithoutUsersInput, ordersUncheckedCreateWithoutUsersInput> | ordersCreateWithoutUsersInput[] | ordersUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutUsersInput | ordersCreateOrConnectWithoutUsersInput[]
    createMany?: ordersCreateManyUsersInputEnvelope
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
  }

  export type refundsCreateNestedManyWithoutUsersInput = {
    create?: XOR<refundsCreateWithoutUsersInput, refundsUncheckedCreateWithoutUsersInput> | refundsCreateWithoutUsersInput[] | refundsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: refundsCreateOrConnectWithoutUsersInput | refundsCreateOrConnectWithoutUsersInput[]
    createMany?: refundsCreateManyUsersInputEnvelope
    connect?: refundsWhereUniqueInput | refundsWhereUniqueInput[]
  }

  export type ticketsCreateNestedManyWithoutUsersInput = {
    create?: XOR<ticketsCreateWithoutUsersInput, ticketsUncheckedCreateWithoutUsersInput> | ticketsCreateWithoutUsersInput[] | ticketsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ticketsCreateOrConnectWithoutUsersInput | ticketsCreateOrConnectWithoutUsersInput[]
    createMany?: ticketsCreateManyUsersInputEnvelope
    connect?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
  }

  export type user_ticketsCreateNestedManyWithoutUsersInput = {
    create?: XOR<user_ticketsCreateWithoutUsersInput, user_ticketsUncheckedCreateWithoutUsersInput> | user_ticketsCreateWithoutUsersInput[] | user_ticketsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: user_ticketsCreateOrConnectWithoutUsersInput | user_ticketsCreateOrConnectWithoutUsersInput[]
    createMany?: user_ticketsCreateManyUsersInputEnvelope
    connect?: user_ticketsWhereUniqueInput | user_ticketsWhereUniqueInput[]
  }

  export type ordersUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<ordersCreateWithoutUsersInput, ordersUncheckedCreateWithoutUsersInput> | ordersCreateWithoutUsersInput[] | ordersUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutUsersInput | ordersCreateOrConnectWithoutUsersInput[]
    createMany?: ordersCreateManyUsersInputEnvelope
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
  }

  export type refundsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<refundsCreateWithoutUsersInput, refundsUncheckedCreateWithoutUsersInput> | refundsCreateWithoutUsersInput[] | refundsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: refundsCreateOrConnectWithoutUsersInput | refundsCreateOrConnectWithoutUsersInput[]
    createMany?: refundsCreateManyUsersInputEnvelope
    connect?: refundsWhereUniqueInput | refundsWhereUniqueInput[]
  }

  export type ticketsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<ticketsCreateWithoutUsersInput, ticketsUncheckedCreateWithoutUsersInput> | ticketsCreateWithoutUsersInput[] | ticketsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ticketsCreateOrConnectWithoutUsersInput | ticketsCreateOrConnectWithoutUsersInput[]
    createMany?: ticketsCreateManyUsersInputEnvelope
    connect?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
  }

  export type user_ticketsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<user_ticketsCreateWithoutUsersInput, user_ticketsUncheckedCreateWithoutUsersInput> | user_ticketsCreateWithoutUsersInput[] | user_ticketsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: user_ticketsCreateOrConnectWithoutUsersInput | user_ticketsCreateOrConnectWithoutUsersInput[]
    createMany?: user_ticketsCreateManyUsersInputEnvelope
    connect?: user_ticketsWhereUniqueInput | user_ticketsWhereUniqueInput[]
  }

  export type NullableBigIntFieldUpdateOperationsInput = {
    set?: bigint | number | null
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type ordersUpdateManyWithoutUsersNestedInput = {
    create?: XOR<ordersCreateWithoutUsersInput, ordersUncheckedCreateWithoutUsersInput> | ordersCreateWithoutUsersInput[] | ordersUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutUsersInput | ordersCreateOrConnectWithoutUsersInput[]
    upsert?: ordersUpsertWithWhereUniqueWithoutUsersInput | ordersUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: ordersCreateManyUsersInputEnvelope
    set?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    disconnect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    delete?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    update?: ordersUpdateWithWhereUniqueWithoutUsersInput | ordersUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: ordersUpdateManyWithWhereWithoutUsersInput | ordersUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: ordersScalarWhereInput | ordersScalarWhereInput[]
  }

  export type refundsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<refundsCreateWithoutUsersInput, refundsUncheckedCreateWithoutUsersInput> | refundsCreateWithoutUsersInput[] | refundsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: refundsCreateOrConnectWithoutUsersInput | refundsCreateOrConnectWithoutUsersInput[]
    upsert?: refundsUpsertWithWhereUniqueWithoutUsersInput | refundsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: refundsCreateManyUsersInputEnvelope
    set?: refundsWhereUniqueInput | refundsWhereUniqueInput[]
    disconnect?: refundsWhereUniqueInput | refundsWhereUniqueInput[]
    delete?: refundsWhereUniqueInput | refundsWhereUniqueInput[]
    connect?: refundsWhereUniqueInput | refundsWhereUniqueInput[]
    update?: refundsUpdateWithWhereUniqueWithoutUsersInput | refundsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: refundsUpdateManyWithWhereWithoutUsersInput | refundsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: refundsScalarWhereInput | refundsScalarWhereInput[]
  }

  export type ticketsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<ticketsCreateWithoutUsersInput, ticketsUncheckedCreateWithoutUsersInput> | ticketsCreateWithoutUsersInput[] | ticketsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ticketsCreateOrConnectWithoutUsersInput | ticketsCreateOrConnectWithoutUsersInput[]
    upsert?: ticketsUpsertWithWhereUniqueWithoutUsersInput | ticketsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: ticketsCreateManyUsersInputEnvelope
    set?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    disconnect?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    delete?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    connect?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    update?: ticketsUpdateWithWhereUniqueWithoutUsersInput | ticketsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: ticketsUpdateManyWithWhereWithoutUsersInput | ticketsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: ticketsScalarWhereInput | ticketsScalarWhereInput[]
  }

  export type user_ticketsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<user_ticketsCreateWithoutUsersInput, user_ticketsUncheckedCreateWithoutUsersInput> | user_ticketsCreateWithoutUsersInput[] | user_ticketsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: user_ticketsCreateOrConnectWithoutUsersInput | user_ticketsCreateOrConnectWithoutUsersInput[]
    upsert?: user_ticketsUpsertWithWhereUniqueWithoutUsersInput | user_ticketsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: user_ticketsCreateManyUsersInputEnvelope
    set?: user_ticketsWhereUniqueInput | user_ticketsWhereUniqueInput[]
    disconnect?: user_ticketsWhereUniqueInput | user_ticketsWhereUniqueInput[]
    delete?: user_ticketsWhereUniqueInput | user_ticketsWhereUniqueInput[]
    connect?: user_ticketsWhereUniqueInput | user_ticketsWhereUniqueInput[]
    update?: user_ticketsUpdateWithWhereUniqueWithoutUsersInput | user_ticketsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: user_ticketsUpdateManyWithWhereWithoutUsersInput | user_ticketsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: user_ticketsScalarWhereInput | user_ticketsScalarWhereInput[]
  }

  export type ordersUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<ordersCreateWithoutUsersInput, ordersUncheckedCreateWithoutUsersInput> | ordersCreateWithoutUsersInput[] | ordersUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutUsersInput | ordersCreateOrConnectWithoutUsersInput[]
    upsert?: ordersUpsertWithWhereUniqueWithoutUsersInput | ordersUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: ordersCreateManyUsersInputEnvelope
    set?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    disconnect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    delete?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    update?: ordersUpdateWithWhereUniqueWithoutUsersInput | ordersUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: ordersUpdateManyWithWhereWithoutUsersInput | ordersUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: ordersScalarWhereInput | ordersScalarWhereInput[]
  }

  export type refundsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<refundsCreateWithoutUsersInput, refundsUncheckedCreateWithoutUsersInput> | refundsCreateWithoutUsersInput[] | refundsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: refundsCreateOrConnectWithoutUsersInput | refundsCreateOrConnectWithoutUsersInput[]
    upsert?: refundsUpsertWithWhereUniqueWithoutUsersInput | refundsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: refundsCreateManyUsersInputEnvelope
    set?: refundsWhereUniqueInput | refundsWhereUniqueInput[]
    disconnect?: refundsWhereUniqueInput | refundsWhereUniqueInput[]
    delete?: refundsWhereUniqueInput | refundsWhereUniqueInput[]
    connect?: refundsWhereUniqueInput | refundsWhereUniqueInput[]
    update?: refundsUpdateWithWhereUniqueWithoutUsersInput | refundsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: refundsUpdateManyWithWhereWithoutUsersInput | refundsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: refundsScalarWhereInput | refundsScalarWhereInput[]
  }

  export type ticketsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<ticketsCreateWithoutUsersInput, ticketsUncheckedCreateWithoutUsersInput> | ticketsCreateWithoutUsersInput[] | ticketsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: ticketsCreateOrConnectWithoutUsersInput | ticketsCreateOrConnectWithoutUsersInput[]
    upsert?: ticketsUpsertWithWhereUniqueWithoutUsersInput | ticketsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: ticketsCreateManyUsersInputEnvelope
    set?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    disconnect?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    delete?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    connect?: ticketsWhereUniqueInput | ticketsWhereUniqueInput[]
    update?: ticketsUpdateWithWhereUniqueWithoutUsersInput | ticketsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: ticketsUpdateManyWithWhereWithoutUsersInput | ticketsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: ticketsScalarWhereInput | ticketsScalarWhereInput[]
  }

  export type user_ticketsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<user_ticketsCreateWithoutUsersInput, user_ticketsUncheckedCreateWithoutUsersInput> | user_ticketsCreateWithoutUsersInput[] | user_ticketsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: user_ticketsCreateOrConnectWithoutUsersInput | user_ticketsCreateOrConnectWithoutUsersInput[]
    upsert?: user_ticketsUpsertWithWhereUniqueWithoutUsersInput | user_ticketsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: user_ticketsCreateManyUsersInputEnvelope
    set?: user_ticketsWhereUniqueInput | user_ticketsWhereUniqueInput[]
    disconnect?: user_ticketsWhereUniqueInput | user_ticketsWhereUniqueInput[]
    delete?: user_ticketsWhereUniqueInput | user_ticketsWhereUniqueInput[]
    connect?: user_ticketsWhereUniqueInput | user_ticketsWhereUniqueInput[]
    update?: user_ticketsUpdateWithWhereUniqueWithoutUsersInput | user_ticketsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: user_ticketsUpdateManyWithWhereWithoutUsersInput | user_ticketsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: user_ticketsScalarWhereInput | user_ticketsScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumHallTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.HallType | EnumHallTypeFieldRefInput<$PrismaModel>
    in?: $Enums.HallType[] | ListEnumHallTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.HallType[] | ListEnumHallTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumHallTypeFilter<$PrismaModel> | $Enums.HallType
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumHallTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.HallType | EnumHallTypeFieldRefInput<$PrismaModel>
    in?: $Enums.HallType[] | ListEnumHallTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.HallType[] | ListEnumHallTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumHallTypeWithAggregatesFilter<$PrismaModel> | $Enums.HallType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumHallTypeFilter<$PrismaModel>
    _max?: NestedEnumHallTypeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumZoneTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ZoneType | EnumZoneTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ZoneType[] | ListEnumZoneTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ZoneType[] | ListEnumZoneTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumZoneTypeFilter<$PrismaModel> | $Enums.ZoneType
  }

  export type NestedEnumZoneTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ZoneType | EnumZoneTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ZoneType[] | ListEnumZoneTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ZoneType[] | ListEnumZoneTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumZoneTypeWithAggregatesFilter<$PrismaModel> | $Enums.ZoneType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumZoneTypeFilter<$PrismaModel>
    _max?: NestedEnumZoneTypeFilter<$PrismaModel>
  }

  export type NestedEnumZoneItemTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ZoneItemType | EnumZoneItemTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ZoneItemType[] | ListEnumZoneItemTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ZoneItemType[] | ListEnumZoneItemTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumZoneItemTypeFilter<$PrismaModel> | $Enums.ZoneItemType
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedEnumZoneItemTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ZoneItemType | EnumZoneItemTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ZoneItemType[] | ListEnumZoneItemTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ZoneItemType[] | ListEnumZoneItemTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumZoneItemTypeWithAggregatesFilter<$PrismaModel> | $Enums.ZoneItemType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumZoneItemTypeFilter<$PrismaModel>
    _max?: NestedEnumZoneItemTypeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedEnumReservationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ReservationType | EnumReservationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ReservationType[] | ListEnumReservationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReservationType[] | ListEnumReservationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumReservationTypeFilter<$PrismaModel> | $Enums.ReservationType
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedEnumReservationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ReservationStatus | EnumReservationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ReservationStatus[] | ListEnumReservationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReservationStatus[] | ListEnumReservationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumReservationStatusFilter<$PrismaModel> | $Enums.ReservationStatus
  }

  export type NestedEnumReservationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReservationType | EnumReservationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ReservationType[] | ListEnumReservationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReservationType[] | ListEnumReservationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumReservationTypeWithAggregatesFilter<$PrismaModel> | $Enums.ReservationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReservationTypeFilter<$PrismaModel>
    _max?: NestedEnumReservationTypeFilter<$PrismaModel>
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedEnumReservationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReservationStatus | EnumReservationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ReservationStatus[] | ListEnumReservationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReservationStatus[] | ListEnumReservationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumReservationStatusWithAggregatesFilter<$PrismaModel> | $Enums.ReservationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReservationStatusFilter<$PrismaModel>
    _max?: NestedEnumReservationStatusFilter<$PrismaModel>
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumBanquetRequestStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.BanquetRequestStatus | EnumBanquetRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BanquetRequestStatus[] | ListEnumBanquetRequestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BanquetRequestStatus[] | ListEnumBanquetRequestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBanquetRequestStatusFilter<$PrismaModel> | $Enums.BanquetRequestStatus
  }

  export type NestedEnumBanquetRequestStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BanquetRequestStatus | EnumBanquetRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BanquetRequestStatus[] | ListEnumBanquetRequestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BanquetRequestStatus[] | ListEnumBanquetRequestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBanquetRequestStatusWithAggregatesFilter<$PrismaModel> | $Enums.BanquetRequestStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBanquetRequestStatusFilter<$PrismaModel>
    _max?: NestedEnumBanquetRequestStatusFilter<$PrismaModel>
  }

  export type NestedEnumOrderStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusFilter<$PrismaModel> | $Enums.OrderStatus
  }

  export type NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel> | $Enums.OrderStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrderStatusFilter<$PrismaModel>
    _max?: NestedEnumOrderStatusFilter<$PrismaModel>
  }

  export type NestedEnumPaymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusFilter<$PrismaModel> | $Enums.PaymentStatus
  }

  export type NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusFilter<$PrismaModel>
  }

  export type NestedBigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type NestedBigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type ZoneCreateWithoutHallInput = {
    name: string
    type?: $Enums.ZoneType
    openTime: string
    closeTime: string
    imageUrl?: string | null
    description?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ZoneItemCreateNestedManyWithoutZoneInput
  }

  export type ZoneUncheckedCreateWithoutHallInput = {
    id?: number
    name: string
    type?: $Enums.ZoneType
    openTime: string
    closeTime: string
    imageUrl?: string | null
    description?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ZoneItemUncheckedCreateNestedManyWithoutZoneInput
  }

  export type ZoneCreateOrConnectWithoutHallInput = {
    where: ZoneWhereUniqueInput
    create: XOR<ZoneCreateWithoutHallInput, ZoneUncheckedCreateWithoutHallInput>
  }

  export type ZoneCreateManyHallInputEnvelope = {
    data: ZoneCreateManyHallInput | ZoneCreateManyHallInput[]
    skipDuplicates?: boolean
  }

  export type ZoneUpsertWithWhereUniqueWithoutHallInput = {
    where: ZoneWhereUniqueInput
    update: XOR<ZoneUpdateWithoutHallInput, ZoneUncheckedUpdateWithoutHallInput>
    create: XOR<ZoneCreateWithoutHallInput, ZoneUncheckedCreateWithoutHallInput>
  }

  export type ZoneUpdateWithWhereUniqueWithoutHallInput = {
    where: ZoneWhereUniqueInput
    data: XOR<ZoneUpdateWithoutHallInput, ZoneUncheckedUpdateWithoutHallInput>
  }

  export type ZoneUpdateManyWithWhereWithoutHallInput = {
    where: ZoneScalarWhereInput
    data: XOR<ZoneUpdateManyMutationInput, ZoneUncheckedUpdateManyWithoutHallInput>
  }

  export type ZoneScalarWhereInput = {
    AND?: ZoneScalarWhereInput | ZoneScalarWhereInput[]
    OR?: ZoneScalarWhereInput[]
    NOT?: ZoneScalarWhereInput | ZoneScalarWhereInput[]
    id?: IntFilter<"Zone"> | number
    name?: StringFilter<"Zone"> | string
    type?: EnumZoneTypeFilter<"Zone"> | $Enums.ZoneType
    hallId?: IntFilter<"Zone"> | number
    openTime?: StringFilter<"Zone"> | string
    closeTime?: StringFilter<"Zone"> | string
    imageUrl?: StringNullableFilter<"Zone"> | string | null
    description?: StringNullableFilter<"Zone"> | string | null
    isActive?: BoolFilter<"Zone"> | boolean
    sortOrder?: IntFilter<"Zone"> | number
    createdAt?: DateTimeFilter<"Zone"> | Date | string
    updatedAt?: DateTimeFilter<"Zone"> | Date | string
  }

  export type HallCreateWithoutZonesInput = {
    name: string
    description?: string | null
    type?: $Enums.HallType
    imageUrl?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HallUncheckedCreateWithoutZonesInput = {
    id?: number
    name: string
    description?: string | null
    type?: $Enums.HallType
    imageUrl?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HallCreateOrConnectWithoutZonesInput = {
    where: HallWhereUniqueInput
    create: XOR<HallCreateWithoutZonesInput, HallUncheckedCreateWithoutZonesInput>
  }

  export type ZoneItemCreateWithoutZoneInput = {
    floor?: number
    label: string
    type?: $Enums.ZoneItemType
    isBooking?: boolean
    isActive?: boolean
    x: number
    y: number
    width: number
    height: number
    seats?: number | null
    capacity?: number | null
    pricePerHour?: Decimal | DecimalJsLike | number | string | null
    pricePerSeat?: Decimal | DecimalJsLike | number | string | null
    pricePerSlot?: Decimal | DecimalJsLike | number | string | null
    minDuration?: number | null
    maxDuration?: number | null
    timeSlots?: ZoneItemCreatetimeSlotsInput | string[]
    description?: string | null
    features?: ZoneItemCreatefeaturesInput | string[]
    reservations?: ReservationCreateNestedManyWithoutZoneItemInput
  }

  export type ZoneItemUncheckedCreateWithoutZoneInput = {
    id?: number
    floor?: number
    label: string
    type?: $Enums.ZoneItemType
    isBooking?: boolean
    isActive?: boolean
    x: number
    y: number
    width: number
    height: number
    seats?: number | null
    capacity?: number | null
    pricePerHour?: Decimal | DecimalJsLike | number | string | null
    pricePerSeat?: Decimal | DecimalJsLike | number | string | null
    pricePerSlot?: Decimal | DecimalJsLike | number | string | null
    minDuration?: number | null
    maxDuration?: number | null
    timeSlots?: ZoneItemCreatetimeSlotsInput | string[]
    description?: string | null
    features?: ZoneItemCreatefeaturesInput | string[]
    reservations?: ReservationUncheckedCreateNestedManyWithoutZoneItemInput
  }

  export type ZoneItemCreateOrConnectWithoutZoneInput = {
    where: ZoneItemWhereUniqueInput
    create: XOR<ZoneItemCreateWithoutZoneInput, ZoneItemUncheckedCreateWithoutZoneInput>
  }

  export type ZoneItemCreateManyZoneInputEnvelope = {
    data: ZoneItemCreateManyZoneInput | ZoneItemCreateManyZoneInput[]
    skipDuplicates?: boolean
  }

  export type HallUpsertWithoutZonesInput = {
    update: XOR<HallUpdateWithoutZonesInput, HallUncheckedUpdateWithoutZonesInput>
    create: XOR<HallCreateWithoutZonesInput, HallUncheckedCreateWithoutZonesInput>
    where?: HallWhereInput
  }

  export type HallUpdateToOneWithWhereWithoutZonesInput = {
    where?: HallWhereInput
    data: XOR<HallUpdateWithoutZonesInput, HallUncheckedUpdateWithoutZonesInput>
  }

  export type HallUpdateWithoutZonesInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumHallTypeFieldUpdateOperationsInput | $Enums.HallType
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HallUncheckedUpdateWithoutZonesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumHallTypeFieldUpdateOperationsInput | $Enums.HallType
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ZoneItemUpsertWithWhereUniqueWithoutZoneInput = {
    where: ZoneItemWhereUniqueInput
    update: XOR<ZoneItemUpdateWithoutZoneInput, ZoneItemUncheckedUpdateWithoutZoneInput>
    create: XOR<ZoneItemCreateWithoutZoneInput, ZoneItemUncheckedCreateWithoutZoneInput>
  }

  export type ZoneItemUpdateWithWhereUniqueWithoutZoneInput = {
    where: ZoneItemWhereUniqueInput
    data: XOR<ZoneItemUpdateWithoutZoneInput, ZoneItemUncheckedUpdateWithoutZoneInput>
  }

  export type ZoneItemUpdateManyWithWhereWithoutZoneInput = {
    where: ZoneItemScalarWhereInput
    data: XOR<ZoneItemUpdateManyMutationInput, ZoneItemUncheckedUpdateManyWithoutZoneInput>
  }

  export type ZoneItemScalarWhereInput = {
    AND?: ZoneItemScalarWhereInput | ZoneItemScalarWhereInput[]
    OR?: ZoneItemScalarWhereInput[]
    NOT?: ZoneItemScalarWhereInput | ZoneItemScalarWhereInput[]
    id?: IntFilter<"ZoneItem"> | number
    zoneId?: IntFilter<"ZoneItem"> | number
    floor?: IntFilter<"ZoneItem"> | number
    label?: StringFilter<"ZoneItem"> | string
    type?: EnumZoneItemTypeFilter<"ZoneItem"> | $Enums.ZoneItemType
    isBooking?: BoolFilter<"ZoneItem"> | boolean
    isActive?: BoolFilter<"ZoneItem"> | boolean
    x?: FloatFilter<"ZoneItem"> | number
    y?: FloatFilter<"ZoneItem"> | number
    width?: FloatFilter<"ZoneItem"> | number
    height?: FloatFilter<"ZoneItem"> | number
    seats?: IntNullableFilter<"ZoneItem"> | number | null
    capacity?: IntNullableFilter<"ZoneItem"> | number | null
    pricePerHour?: DecimalNullableFilter<"ZoneItem"> | Decimal | DecimalJsLike | number | string | null
    pricePerSeat?: DecimalNullableFilter<"ZoneItem"> | Decimal | DecimalJsLike | number | string | null
    pricePerSlot?: DecimalNullableFilter<"ZoneItem"> | Decimal | DecimalJsLike | number | string | null
    minDuration?: IntNullableFilter<"ZoneItem"> | number | null
    maxDuration?: IntNullableFilter<"ZoneItem"> | number | null
    timeSlots?: StringNullableListFilter<"ZoneItem">
    description?: StringNullableFilter<"ZoneItem"> | string | null
    features?: StringNullableListFilter<"ZoneItem">
  }

  export type ReservationCreateWithoutZoneItemInput = {
    type?: $Enums.ReservationType
    userName: string
    phone: string
    startsAt: Date | string
    endsAt: Date | string
    deposit: Decimal | DecimalJsLike | number | string
    status?: $Enums.ReservationStatus
    seatsCount?: number | null
    guestsCount?: number | null
    duration?: number | null
    comment?: string | null
    specialRequests?: string | null
    totalPrice?: Decimal | DecimalJsLike | number | string | null
    payments?: PaymentCreateNestedManyWithoutReservationInput
  }

  export type ReservationUncheckedCreateWithoutZoneItemInput = {
    id?: number
    type?: $Enums.ReservationType
    userName: string
    phone: string
    startsAt: Date | string
    endsAt: Date | string
    deposit: Decimal | DecimalJsLike | number | string
    status?: $Enums.ReservationStatus
    seatsCount?: number | null
    guestsCount?: number | null
    duration?: number | null
    comment?: string | null
    specialRequests?: string | null
    totalPrice?: Decimal | DecimalJsLike | number | string | null
    payments?: PaymentUncheckedCreateNestedManyWithoutReservationInput
  }

  export type ReservationCreateOrConnectWithoutZoneItemInput = {
    where: ReservationWhereUniqueInput
    create: XOR<ReservationCreateWithoutZoneItemInput, ReservationUncheckedCreateWithoutZoneItemInput>
  }

  export type ReservationCreateManyZoneItemInputEnvelope = {
    data: ReservationCreateManyZoneItemInput | ReservationCreateManyZoneItemInput[]
    skipDuplicates?: boolean
  }

  export type ZoneCreateWithoutItemsInput = {
    name: string
    type?: $Enums.ZoneType
    openTime: string
    closeTime: string
    imageUrl?: string | null
    description?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    hall?: HallCreateNestedOneWithoutZonesInput
  }

  export type ZoneUncheckedCreateWithoutItemsInput = {
    id?: number
    name: string
    type?: $Enums.ZoneType
    hallId?: number
    openTime: string
    closeTime: string
    imageUrl?: string | null
    description?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ZoneCreateOrConnectWithoutItemsInput = {
    where: ZoneWhereUniqueInput
    create: XOR<ZoneCreateWithoutItemsInput, ZoneUncheckedCreateWithoutItemsInput>
  }

  export type ReservationUpsertWithWhereUniqueWithoutZoneItemInput = {
    where: ReservationWhereUniqueInput
    update: XOR<ReservationUpdateWithoutZoneItemInput, ReservationUncheckedUpdateWithoutZoneItemInput>
    create: XOR<ReservationCreateWithoutZoneItemInput, ReservationUncheckedCreateWithoutZoneItemInput>
  }

  export type ReservationUpdateWithWhereUniqueWithoutZoneItemInput = {
    where: ReservationWhereUniqueInput
    data: XOR<ReservationUpdateWithoutZoneItemInput, ReservationUncheckedUpdateWithoutZoneItemInput>
  }

  export type ReservationUpdateManyWithWhereWithoutZoneItemInput = {
    where: ReservationScalarWhereInput
    data: XOR<ReservationUpdateManyMutationInput, ReservationUncheckedUpdateManyWithoutZoneItemInput>
  }

  export type ReservationScalarWhereInput = {
    AND?: ReservationScalarWhereInput | ReservationScalarWhereInput[]
    OR?: ReservationScalarWhereInput[]
    NOT?: ReservationScalarWhereInput | ReservationScalarWhereInput[]
    id?: IntFilter<"Reservation"> | number
    zoneItemId?: IntFilter<"Reservation"> | number
    type?: EnumReservationTypeFilter<"Reservation"> | $Enums.ReservationType
    userName?: StringFilter<"Reservation"> | string
    phone?: StringFilter<"Reservation"> | string
    startsAt?: DateTimeFilter<"Reservation"> | Date | string
    endsAt?: DateTimeFilter<"Reservation"> | Date | string
    deposit?: DecimalFilter<"Reservation"> | Decimal | DecimalJsLike | number | string
    status?: EnumReservationStatusFilter<"Reservation"> | $Enums.ReservationStatus
    seatsCount?: IntNullableFilter<"Reservation"> | number | null
    guestsCount?: IntNullableFilter<"Reservation"> | number | null
    duration?: IntNullableFilter<"Reservation"> | number | null
    comment?: StringNullableFilter<"Reservation"> | string | null
    specialRequests?: StringNullableFilter<"Reservation"> | string | null
    totalPrice?: DecimalNullableFilter<"Reservation"> | Decimal | DecimalJsLike | number | string | null
  }

  export type ZoneUpsertWithoutItemsInput = {
    update: XOR<ZoneUpdateWithoutItemsInput, ZoneUncheckedUpdateWithoutItemsInput>
    create: XOR<ZoneCreateWithoutItemsInput, ZoneUncheckedCreateWithoutItemsInput>
    where?: ZoneWhereInput
  }

  export type ZoneUpdateToOneWithWhereWithoutItemsInput = {
    where?: ZoneWhereInput
    data: XOR<ZoneUpdateWithoutItemsInput, ZoneUncheckedUpdateWithoutItemsInput>
  }

  export type ZoneUpdateWithoutItemsInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumZoneTypeFieldUpdateOperationsInput | $Enums.ZoneType
    openTime?: StringFieldUpdateOperationsInput | string
    closeTime?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hall?: HallUpdateOneRequiredWithoutZonesNestedInput
  }

  export type ZoneUncheckedUpdateWithoutItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumZoneTypeFieldUpdateOperationsInput | $Enums.ZoneType
    hallId?: IntFieldUpdateOperationsInput | number
    openTime?: StringFieldUpdateOperationsInput | string
    closeTime?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentCreateWithoutReservationInput = {
    amount: Decimal | DecimalJsLike | number | string
    payDate?: Date | string
    refunded?: boolean
  }

  export type PaymentUncheckedCreateWithoutReservationInput = {
    id?: number
    amount: Decimal | DecimalJsLike | number | string
    payDate?: Date | string
    refunded?: boolean
  }

  export type PaymentCreateOrConnectWithoutReservationInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutReservationInput, PaymentUncheckedCreateWithoutReservationInput>
  }

  export type PaymentCreateManyReservationInputEnvelope = {
    data: PaymentCreateManyReservationInput | PaymentCreateManyReservationInput[]
    skipDuplicates?: boolean
  }

  export type ZoneItemCreateWithoutReservationsInput = {
    floor?: number
    label: string
    type?: $Enums.ZoneItemType
    isBooking?: boolean
    isActive?: boolean
    x: number
    y: number
    width: number
    height: number
    seats?: number | null
    capacity?: number | null
    pricePerHour?: Decimal | DecimalJsLike | number | string | null
    pricePerSeat?: Decimal | DecimalJsLike | number | string | null
    pricePerSlot?: Decimal | DecimalJsLike | number | string | null
    minDuration?: number | null
    maxDuration?: number | null
    timeSlots?: ZoneItemCreatetimeSlotsInput | string[]
    description?: string | null
    features?: ZoneItemCreatefeaturesInput | string[]
    zone: ZoneCreateNestedOneWithoutItemsInput
  }

  export type ZoneItemUncheckedCreateWithoutReservationsInput = {
    id?: number
    zoneId: number
    floor?: number
    label: string
    type?: $Enums.ZoneItemType
    isBooking?: boolean
    isActive?: boolean
    x: number
    y: number
    width: number
    height: number
    seats?: number | null
    capacity?: number | null
    pricePerHour?: Decimal | DecimalJsLike | number | string | null
    pricePerSeat?: Decimal | DecimalJsLike | number | string | null
    pricePerSlot?: Decimal | DecimalJsLike | number | string | null
    minDuration?: number | null
    maxDuration?: number | null
    timeSlots?: ZoneItemCreatetimeSlotsInput | string[]
    description?: string | null
    features?: ZoneItemCreatefeaturesInput | string[]
  }

  export type ZoneItemCreateOrConnectWithoutReservationsInput = {
    where: ZoneItemWhereUniqueInput
    create: XOR<ZoneItemCreateWithoutReservationsInput, ZoneItemUncheckedCreateWithoutReservationsInput>
  }

  export type PaymentUpsertWithWhereUniqueWithoutReservationInput = {
    where: PaymentWhereUniqueInput
    update: XOR<PaymentUpdateWithoutReservationInput, PaymentUncheckedUpdateWithoutReservationInput>
    create: XOR<PaymentCreateWithoutReservationInput, PaymentUncheckedCreateWithoutReservationInput>
  }

  export type PaymentUpdateWithWhereUniqueWithoutReservationInput = {
    where: PaymentWhereUniqueInput
    data: XOR<PaymentUpdateWithoutReservationInput, PaymentUncheckedUpdateWithoutReservationInput>
  }

  export type PaymentUpdateManyWithWhereWithoutReservationInput = {
    where: PaymentScalarWhereInput
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyWithoutReservationInput>
  }

  export type PaymentScalarWhereInput = {
    AND?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
    OR?: PaymentScalarWhereInput[]
    NOT?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
    id?: IntFilter<"Payment"> | number
    reservationId?: IntFilter<"Payment"> | number
    amount?: DecimalFilter<"Payment"> | Decimal | DecimalJsLike | number | string
    payDate?: DateTimeFilter<"Payment"> | Date | string
    refunded?: BoolFilter<"Payment"> | boolean
  }

  export type ZoneItemUpsertWithoutReservationsInput = {
    update: XOR<ZoneItemUpdateWithoutReservationsInput, ZoneItemUncheckedUpdateWithoutReservationsInput>
    create: XOR<ZoneItemCreateWithoutReservationsInput, ZoneItemUncheckedCreateWithoutReservationsInput>
    where?: ZoneItemWhereInput
  }

  export type ZoneItemUpdateToOneWithWhereWithoutReservationsInput = {
    where?: ZoneItemWhereInput
    data: XOR<ZoneItemUpdateWithoutReservationsInput, ZoneItemUncheckedUpdateWithoutReservationsInput>
  }

  export type ZoneItemUpdateWithoutReservationsInput = {
    floor?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    type?: EnumZoneItemTypeFieldUpdateOperationsInput | $Enums.ZoneItemType
    isBooking?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    seats?: NullableIntFieldUpdateOperationsInput | number | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    pricePerHour?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerSeat?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerSlot?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    minDuration?: NullableIntFieldUpdateOperationsInput | number | null
    maxDuration?: NullableIntFieldUpdateOperationsInput | number | null
    timeSlots?: ZoneItemUpdatetimeSlotsInput | string[]
    description?: NullableStringFieldUpdateOperationsInput | string | null
    features?: ZoneItemUpdatefeaturesInput | string[]
    zone?: ZoneUpdateOneRequiredWithoutItemsNestedInput
  }

  export type ZoneItemUncheckedUpdateWithoutReservationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    zoneId?: IntFieldUpdateOperationsInput | number
    floor?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    type?: EnumZoneItemTypeFieldUpdateOperationsInput | $Enums.ZoneItemType
    isBooking?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    seats?: NullableIntFieldUpdateOperationsInput | number | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    pricePerHour?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerSeat?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerSlot?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    minDuration?: NullableIntFieldUpdateOperationsInput | number | null
    maxDuration?: NullableIntFieldUpdateOperationsInput | number | null
    timeSlots?: ZoneItemUpdatetimeSlotsInput | string[]
    description?: NullableStringFieldUpdateOperationsInput | string | null
    features?: ZoneItemUpdatefeaturesInput | string[]
  }

  export type ReservationCreateWithoutPaymentsInput = {
    type?: $Enums.ReservationType
    userName: string
    phone: string
    startsAt: Date | string
    endsAt: Date | string
    deposit: Decimal | DecimalJsLike | number | string
    status?: $Enums.ReservationStatus
    seatsCount?: number | null
    guestsCount?: number | null
    duration?: number | null
    comment?: string | null
    specialRequests?: string | null
    totalPrice?: Decimal | DecimalJsLike | number | string | null
    zoneItem: ZoneItemCreateNestedOneWithoutReservationsInput
  }

  export type ReservationUncheckedCreateWithoutPaymentsInput = {
    id?: number
    zoneItemId: number
    type?: $Enums.ReservationType
    userName: string
    phone: string
    startsAt: Date | string
    endsAt: Date | string
    deposit: Decimal | DecimalJsLike | number | string
    status?: $Enums.ReservationStatus
    seatsCount?: number | null
    guestsCount?: number | null
    duration?: number | null
    comment?: string | null
    specialRequests?: string | null
    totalPrice?: Decimal | DecimalJsLike | number | string | null
  }

  export type ReservationCreateOrConnectWithoutPaymentsInput = {
    where: ReservationWhereUniqueInput
    create: XOR<ReservationCreateWithoutPaymentsInput, ReservationUncheckedCreateWithoutPaymentsInput>
  }

  export type ReservationUpsertWithoutPaymentsInput = {
    update: XOR<ReservationUpdateWithoutPaymentsInput, ReservationUncheckedUpdateWithoutPaymentsInput>
    create: XOR<ReservationCreateWithoutPaymentsInput, ReservationUncheckedCreateWithoutPaymentsInput>
    where?: ReservationWhereInput
  }

  export type ReservationUpdateToOneWithWhereWithoutPaymentsInput = {
    where?: ReservationWhereInput
    data: XOR<ReservationUpdateWithoutPaymentsInput, ReservationUncheckedUpdateWithoutPaymentsInput>
  }

  export type ReservationUpdateWithoutPaymentsInput = {
    type?: EnumReservationTypeFieldUpdateOperationsInput | $Enums.ReservationType
    userName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    startsAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endsAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deposit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumReservationStatusFieldUpdateOperationsInput | $Enums.ReservationStatus
    seatsCount?: NullableIntFieldUpdateOperationsInput | number | null
    guestsCount?: NullableIntFieldUpdateOperationsInput | number | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    specialRequests?: NullableStringFieldUpdateOperationsInput | string | null
    totalPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    zoneItem?: ZoneItemUpdateOneRequiredWithoutReservationsNestedInput
  }

  export type ReservationUncheckedUpdateWithoutPaymentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    zoneItemId?: IntFieldUpdateOperationsInput | number
    type?: EnumReservationTypeFieldUpdateOperationsInput | $Enums.ReservationType
    userName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    startsAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endsAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deposit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumReservationStatusFieldUpdateOperationsInput | $Enums.ReservationStatus
    seatsCount?: NullableIntFieldUpdateOperationsInput | number | null
    guestsCount?: NullableIntFieldUpdateOperationsInput | number | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    specialRequests?: NullableStringFieldUpdateOperationsInput | string | null
    totalPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type MenuCategoryCreateWithoutMenuTypeInput = {
    name: string
    slug: string
    description?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: MenuItemCreateNestedManyWithoutCategoryInput
  }

  export type MenuCategoryUncheckedCreateWithoutMenuTypeInput = {
    id?: number
    name: string
    slug: string
    description?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: MenuItemUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type MenuCategoryCreateOrConnectWithoutMenuTypeInput = {
    where: MenuCategoryWhereUniqueInput
    create: XOR<MenuCategoryCreateWithoutMenuTypeInput, MenuCategoryUncheckedCreateWithoutMenuTypeInput>
  }

  export type MenuCategoryCreateManyMenuTypeInputEnvelope = {
    data: MenuCategoryCreateManyMenuTypeInput | MenuCategoryCreateManyMenuTypeInput[]
    skipDuplicates?: boolean
  }

  export type MenuCategoryUpsertWithWhereUniqueWithoutMenuTypeInput = {
    where: MenuCategoryWhereUniqueInput
    update: XOR<MenuCategoryUpdateWithoutMenuTypeInput, MenuCategoryUncheckedUpdateWithoutMenuTypeInput>
    create: XOR<MenuCategoryCreateWithoutMenuTypeInput, MenuCategoryUncheckedCreateWithoutMenuTypeInput>
  }

  export type MenuCategoryUpdateWithWhereUniqueWithoutMenuTypeInput = {
    where: MenuCategoryWhereUniqueInput
    data: XOR<MenuCategoryUpdateWithoutMenuTypeInput, MenuCategoryUncheckedUpdateWithoutMenuTypeInput>
  }

  export type MenuCategoryUpdateManyWithWhereWithoutMenuTypeInput = {
    where: MenuCategoryScalarWhereInput
    data: XOR<MenuCategoryUpdateManyMutationInput, MenuCategoryUncheckedUpdateManyWithoutMenuTypeInput>
  }

  export type MenuCategoryScalarWhereInput = {
    AND?: MenuCategoryScalarWhereInput | MenuCategoryScalarWhereInput[]
    OR?: MenuCategoryScalarWhereInput[]
    NOT?: MenuCategoryScalarWhereInput | MenuCategoryScalarWhereInput[]
    id?: IntFilter<"MenuCategory"> | number
    menuTypeId?: IntFilter<"MenuCategory"> | number
    name?: StringFilter<"MenuCategory"> | string
    slug?: StringFilter<"MenuCategory"> | string
    description?: StringNullableFilter<"MenuCategory"> | string | null
    isActive?: BoolFilter<"MenuCategory"> | boolean
    sortOrder?: IntFilter<"MenuCategory"> | number
    createdAt?: DateTimeFilter<"MenuCategory"> | Date | string
    updatedAt?: DateTimeFilter<"MenuCategory"> | Date | string
  }

  export type MenuTypeCreateWithoutCategoriesInput = {
    name: string
    slug: string
    description?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MenuTypeUncheckedCreateWithoutCategoriesInput = {
    id?: number
    name: string
    slug: string
    description?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MenuTypeCreateOrConnectWithoutCategoriesInput = {
    where: MenuTypeWhereUniqueInput
    create: XOR<MenuTypeCreateWithoutCategoriesInput, MenuTypeUncheckedCreateWithoutCategoriesInput>
  }

  export type MenuItemCreateWithoutCategoryInput = {
    name: string
    description?: string | null
    price: Decimal | DecimalJsLike | number | string
    imageUrl?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MenuItemUncheckedCreateWithoutCategoryInput = {
    id?: number
    name: string
    description?: string | null
    price: Decimal | DecimalJsLike | number | string
    imageUrl?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MenuItemCreateOrConnectWithoutCategoryInput = {
    where: MenuItemWhereUniqueInput
    create: XOR<MenuItemCreateWithoutCategoryInput, MenuItemUncheckedCreateWithoutCategoryInput>
  }

  export type MenuItemCreateManyCategoryInputEnvelope = {
    data: MenuItemCreateManyCategoryInput | MenuItemCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type MenuTypeUpsertWithoutCategoriesInput = {
    update: XOR<MenuTypeUpdateWithoutCategoriesInput, MenuTypeUncheckedUpdateWithoutCategoriesInput>
    create: XOR<MenuTypeCreateWithoutCategoriesInput, MenuTypeUncheckedCreateWithoutCategoriesInput>
    where?: MenuTypeWhereInput
  }

  export type MenuTypeUpdateToOneWithWhereWithoutCategoriesInput = {
    where?: MenuTypeWhereInput
    data: XOR<MenuTypeUpdateWithoutCategoriesInput, MenuTypeUncheckedUpdateWithoutCategoriesInput>
  }

  export type MenuTypeUpdateWithoutCategoriesInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MenuTypeUncheckedUpdateWithoutCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MenuItemUpsertWithWhereUniqueWithoutCategoryInput = {
    where: MenuItemWhereUniqueInput
    update: XOR<MenuItemUpdateWithoutCategoryInput, MenuItemUncheckedUpdateWithoutCategoryInput>
    create: XOR<MenuItemCreateWithoutCategoryInput, MenuItemUncheckedCreateWithoutCategoryInput>
  }

  export type MenuItemUpdateWithWhereUniqueWithoutCategoryInput = {
    where: MenuItemWhereUniqueInput
    data: XOR<MenuItemUpdateWithoutCategoryInput, MenuItemUncheckedUpdateWithoutCategoryInput>
  }

  export type MenuItemUpdateManyWithWhereWithoutCategoryInput = {
    where: MenuItemScalarWhereInput
    data: XOR<MenuItemUpdateManyMutationInput, MenuItemUncheckedUpdateManyWithoutCategoryInput>
  }

  export type MenuItemScalarWhereInput = {
    AND?: MenuItemScalarWhereInput | MenuItemScalarWhereInput[]
    OR?: MenuItemScalarWhereInput[]
    NOT?: MenuItemScalarWhereInput | MenuItemScalarWhereInput[]
    id?: IntFilter<"MenuItem"> | number
    categoryId?: IntFilter<"MenuItem"> | number
    name?: StringFilter<"MenuItem"> | string
    description?: StringNullableFilter<"MenuItem"> | string | null
    price?: DecimalFilter<"MenuItem"> | Decimal | DecimalJsLike | number | string
    imageUrl?: StringNullableFilter<"MenuItem"> | string | null
    isActive?: BoolFilter<"MenuItem"> | boolean
    sortOrder?: IntFilter<"MenuItem"> | number
    createdAt?: DateTimeFilter<"MenuItem"> | Date | string
    updatedAt?: DateTimeFilter<"MenuItem"> | Date | string
  }

  export type MenuCategoryCreateWithoutItemsInput = {
    name: string
    slug: string
    description?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    menuType: MenuTypeCreateNestedOneWithoutCategoriesInput
  }

  export type MenuCategoryUncheckedCreateWithoutItemsInput = {
    id?: number
    menuTypeId: number
    name: string
    slug: string
    description?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MenuCategoryCreateOrConnectWithoutItemsInput = {
    where: MenuCategoryWhereUniqueInput
    create: XOR<MenuCategoryCreateWithoutItemsInput, MenuCategoryUncheckedCreateWithoutItemsInput>
  }

  export type MenuCategoryUpsertWithoutItemsInput = {
    update: XOR<MenuCategoryUpdateWithoutItemsInput, MenuCategoryUncheckedUpdateWithoutItemsInput>
    create: XOR<MenuCategoryCreateWithoutItemsInput, MenuCategoryUncheckedCreateWithoutItemsInput>
    where?: MenuCategoryWhereInput
  }

  export type MenuCategoryUpdateToOneWithWhereWithoutItemsInput = {
    where?: MenuCategoryWhereInput
    data: XOR<MenuCategoryUpdateWithoutItemsInput, MenuCategoryUncheckedUpdateWithoutItemsInput>
  }

  export type MenuCategoryUpdateWithoutItemsInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    menuType?: MenuTypeUpdateOneRequiredWithoutCategoriesNestedInput
  }

  export type MenuCategoryUncheckedUpdateWithoutItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    menuTypeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ordersCreateWithoutOrder_itemsInput = {
    first_name: string
    last_name: string
    email: string
    phone: string
    status?: $Enums.OrderStatus
    total_amount: Decimal | DecimalJsLike | number | string
    payment_id?: string | null
    payment_method?: string | null
    created_at?: Date | string
    updated_at: Date | string
    users?: usersCreateNestedOneWithoutOrdersInput
    user_tickets?: user_ticketsCreateNestedManyWithoutOrdersInput
  }

  export type ordersUncheckedCreateWithoutOrder_itemsInput = {
    id?: number
    user_id?: number | null
    first_name: string
    last_name: string
    email: string
    phone: string
    status?: $Enums.OrderStatus
    total_amount: Decimal | DecimalJsLike | number | string
    payment_id?: string | null
    payment_method?: string | null
    created_at?: Date | string
    updated_at: Date | string
    user_tickets?: user_ticketsUncheckedCreateNestedManyWithoutOrdersInput
  }

  export type ordersCreateOrConnectWithoutOrder_itemsInput = {
    where: ordersWhereUniqueInput
    create: XOR<ordersCreateWithoutOrder_itemsInput, ordersUncheckedCreateWithoutOrder_itemsInput>
  }

  export type user_ticketsCreateWithoutOrder_itemsInput = {
    ticket_number: string
    qr_code?: string | null
    purchase_date?: Date | string
    is_used?: boolean
    used_at?: Date | string | null
    payment_status?: $Enums.PaymentStatus
    payment_id?: string | null
    expires_at?: Date | string | null
    created_at?: Date | string
    updated_at: Date | string
    email?: string | null
    first_name?: string | null
    last_name?: string | null
    phone?: string | null
    refund_tickets?: refund_ticketsCreateNestedManyWithoutUser_ticketsInput
    tickets: ticketsCreateNestedOneWithoutUser_ticketsInput
    users?: usersCreateNestedOneWithoutUser_ticketsInput
    orders?: ordersCreateNestedManyWithoutUser_ticketsInput
    refunds?: refundsCreateNestedManyWithoutUser_ticketsInput
  }

  export type user_ticketsUncheckedCreateWithoutOrder_itemsInput = {
    id?: number
    user_id?: number | null
    ticket_id: number
    ticket_number: string
    qr_code?: string | null
    purchase_date?: Date | string
    is_used?: boolean
    used_at?: Date | string | null
    payment_status?: $Enums.PaymentStatus
    payment_id?: string | null
    expires_at?: Date | string | null
    created_at?: Date | string
    updated_at: Date | string
    email?: string | null
    first_name?: string | null
    last_name?: string | null
    phone?: string | null
    refund_tickets?: refund_ticketsUncheckedCreateNestedManyWithoutUser_ticketsInput
    orders?: ordersUncheckedCreateNestedManyWithoutUser_ticketsInput
    refunds?: refundsUncheckedCreateNestedManyWithoutUser_ticketsInput
  }

  export type user_ticketsCreateOrConnectWithoutOrder_itemsInput = {
    where: user_ticketsWhereUniqueInput
    create: XOR<user_ticketsCreateWithoutOrder_itemsInput, user_ticketsUncheckedCreateWithoutOrder_itemsInput>
  }

  export type ordersUpsertWithoutOrder_itemsInput = {
    update: XOR<ordersUpdateWithoutOrder_itemsInput, ordersUncheckedUpdateWithoutOrder_itemsInput>
    create: XOR<ordersCreateWithoutOrder_itemsInput, ordersUncheckedCreateWithoutOrder_itemsInput>
    where?: ordersWhereInput
  }

  export type ordersUpdateToOneWithWhereWithoutOrder_itemsInput = {
    where?: ordersWhereInput
    data: XOR<ordersUpdateWithoutOrder_itemsInput, ordersUncheckedUpdateWithoutOrder_itemsInput>
  }

  export type ordersUpdateWithoutOrder_itemsInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    total_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    payment_id?: NullableStringFieldUpdateOperationsInput | string | null
    payment_method?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: usersUpdateOneWithoutOrdersNestedInput
    user_tickets?: user_ticketsUpdateManyWithoutOrdersNestedInput
  }

  export type ordersUncheckedUpdateWithoutOrder_itemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    total_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    payment_id?: NullableStringFieldUpdateOperationsInput | string | null
    payment_method?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_tickets?: user_ticketsUncheckedUpdateManyWithoutOrdersNestedInput
  }

  export type user_ticketsUpsertWithoutOrder_itemsInput = {
    update: XOR<user_ticketsUpdateWithoutOrder_itemsInput, user_ticketsUncheckedUpdateWithoutOrder_itemsInput>
    create: XOR<user_ticketsCreateWithoutOrder_itemsInput, user_ticketsUncheckedCreateWithoutOrder_itemsInput>
    where?: user_ticketsWhereInput
  }

  export type user_ticketsUpdateToOneWithWhereWithoutOrder_itemsInput = {
    where?: user_ticketsWhereInput
    data: XOR<user_ticketsUpdateWithoutOrder_itemsInput, user_ticketsUncheckedUpdateWithoutOrder_itemsInput>
  }

  export type user_ticketsUpdateWithoutOrder_itemsInput = {
    ticket_number?: StringFieldUpdateOperationsInput | string
    qr_code?: NullableStringFieldUpdateOperationsInput | string | null
    purchase_date?: DateTimeFieldUpdateOperationsInput | Date | string
    is_used?: BoolFieldUpdateOperationsInput | boolean
    used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    payment_id?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    refund_tickets?: refund_ticketsUpdateManyWithoutUser_ticketsNestedInput
    tickets?: ticketsUpdateOneRequiredWithoutUser_ticketsNestedInput
    users?: usersUpdateOneWithoutUser_ticketsNestedInput
    orders?: ordersUpdateManyWithoutUser_ticketsNestedInput
    refunds?: refundsUpdateManyWithoutUser_ticketsNestedInput
  }

  export type user_ticketsUncheckedUpdateWithoutOrder_itemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    ticket_id?: IntFieldUpdateOperationsInput | number
    ticket_number?: StringFieldUpdateOperationsInput | string
    qr_code?: NullableStringFieldUpdateOperationsInput | string | null
    purchase_date?: DateTimeFieldUpdateOperationsInput | Date | string
    is_used?: BoolFieldUpdateOperationsInput | boolean
    used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    payment_id?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    refund_tickets?: refund_ticketsUncheckedUpdateManyWithoutUser_ticketsNestedInput
    orders?: ordersUncheckedUpdateManyWithoutUser_ticketsNestedInput
    refunds?: refundsUncheckedUpdateManyWithoutUser_ticketsNestedInput
  }

  export type order_itemsCreateWithoutOrdersInput = {
    price: Decimal | DecimalJsLike | number | string
    quantity?: number
    user_tickets: user_ticketsCreateNestedOneWithoutOrder_itemsInput
  }

  export type order_itemsUncheckedCreateWithoutOrdersInput = {
    id?: number
    user_ticket_id: number
    price: Decimal | DecimalJsLike | number | string
    quantity?: number
  }

  export type order_itemsCreateOrConnectWithoutOrdersInput = {
    where: order_itemsWhereUniqueInput
    create: XOR<order_itemsCreateWithoutOrdersInput, order_itemsUncheckedCreateWithoutOrdersInput>
  }

  export type order_itemsCreateManyOrdersInputEnvelope = {
    data: order_itemsCreateManyOrdersInput | order_itemsCreateManyOrdersInput[]
    skipDuplicates?: boolean
  }

  export type usersCreateWithoutOrdersInput = {
    telegram_id?: bigint | number | null
    username?: string | null
    first_name?: string
    last_name?: string | null
    is_admin?: boolean
    language_code?: string | null
    is_bot?: boolean
    phone?: string | null
    email?: string | null
    created_at?: Date | string
    updated_at: Date | string
    refunds?: refundsCreateNestedManyWithoutUsersInput
    tickets?: ticketsCreateNestedManyWithoutUsersInput
    user_tickets?: user_ticketsCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutOrdersInput = {
    id?: number
    telegram_id?: bigint | number | null
    username?: string | null
    first_name?: string
    last_name?: string | null
    is_admin?: boolean
    language_code?: string | null
    is_bot?: boolean
    phone?: string | null
    email?: string | null
    created_at?: Date | string
    updated_at: Date | string
    refunds?: refundsUncheckedCreateNestedManyWithoutUsersInput
    tickets?: ticketsUncheckedCreateNestedManyWithoutUsersInput
    user_tickets?: user_ticketsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutOrdersInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutOrdersInput, usersUncheckedCreateWithoutOrdersInput>
  }

  export type user_ticketsCreateWithoutOrdersInput = {
    ticket_number: string
    qr_code?: string | null
    purchase_date?: Date | string
    is_used?: boolean
    used_at?: Date | string | null
    payment_status?: $Enums.PaymentStatus
    payment_id?: string | null
    expires_at?: Date | string | null
    created_at?: Date | string
    updated_at: Date | string
    email?: string | null
    first_name?: string | null
    last_name?: string | null
    phone?: string | null
    order_items?: order_itemsCreateNestedOneWithoutUser_ticketsInput
    refund_tickets?: refund_ticketsCreateNestedManyWithoutUser_ticketsInput
    tickets: ticketsCreateNestedOneWithoutUser_ticketsInput
    users?: usersCreateNestedOneWithoutUser_ticketsInput
    refunds?: refundsCreateNestedManyWithoutUser_ticketsInput
  }

  export type user_ticketsUncheckedCreateWithoutOrdersInput = {
    id?: number
    user_id?: number | null
    ticket_id: number
    ticket_number: string
    qr_code?: string | null
    purchase_date?: Date | string
    is_used?: boolean
    used_at?: Date | string | null
    payment_status?: $Enums.PaymentStatus
    payment_id?: string | null
    expires_at?: Date | string | null
    created_at?: Date | string
    updated_at: Date | string
    email?: string | null
    first_name?: string | null
    last_name?: string | null
    phone?: string | null
    order_items?: order_itemsUncheckedCreateNestedOneWithoutUser_ticketsInput
    refund_tickets?: refund_ticketsUncheckedCreateNestedManyWithoutUser_ticketsInput
    refunds?: refundsUncheckedCreateNestedManyWithoutUser_ticketsInput
  }

  export type user_ticketsCreateOrConnectWithoutOrdersInput = {
    where: user_ticketsWhereUniqueInput
    create: XOR<user_ticketsCreateWithoutOrdersInput, user_ticketsUncheckedCreateWithoutOrdersInput>
  }

  export type order_itemsUpsertWithWhereUniqueWithoutOrdersInput = {
    where: order_itemsWhereUniqueInput
    update: XOR<order_itemsUpdateWithoutOrdersInput, order_itemsUncheckedUpdateWithoutOrdersInput>
    create: XOR<order_itemsCreateWithoutOrdersInput, order_itemsUncheckedCreateWithoutOrdersInput>
  }

  export type order_itemsUpdateWithWhereUniqueWithoutOrdersInput = {
    where: order_itemsWhereUniqueInput
    data: XOR<order_itemsUpdateWithoutOrdersInput, order_itemsUncheckedUpdateWithoutOrdersInput>
  }

  export type order_itemsUpdateManyWithWhereWithoutOrdersInput = {
    where: order_itemsScalarWhereInput
    data: XOR<order_itemsUpdateManyMutationInput, order_itemsUncheckedUpdateManyWithoutOrdersInput>
  }

  export type order_itemsScalarWhereInput = {
    AND?: order_itemsScalarWhereInput | order_itemsScalarWhereInput[]
    OR?: order_itemsScalarWhereInput[]
    NOT?: order_itemsScalarWhereInput | order_itemsScalarWhereInput[]
    id?: IntFilter<"order_items"> | number
    order_id?: IntFilter<"order_items"> | number
    user_ticket_id?: IntFilter<"order_items"> | number
    price?: DecimalFilter<"order_items"> | Decimal | DecimalJsLike | number | string
    quantity?: IntFilter<"order_items"> | number
  }

  export type usersUpsertWithoutOrdersInput = {
    update: XOR<usersUpdateWithoutOrdersInput, usersUncheckedUpdateWithoutOrdersInput>
    create: XOR<usersCreateWithoutOrdersInput, usersUncheckedCreateWithoutOrdersInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutOrdersInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutOrdersInput, usersUncheckedUpdateWithoutOrdersInput>
  }

  export type usersUpdateWithoutOrdersInput = {
    telegram_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_admin?: BoolFieldUpdateOperationsInput | boolean
    language_code?: NullableStringFieldUpdateOperationsInput | string | null
    is_bot?: BoolFieldUpdateOperationsInput | boolean
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    refunds?: refundsUpdateManyWithoutUsersNestedInput
    tickets?: ticketsUpdateManyWithoutUsersNestedInput
    user_tickets?: user_ticketsUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutOrdersInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegram_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_admin?: BoolFieldUpdateOperationsInput | boolean
    language_code?: NullableStringFieldUpdateOperationsInput | string | null
    is_bot?: BoolFieldUpdateOperationsInput | boolean
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    refunds?: refundsUncheckedUpdateManyWithoutUsersNestedInput
    tickets?: ticketsUncheckedUpdateManyWithoutUsersNestedInput
    user_tickets?: user_ticketsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type user_ticketsUpsertWithWhereUniqueWithoutOrdersInput = {
    where: user_ticketsWhereUniqueInput
    update: XOR<user_ticketsUpdateWithoutOrdersInput, user_ticketsUncheckedUpdateWithoutOrdersInput>
    create: XOR<user_ticketsCreateWithoutOrdersInput, user_ticketsUncheckedCreateWithoutOrdersInput>
  }

  export type user_ticketsUpdateWithWhereUniqueWithoutOrdersInput = {
    where: user_ticketsWhereUniqueInput
    data: XOR<user_ticketsUpdateWithoutOrdersInput, user_ticketsUncheckedUpdateWithoutOrdersInput>
  }

  export type user_ticketsUpdateManyWithWhereWithoutOrdersInput = {
    where: user_ticketsScalarWhereInput
    data: XOR<user_ticketsUpdateManyMutationInput, user_ticketsUncheckedUpdateManyWithoutOrdersInput>
  }

  export type user_ticketsScalarWhereInput = {
    AND?: user_ticketsScalarWhereInput | user_ticketsScalarWhereInput[]
    OR?: user_ticketsScalarWhereInput[]
    NOT?: user_ticketsScalarWhereInput | user_ticketsScalarWhereInput[]
    id?: IntFilter<"user_tickets"> | number
    user_id?: IntNullableFilter<"user_tickets"> | number | null
    ticket_id?: IntFilter<"user_tickets"> | number
    ticket_number?: StringFilter<"user_tickets"> | string
    qr_code?: StringNullableFilter<"user_tickets"> | string | null
    purchase_date?: DateTimeFilter<"user_tickets"> | Date | string
    is_used?: BoolFilter<"user_tickets"> | boolean
    used_at?: DateTimeNullableFilter<"user_tickets"> | Date | string | null
    payment_status?: EnumPaymentStatusFilter<"user_tickets"> | $Enums.PaymentStatus
    payment_id?: StringNullableFilter<"user_tickets"> | string | null
    expires_at?: DateTimeNullableFilter<"user_tickets"> | Date | string | null
    created_at?: DateTimeFilter<"user_tickets"> | Date | string
    updated_at?: DateTimeFilter<"user_tickets"> | Date | string
    email?: StringNullableFilter<"user_tickets"> | string | null
    first_name?: StringNullableFilter<"user_tickets"> | string | null
    last_name?: StringNullableFilter<"user_tickets"> | string | null
    phone?: StringNullableFilter<"user_tickets"> | string | null
  }

  export type refundsCreateWithoutRefund_ticketsInput = {
    email: string
    phone: string
    full_name: string
    account_number: string
    bank_name: string
    bik: string
    correspondent_account: string
    inn: string
    kpp?: string | null
    okpo?: string | null
    ogrn?: string | null
    refund_amount: Decimal | DecimalJsLike | number | string
    refund_reason: string
    created_at?: Date | string
    updated_at: Date | string
    deleted_at?: Date | string | null
    users?: usersCreateNestedOneWithoutRefundsInput
    user_tickets?: user_ticketsCreateNestedManyWithoutRefundsInput
  }

  export type refundsUncheckedCreateWithoutRefund_ticketsInput = {
    id?: number
    user_id?: number | null
    email: string
    phone: string
    full_name: string
    account_number: string
    bank_name: string
    bik: string
    correspondent_account: string
    inn: string
    kpp?: string | null
    okpo?: string | null
    ogrn?: string | null
    refund_amount: Decimal | DecimalJsLike | number | string
    refund_reason: string
    created_at?: Date | string
    updated_at: Date | string
    deleted_at?: Date | string | null
    user_tickets?: user_ticketsUncheckedCreateNestedManyWithoutRefundsInput
  }

  export type refundsCreateOrConnectWithoutRefund_ticketsInput = {
    where: refundsWhereUniqueInput
    create: XOR<refundsCreateWithoutRefund_ticketsInput, refundsUncheckedCreateWithoutRefund_ticketsInput>
  }

  export type user_ticketsCreateWithoutRefund_ticketsInput = {
    ticket_number: string
    qr_code?: string | null
    purchase_date?: Date | string
    is_used?: boolean
    used_at?: Date | string | null
    payment_status?: $Enums.PaymentStatus
    payment_id?: string | null
    expires_at?: Date | string | null
    created_at?: Date | string
    updated_at: Date | string
    email?: string | null
    first_name?: string | null
    last_name?: string | null
    phone?: string | null
    order_items?: order_itemsCreateNestedOneWithoutUser_ticketsInput
    tickets: ticketsCreateNestedOneWithoutUser_ticketsInput
    users?: usersCreateNestedOneWithoutUser_ticketsInput
    orders?: ordersCreateNestedManyWithoutUser_ticketsInput
    refunds?: refundsCreateNestedManyWithoutUser_ticketsInput
  }

  export type user_ticketsUncheckedCreateWithoutRefund_ticketsInput = {
    id?: number
    user_id?: number | null
    ticket_id: number
    ticket_number: string
    qr_code?: string | null
    purchase_date?: Date | string
    is_used?: boolean
    used_at?: Date | string | null
    payment_status?: $Enums.PaymentStatus
    payment_id?: string | null
    expires_at?: Date | string | null
    created_at?: Date | string
    updated_at: Date | string
    email?: string | null
    first_name?: string | null
    last_name?: string | null
    phone?: string | null
    order_items?: order_itemsUncheckedCreateNestedOneWithoutUser_ticketsInput
    orders?: ordersUncheckedCreateNestedManyWithoutUser_ticketsInput
    refunds?: refundsUncheckedCreateNestedManyWithoutUser_ticketsInput
  }

  export type user_ticketsCreateOrConnectWithoutRefund_ticketsInput = {
    where: user_ticketsWhereUniqueInput
    create: XOR<user_ticketsCreateWithoutRefund_ticketsInput, user_ticketsUncheckedCreateWithoutRefund_ticketsInput>
  }

  export type refundsUpsertWithoutRefund_ticketsInput = {
    update: XOR<refundsUpdateWithoutRefund_ticketsInput, refundsUncheckedUpdateWithoutRefund_ticketsInput>
    create: XOR<refundsCreateWithoutRefund_ticketsInput, refundsUncheckedCreateWithoutRefund_ticketsInput>
    where?: refundsWhereInput
  }

  export type refundsUpdateToOneWithWhereWithoutRefund_ticketsInput = {
    where?: refundsWhereInput
    data: XOR<refundsUpdateWithoutRefund_ticketsInput, refundsUncheckedUpdateWithoutRefund_ticketsInput>
  }

  export type refundsUpdateWithoutRefund_ticketsInput = {
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    account_number?: StringFieldUpdateOperationsInput | string
    bank_name?: StringFieldUpdateOperationsInput | string
    bik?: StringFieldUpdateOperationsInput | string
    correspondent_account?: StringFieldUpdateOperationsInput | string
    inn?: StringFieldUpdateOperationsInput | string
    kpp?: NullableStringFieldUpdateOperationsInput | string | null
    okpo?: NullableStringFieldUpdateOperationsInput | string | null
    ogrn?: NullableStringFieldUpdateOperationsInput | string | null
    refund_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    refund_reason?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: usersUpdateOneWithoutRefundsNestedInput
    user_tickets?: user_ticketsUpdateManyWithoutRefundsNestedInput
  }

  export type refundsUncheckedUpdateWithoutRefund_ticketsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    account_number?: StringFieldUpdateOperationsInput | string
    bank_name?: StringFieldUpdateOperationsInput | string
    bik?: StringFieldUpdateOperationsInput | string
    correspondent_account?: StringFieldUpdateOperationsInput | string
    inn?: StringFieldUpdateOperationsInput | string
    kpp?: NullableStringFieldUpdateOperationsInput | string | null
    okpo?: NullableStringFieldUpdateOperationsInput | string | null
    ogrn?: NullableStringFieldUpdateOperationsInput | string | null
    refund_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    refund_reason?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user_tickets?: user_ticketsUncheckedUpdateManyWithoutRefundsNestedInput
  }

  export type user_ticketsUpsertWithoutRefund_ticketsInput = {
    update: XOR<user_ticketsUpdateWithoutRefund_ticketsInput, user_ticketsUncheckedUpdateWithoutRefund_ticketsInput>
    create: XOR<user_ticketsCreateWithoutRefund_ticketsInput, user_ticketsUncheckedCreateWithoutRefund_ticketsInput>
    where?: user_ticketsWhereInput
  }

  export type user_ticketsUpdateToOneWithWhereWithoutRefund_ticketsInput = {
    where?: user_ticketsWhereInput
    data: XOR<user_ticketsUpdateWithoutRefund_ticketsInput, user_ticketsUncheckedUpdateWithoutRefund_ticketsInput>
  }

  export type user_ticketsUpdateWithoutRefund_ticketsInput = {
    ticket_number?: StringFieldUpdateOperationsInput | string
    qr_code?: NullableStringFieldUpdateOperationsInput | string | null
    purchase_date?: DateTimeFieldUpdateOperationsInput | Date | string
    is_used?: BoolFieldUpdateOperationsInput | boolean
    used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    payment_id?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    order_items?: order_itemsUpdateOneWithoutUser_ticketsNestedInput
    tickets?: ticketsUpdateOneRequiredWithoutUser_ticketsNestedInput
    users?: usersUpdateOneWithoutUser_ticketsNestedInput
    orders?: ordersUpdateManyWithoutUser_ticketsNestedInput
    refunds?: refundsUpdateManyWithoutUser_ticketsNestedInput
  }

  export type user_ticketsUncheckedUpdateWithoutRefund_ticketsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    ticket_id?: IntFieldUpdateOperationsInput | number
    ticket_number?: StringFieldUpdateOperationsInput | string
    qr_code?: NullableStringFieldUpdateOperationsInput | string | null
    purchase_date?: DateTimeFieldUpdateOperationsInput | Date | string
    is_used?: BoolFieldUpdateOperationsInput | boolean
    used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    payment_id?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    order_items?: order_itemsUncheckedUpdateOneWithoutUser_ticketsNestedInput
    orders?: ordersUncheckedUpdateManyWithoutUser_ticketsNestedInput
    refunds?: refundsUncheckedUpdateManyWithoutUser_ticketsNestedInput
  }

  export type refund_ticketsCreateWithoutRefundsInput = {
    ticket_number: string
    refund_amount: Decimal | DecimalJsLike | number | string
    user_tickets: user_ticketsCreateNestedOneWithoutRefund_ticketsInput
  }

  export type refund_ticketsUncheckedCreateWithoutRefundsInput = {
    user_ticket_id: number
    ticket_number: string
    refund_amount: Decimal | DecimalJsLike | number | string
  }

  export type refund_ticketsCreateOrConnectWithoutRefundsInput = {
    where: refund_ticketsWhereUniqueInput
    create: XOR<refund_ticketsCreateWithoutRefundsInput, refund_ticketsUncheckedCreateWithoutRefundsInput>
  }

  export type refund_ticketsCreateManyRefundsInputEnvelope = {
    data: refund_ticketsCreateManyRefundsInput | refund_ticketsCreateManyRefundsInput[]
    skipDuplicates?: boolean
  }

  export type usersCreateWithoutRefundsInput = {
    telegram_id?: bigint | number | null
    username?: string | null
    first_name?: string
    last_name?: string | null
    is_admin?: boolean
    language_code?: string | null
    is_bot?: boolean
    phone?: string | null
    email?: string | null
    created_at?: Date | string
    updated_at: Date | string
    orders?: ordersCreateNestedManyWithoutUsersInput
    tickets?: ticketsCreateNestedManyWithoutUsersInput
    user_tickets?: user_ticketsCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutRefundsInput = {
    id?: number
    telegram_id?: bigint | number | null
    username?: string | null
    first_name?: string
    last_name?: string | null
    is_admin?: boolean
    language_code?: string | null
    is_bot?: boolean
    phone?: string | null
    email?: string | null
    created_at?: Date | string
    updated_at: Date | string
    orders?: ordersUncheckedCreateNestedManyWithoutUsersInput
    tickets?: ticketsUncheckedCreateNestedManyWithoutUsersInput
    user_tickets?: user_ticketsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutRefundsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutRefundsInput, usersUncheckedCreateWithoutRefundsInput>
  }

  export type user_ticketsCreateWithoutRefundsInput = {
    ticket_number: string
    qr_code?: string | null
    purchase_date?: Date | string
    is_used?: boolean
    used_at?: Date | string | null
    payment_status?: $Enums.PaymentStatus
    payment_id?: string | null
    expires_at?: Date | string | null
    created_at?: Date | string
    updated_at: Date | string
    email?: string | null
    first_name?: string | null
    last_name?: string | null
    phone?: string | null
    order_items?: order_itemsCreateNestedOneWithoutUser_ticketsInput
    refund_tickets?: refund_ticketsCreateNestedManyWithoutUser_ticketsInput
    tickets: ticketsCreateNestedOneWithoutUser_ticketsInput
    users?: usersCreateNestedOneWithoutUser_ticketsInput
    orders?: ordersCreateNestedManyWithoutUser_ticketsInput
  }

  export type user_ticketsUncheckedCreateWithoutRefundsInput = {
    id?: number
    user_id?: number | null
    ticket_id: number
    ticket_number: string
    qr_code?: string | null
    purchase_date?: Date | string
    is_used?: boolean
    used_at?: Date | string | null
    payment_status?: $Enums.PaymentStatus
    payment_id?: string | null
    expires_at?: Date | string | null
    created_at?: Date | string
    updated_at: Date | string
    email?: string | null
    first_name?: string | null
    last_name?: string | null
    phone?: string | null
    order_items?: order_itemsUncheckedCreateNestedOneWithoutUser_ticketsInput
    refund_tickets?: refund_ticketsUncheckedCreateNestedManyWithoutUser_ticketsInput
    orders?: ordersUncheckedCreateNestedManyWithoutUser_ticketsInput
  }

  export type user_ticketsCreateOrConnectWithoutRefundsInput = {
    where: user_ticketsWhereUniqueInput
    create: XOR<user_ticketsCreateWithoutRefundsInput, user_ticketsUncheckedCreateWithoutRefundsInput>
  }

  export type refund_ticketsUpsertWithWhereUniqueWithoutRefundsInput = {
    where: refund_ticketsWhereUniqueInput
    update: XOR<refund_ticketsUpdateWithoutRefundsInput, refund_ticketsUncheckedUpdateWithoutRefundsInput>
    create: XOR<refund_ticketsCreateWithoutRefundsInput, refund_ticketsUncheckedCreateWithoutRefundsInput>
  }

  export type refund_ticketsUpdateWithWhereUniqueWithoutRefundsInput = {
    where: refund_ticketsWhereUniqueInput
    data: XOR<refund_ticketsUpdateWithoutRefundsInput, refund_ticketsUncheckedUpdateWithoutRefundsInput>
  }

  export type refund_ticketsUpdateManyWithWhereWithoutRefundsInput = {
    where: refund_ticketsScalarWhereInput
    data: XOR<refund_ticketsUpdateManyMutationInput, refund_ticketsUncheckedUpdateManyWithoutRefundsInput>
  }

  export type refund_ticketsScalarWhereInput = {
    AND?: refund_ticketsScalarWhereInput | refund_ticketsScalarWhereInput[]
    OR?: refund_ticketsScalarWhereInput[]
    NOT?: refund_ticketsScalarWhereInput | refund_ticketsScalarWhereInput[]
    refund_id?: IntFilter<"refund_tickets"> | number
    user_ticket_id?: IntFilter<"refund_tickets"> | number
    ticket_number?: StringFilter<"refund_tickets"> | string
    refund_amount?: DecimalFilter<"refund_tickets"> | Decimal | DecimalJsLike | number | string
  }

  export type usersUpsertWithoutRefundsInput = {
    update: XOR<usersUpdateWithoutRefundsInput, usersUncheckedUpdateWithoutRefundsInput>
    create: XOR<usersCreateWithoutRefundsInput, usersUncheckedCreateWithoutRefundsInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutRefundsInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutRefundsInput, usersUncheckedUpdateWithoutRefundsInput>
  }

  export type usersUpdateWithoutRefundsInput = {
    telegram_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_admin?: BoolFieldUpdateOperationsInput | boolean
    language_code?: NullableStringFieldUpdateOperationsInput | string | null
    is_bot?: BoolFieldUpdateOperationsInput | boolean
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: ordersUpdateManyWithoutUsersNestedInput
    tickets?: ticketsUpdateManyWithoutUsersNestedInput
    user_tickets?: user_ticketsUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutRefundsInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegram_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_admin?: BoolFieldUpdateOperationsInput | boolean
    language_code?: NullableStringFieldUpdateOperationsInput | string | null
    is_bot?: BoolFieldUpdateOperationsInput | boolean
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: ordersUncheckedUpdateManyWithoutUsersNestedInput
    tickets?: ticketsUncheckedUpdateManyWithoutUsersNestedInput
    user_tickets?: user_ticketsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type user_ticketsUpsertWithWhereUniqueWithoutRefundsInput = {
    where: user_ticketsWhereUniqueInput
    update: XOR<user_ticketsUpdateWithoutRefundsInput, user_ticketsUncheckedUpdateWithoutRefundsInput>
    create: XOR<user_ticketsCreateWithoutRefundsInput, user_ticketsUncheckedCreateWithoutRefundsInput>
  }

  export type user_ticketsUpdateWithWhereUniqueWithoutRefundsInput = {
    where: user_ticketsWhereUniqueInput
    data: XOR<user_ticketsUpdateWithoutRefundsInput, user_ticketsUncheckedUpdateWithoutRefundsInput>
  }

  export type user_ticketsUpdateManyWithWhereWithoutRefundsInput = {
    where: user_ticketsScalarWhereInput
    data: XOR<user_ticketsUpdateManyMutationInput, user_ticketsUncheckedUpdateManyWithoutRefundsInput>
  }

  export type usersCreateWithoutTicketsInput = {
    telegram_id?: bigint | number | null
    username?: string | null
    first_name?: string
    last_name?: string | null
    is_admin?: boolean
    language_code?: string | null
    is_bot?: boolean
    phone?: string | null
    email?: string | null
    created_at?: Date | string
    updated_at: Date | string
    orders?: ordersCreateNestedManyWithoutUsersInput
    refunds?: refundsCreateNestedManyWithoutUsersInput
    user_tickets?: user_ticketsCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutTicketsInput = {
    id?: number
    telegram_id?: bigint | number | null
    username?: string | null
    first_name?: string
    last_name?: string | null
    is_admin?: boolean
    language_code?: string | null
    is_bot?: boolean
    phone?: string | null
    email?: string | null
    created_at?: Date | string
    updated_at: Date | string
    orders?: ordersUncheckedCreateNestedManyWithoutUsersInput
    refunds?: refundsUncheckedCreateNestedManyWithoutUsersInput
    user_tickets?: user_ticketsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutTicketsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutTicketsInput, usersUncheckedCreateWithoutTicketsInput>
  }

  export type user_ticketsCreateWithoutTicketsInput = {
    ticket_number: string
    qr_code?: string | null
    purchase_date?: Date | string
    is_used?: boolean
    used_at?: Date | string | null
    payment_status?: $Enums.PaymentStatus
    payment_id?: string | null
    expires_at?: Date | string | null
    created_at?: Date | string
    updated_at: Date | string
    email?: string | null
    first_name?: string | null
    last_name?: string | null
    phone?: string | null
    order_items?: order_itemsCreateNestedOneWithoutUser_ticketsInput
    refund_tickets?: refund_ticketsCreateNestedManyWithoutUser_ticketsInput
    users?: usersCreateNestedOneWithoutUser_ticketsInput
    orders?: ordersCreateNestedManyWithoutUser_ticketsInput
    refunds?: refundsCreateNestedManyWithoutUser_ticketsInput
  }

  export type user_ticketsUncheckedCreateWithoutTicketsInput = {
    id?: number
    user_id?: number | null
    ticket_number: string
    qr_code?: string | null
    purchase_date?: Date | string
    is_used?: boolean
    used_at?: Date | string | null
    payment_status?: $Enums.PaymentStatus
    payment_id?: string | null
    expires_at?: Date | string | null
    created_at?: Date | string
    updated_at: Date | string
    email?: string | null
    first_name?: string | null
    last_name?: string | null
    phone?: string | null
    order_items?: order_itemsUncheckedCreateNestedOneWithoutUser_ticketsInput
    refund_tickets?: refund_ticketsUncheckedCreateNestedManyWithoutUser_ticketsInput
    orders?: ordersUncheckedCreateNestedManyWithoutUser_ticketsInput
    refunds?: refundsUncheckedCreateNestedManyWithoutUser_ticketsInput
  }

  export type user_ticketsCreateOrConnectWithoutTicketsInput = {
    where: user_ticketsWhereUniqueInput
    create: XOR<user_ticketsCreateWithoutTicketsInput, user_ticketsUncheckedCreateWithoutTicketsInput>
  }

  export type user_ticketsCreateManyTicketsInputEnvelope = {
    data: user_ticketsCreateManyTicketsInput | user_ticketsCreateManyTicketsInput[]
    skipDuplicates?: boolean
  }

  export type usersUpsertWithoutTicketsInput = {
    update: XOR<usersUpdateWithoutTicketsInput, usersUncheckedUpdateWithoutTicketsInput>
    create: XOR<usersCreateWithoutTicketsInput, usersUncheckedCreateWithoutTicketsInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutTicketsInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutTicketsInput, usersUncheckedUpdateWithoutTicketsInput>
  }

  export type usersUpdateWithoutTicketsInput = {
    telegram_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_admin?: BoolFieldUpdateOperationsInput | boolean
    language_code?: NullableStringFieldUpdateOperationsInput | string | null
    is_bot?: BoolFieldUpdateOperationsInput | boolean
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: ordersUpdateManyWithoutUsersNestedInput
    refunds?: refundsUpdateManyWithoutUsersNestedInput
    user_tickets?: user_ticketsUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutTicketsInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegram_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_admin?: BoolFieldUpdateOperationsInput | boolean
    language_code?: NullableStringFieldUpdateOperationsInput | string | null
    is_bot?: BoolFieldUpdateOperationsInput | boolean
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: ordersUncheckedUpdateManyWithoutUsersNestedInput
    refunds?: refundsUncheckedUpdateManyWithoutUsersNestedInput
    user_tickets?: user_ticketsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type user_ticketsUpsertWithWhereUniqueWithoutTicketsInput = {
    where: user_ticketsWhereUniqueInput
    update: XOR<user_ticketsUpdateWithoutTicketsInput, user_ticketsUncheckedUpdateWithoutTicketsInput>
    create: XOR<user_ticketsCreateWithoutTicketsInput, user_ticketsUncheckedCreateWithoutTicketsInput>
  }

  export type user_ticketsUpdateWithWhereUniqueWithoutTicketsInput = {
    where: user_ticketsWhereUniqueInput
    data: XOR<user_ticketsUpdateWithoutTicketsInput, user_ticketsUncheckedUpdateWithoutTicketsInput>
  }

  export type user_ticketsUpdateManyWithWhereWithoutTicketsInput = {
    where: user_ticketsScalarWhereInput
    data: XOR<user_ticketsUpdateManyMutationInput, user_ticketsUncheckedUpdateManyWithoutTicketsInput>
  }

  export type order_itemsCreateWithoutUser_ticketsInput = {
    price: Decimal | DecimalJsLike | number | string
    quantity?: number
    orders: ordersCreateNestedOneWithoutOrder_itemsInput
  }

  export type order_itemsUncheckedCreateWithoutUser_ticketsInput = {
    id?: number
    order_id: number
    price: Decimal | DecimalJsLike | number | string
    quantity?: number
  }

  export type order_itemsCreateOrConnectWithoutUser_ticketsInput = {
    where: order_itemsWhereUniqueInput
    create: XOR<order_itemsCreateWithoutUser_ticketsInput, order_itemsUncheckedCreateWithoutUser_ticketsInput>
  }

  export type refund_ticketsCreateWithoutUser_ticketsInput = {
    ticket_number: string
    refund_amount: Decimal | DecimalJsLike | number | string
    refunds: refundsCreateNestedOneWithoutRefund_ticketsInput
  }

  export type refund_ticketsUncheckedCreateWithoutUser_ticketsInput = {
    refund_id: number
    ticket_number: string
    refund_amount: Decimal | DecimalJsLike | number | string
  }

  export type refund_ticketsCreateOrConnectWithoutUser_ticketsInput = {
    where: refund_ticketsWhereUniqueInput
    create: XOR<refund_ticketsCreateWithoutUser_ticketsInput, refund_ticketsUncheckedCreateWithoutUser_ticketsInput>
  }

  export type refund_ticketsCreateManyUser_ticketsInputEnvelope = {
    data: refund_ticketsCreateManyUser_ticketsInput | refund_ticketsCreateManyUser_ticketsInput[]
    skipDuplicates?: boolean
  }

  export type ticketsCreateWithoutUser_ticketsInput = {
    title: string
    short_description?: string | null
    description?: string | null
    image_url?: string | null
    event_date: Date | string
    event_location: string
    price: Decimal | DecimalJsLike | number | string
    is_used?: boolean
    qr_code?: string | null
    ticket_number: string
    created_at?: Date | string
    updated_at: Date | string
    users?: usersCreateNestedOneWithoutTicketsInput
  }

  export type ticketsUncheckedCreateWithoutUser_ticketsInput = {
    id?: number
    title: string
    short_description?: string | null
    description?: string | null
    image_url?: string | null
    event_date: Date | string
    event_location: string
    price: Decimal | DecimalJsLike | number | string
    is_used?: boolean
    qr_code?: string | null
    ticket_number: string
    user_id?: number | null
    created_at?: Date | string
    updated_at: Date | string
  }

  export type ticketsCreateOrConnectWithoutUser_ticketsInput = {
    where: ticketsWhereUniqueInput
    create: XOR<ticketsCreateWithoutUser_ticketsInput, ticketsUncheckedCreateWithoutUser_ticketsInput>
  }

  export type usersCreateWithoutUser_ticketsInput = {
    telegram_id?: bigint | number | null
    username?: string | null
    first_name?: string
    last_name?: string | null
    is_admin?: boolean
    language_code?: string | null
    is_bot?: boolean
    phone?: string | null
    email?: string | null
    created_at?: Date | string
    updated_at: Date | string
    orders?: ordersCreateNestedManyWithoutUsersInput
    refunds?: refundsCreateNestedManyWithoutUsersInput
    tickets?: ticketsCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutUser_ticketsInput = {
    id?: number
    telegram_id?: bigint | number | null
    username?: string | null
    first_name?: string
    last_name?: string | null
    is_admin?: boolean
    language_code?: string | null
    is_bot?: boolean
    phone?: string | null
    email?: string | null
    created_at?: Date | string
    updated_at: Date | string
    orders?: ordersUncheckedCreateNestedManyWithoutUsersInput
    refunds?: refundsUncheckedCreateNestedManyWithoutUsersInput
    tickets?: ticketsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutUser_ticketsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutUser_ticketsInput, usersUncheckedCreateWithoutUser_ticketsInput>
  }

  export type ordersCreateWithoutUser_ticketsInput = {
    first_name: string
    last_name: string
    email: string
    phone: string
    status?: $Enums.OrderStatus
    total_amount: Decimal | DecimalJsLike | number | string
    payment_id?: string | null
    payment_method?: string | null
    created_at?: Date | string
    updated_at: Date | string
    order_items?: order_itemsCreateNestedManyWithoutOrdersInput
    users?: usersCreateNestedOneWithoutOrdersInput
  }

  export type ordersUncheckedCreateWithoutUser_ticketsInput = {
    id?: number
    user_id?: number | null
    first_name: string
    last_name: string
    email: string
    phone: string
    status?: $Enums.OrderStatus
    total_amount: Decimal | DecimalJsLike | number | string
    payment_id?: string | null
    payment_method?: string | null
    created_at?: Date | string
    updated_at: Date | string
    order_items?: order_itemsUncheckedCreateNestedManyWithoutOrdersInput
  }

  export type ordersCreateOrConnectWithoutUser_ticketsInput = {
    where: ordersWhereUniqueInput
    create: XOR<ordersCreateWithoutUser_ticketsInput, ordersUncheckedCreateWithoutUser_ticketsInput>
  }

  export type refundsCreateWithoutUser_ticketsInput = {
    email: string
    phone: string
    full_name: string
    account_number: string
    bank_name: string
    bik: string
    correspondent_account: string
    inn: string
    kpp?: string | null
    okpo?: string | null
    ogrn?: string | null
    refund_amount: Decimal | DecimalJsLike | number | string
    refund_reason: string
    created_at?: Date | string
    updated_at: Date | string
    deleted_at?: Date | string | null
    refund_tickets?: refund_ticketsCreateNestedManyWithoutRefundsInput
    users?: usersCreateNestedOneWithoutRefundsInput
  }

  export type refundsUncheckedCreateWithoutUser_ticketsInput = {
    id?: number
    user_id?: number | null
    email: string
    phone: string
    full_name: string
    account_number: string
    bank_name: string
    bik: string
    correspondent_account: string
    inn: string
    kpp?: string | null
    okpo?: string | null
    ogrn?: string | null
    refund_amount: Decimal | DecimalJsLike | number | string
    refund_reason: string
    created_at?: Date | string
    updated_at: Date | string
    deleted_at?: Date | string | null
    refund_tickets?: refund_ticketsUncheckedCreateNestedManyWithoutRefundsInput
  }

  export type refundsCreateOrConnectWithoutUser_ticketsInput = {
    where: refundsWhereUniqueInput
    create: XOR<refundsCreateWithoutUser_ticketsInput, refundsUncheckedCreateWithoutUser_ticketsInput>
  }

  export type order_itemsUpsertWithoutUser_ticketsInput = {
    update: XOR<order_itemsUpdateWithoutUser_ticketsInput, order_itemsUncheckedUpdateWithoutUser_ticketsInput>
    create: XOR<order_itemsCreateWithoutUser_ticketsInput, order_itemsUncheckedCreateWithoutUser_ticketsInput>
    where?: order_itemsWhereInput
  }

  export type order_itemsUpdateToOneWithWhereWithoutUser_ticketsInput = {
    where?: order_itemsWhereInput
    data: XOR<order_itemsUpdateWithoutUser_ticketsInput, order_itemsUncheckedUpdateWithoutUser_ticketsInput>
  }

  export type order_itemsUpdateWithoutUser_ticketsInput = {
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantity?: IntFieldUpdateOperationsInput | number
    orders?: ordersUpdateOneRequiredWithoutOrder_itemsNestedInput
  }

  export type order_itemsUncheckedUpdateWithoutUser_ticketsInput = {
    id?: IntFieldUpdateOperationsInput | number
    order_id?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type refund_ticketsUpsertWithWhereUniqueWithoutUser_ticketsInput = {
    where: refund_ticketsWhereUniqueInput
    update: XOR<refund_ticketsUpdateWithoutUser_ticketsInput, refund_ticketsUncheckedUpdateWithoutUser_ticketsInput>
    create: XOR<refund_ticketsCreateWithoutUser_ticketsInput, refund_ticketsUncheckedCreateWithoutUser_ticketsInput>
  }

  export type refund_ticketsUpdateWithWhereUniqueWithoutUser_ticketsInput = {
    where: refund_ticketsWhereUniqueInput
    data: XOR<refund_ticketsUpdateWithoutUser_ticketsInput, refund_ticketsUncheckedUpdateWithoutUser_ticketsInput>
  }

  export type refund_ticketsUpdateManyWithWhereWithoutUser_ticketsInput = {
    where: refund_ticketsScalarWhereInput
    data: XOR<refund_ticketsUpdateManyMutationInput, refund_ticketsUncheckedUpdateManyWithoutUser_ticketsInput>
  }

  export type ticketsUpsertWithoutUser_ticketsInput = {
    update: XOR<ticketsUpdateWithoutUser_ticketsInput, ticketsUncheckedUpdateWithoutUser_ticketsInput>
    create: XOR<ticketsCreateWithoutUser_ticketsInput, ticketsUncheckedCreateWithoutUser_ticketsInput>
    where?: ticketsWhereInput
  }

  export type ticketsUpdateToOneWithWhereWithoutUser_ticketsInput = {
    where?: ticketsWhereInput
    data: XOR<ticketsUpdateWithoutUser_ticketsInput, ticketsUncheckedUpdateWithoutUser_ticketsInput>
  }

  export type ticketsUpdateWithoutUser_ticketsInput = {
    title?: StringFieldUpdateOperationsInput | string
    short_description?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    event_date?: DateTimeFieldUpdateOperationsInput | Date | string
    event_location?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    is_used?: BoolFieldUpdateOperationsInput | boolean
    qr_code?: NullableStringFieldUpdateOperationsInput | string | null
    ticket_number?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: usersUpdateOneWithoutTicketsNestedInput
  }

  export type ticketsUncheckedUpdateWithoutUser_ticketsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    short_description?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    event_date?: DateTimeFieldUpdateOperationsInput | Date | string
    event_location?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    is_used?: BoolFieldUpdateOperationsInput | boolean
    qr_code?: NullableStringFieldUpdateOperationsInput | string | null
    ticket_number?: StringFieldUpdateOperationsInput | string
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usersUpsertWithoutUser_ticketsInput = {
    update: XOR<usersUpdateWithoutUser_ticketsInput, usersUncheckedUpdateWithoutUser_ticketsInput>
    create: XOR<usersCreateWithoutUser_ticketsInput, usersUncheckedCreateWithoutUser_ticketsInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutUser_ticketsInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutUser_ticketsInput, usersUncheckedUpdateWithoutUser_ticketsInput>
  }

  export type usersUpdateWithoutUser_ticketsInput = {
    telegram_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_admin?: BoolFieldUpdateOperationsInput | boolean
    language_code?: NullableStringFieldUpdateOperationsInput | string | null
    is_bot?: BoolFieldUpdateOperationsInput | boolean
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: ordersUpdateManyWithoutUsersNestedInput
    refunds?: refundsUpdateManyWithoutUsersNestedInput
    tickets?: ticketsUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutUser_ticketsInput = {
    id?: IntFieldUpdateOperationsInput | number
    telegram_id?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    is_admin?: BoolFieldUpdateOperationsInput | boolean
    language_code?: NullableStringFieldUpdateOperationsInput | string | null
    is_bot?: BoolFieldUpdateOperationsInput | boolean
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: ordersUncheckedUpdateManyWithoutUsersNestedInput
    refunds?: refundsUncheckedUpdateManyWithoutUsersNestedInput
    tickets?: ticketsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type ordersUpsertWithWhereUniqueWithoutUser_ticketsInput = {
    where: ordersWhereUniqueInput
    update: XOR<ordersUpdateWithoutUser_ticketsInput, ordersUncheckedUpdateWithoutUser_ticketsInput>
    create: XOR<ordersCreateWithoutUser_ticketsInput, ordersUncheckedCreateWithoutUser_ticketsInput>
  }

  export type ordersUpdateWithWhereUniqueWithoutUser_ticketsInput = {
    where: ordersWhereUniqueInput
    data: XOR<ordersUpdateWithoutUser_ticketsInput, ordersUncheckedUpdateWithoutUser_ticketsInput>
  }

  export type ordersUpdateManyWithWhereWithoutUser_ticketsInput = {
    where: ordersScalarWhereInput
    data: XOR<ordersUpdateManyMutationInput, ordersUncheckedUpdateManyWithoutUser_ticketsInput>
  }

  export type ordersScalarWhereInput = {
    AND?: ordersScalarWhereInput | ordersScalarWhereInput[]
    OR?: ordersScalarWhereInput[]
    NOT?: ordersScalarWhereInput | ordersScalarWhereInput[]
    id?: IntFilter<"orders"> | number
    user_id?: IntNullableFilter<"orders"> | number | null
    first_name?: StringFilter<"orders"> | string
    last_name?: StringFilter<"orders"> | string
    email?: StringFilter<"orders"> | string
    phone?: StringFilter<"orders"> | string
    status?: EnumOrderStatusFilter<"orders"> | $Enums.OrderStatus
    total_amount?: DecimalFilter<"orders"> | Decimal | DecimalJsLike | number | string
    payment_id?: StringNullableFilter<"orders"> | string | null
    payment_method?: StringNullableFilter<"orders"> | string | null
    created_at?: DateTimeFilter<"orders"> | Date | string
    updated_at?: DateTimeFilter<"orders"> | Date | string
  }

  export type refundsUpsertWithWhereUniqueWithoutUser_ticketsInput = {
    where: refundsWhereUniqueInput
    update: XOR<refundsUpdateWithoutUser_ticketsInput, refundsUncheckedUpdateWithoutUser_ticketsInput>
    create: XOR<refundsCreateWithoutUser_ticketsInput, refundsUncheckedCreateWithoutUser_ticketsInput>
  }

  export type refundsUpdateWithWhereUniqueWithoutUser_ticketsInput = {
    where: refundsWhereUniqueInput
    data: XOR<refundsUpdateWithoutUser_ticketsInput, refundsUncheckedUpdateWithoutUser_ticketsInput>
  }

  export type refundsUpdateManyWithWhereWithoutUser_ticketsInput = {
    where: refundsScalarWhereInput
    data: XOR<refundsUpdateManyMutationInput, refundsUncheckedUpdateManyWithoutUser_ticketsInput>
  }

  export type refundsScalarWhereInput = {
    AND?: refundsScalarWhereInput | refundsScalarWhereInput[]
    OR?: refundsScalarWhereInput[]
    NOT?: refundsScalarWhereInput | refundsScalarWhereInput[]
    id?: IntFilter<"refunds"> | number
    user_id?: IntNullableFilter<"refunds"> | number | null
    email?: StringFilter<"refunds"> | string
    phone?: StringFilter<"refunds"> | string
    full_name?: StringFilter<"refunds"> | string
    account_number?: StringFilter<"refunds"> | string
    bank_name?: StringFilter<"refunds"> | string
    bik?: StringFilter<"refunds"> | string
    correspondent_account?: StringFilter<"refunds"> | string
    inn?: StringFilter<"refunds"> | string
    kpp?: StringNullableFilter<"refunds"> | string | null
    okpo?: StringNullableFilter<"refunds"> | string | null
    ogrn?: StringNullableFilter<"refunds"> | string | null
    refund_amount?: DecimalFilter<"refunds"> | Decimal | DecimalJsLike | number | string
    refund_reason?: StringFilter<"refunds"> | string
    created_at?: DateTimeFilter<"refunds"> | Date | string
    updated_at?: DateTimeFilter<"refunds"> | Date | string
    deleted_at?: DateTimeNullableFilter<"refunds"> | Date | string | null
  }

  export type ordersCreateWithoutUsersInput = {
    first_name: string
    last_name: string
    email: string
    phone: string
    status?: $Enums.OrderStatus
    total_amount: Decimal | DecimalJsLike | number | string
    payment_id?: string | null
    payment_method?: string | null
    created_at?: Date | string
    updated_at: Date | string
    order_items?: order_itemsCreateNestedManyWithoutOrdersInput
    user_tickets?: user_ticketsCreateNestedManyWithoutOrdersInput
  }

  export type ordersUncheckedCreateWithoutUsersInput = {
    id?: number
    first_name: string
    last_name: string
    email: string
    phone: string
    status?: $Enums.OrderStatus
    total_amount: Decimal | DecimalJsLike | number | string
    payment_id?: string | null
    payment_method?: string | null
    created_at?: Date | string
    updated_at: Date | string
    order_items?: order_itemsUncheckedCreateNestedManyWithoutOrdersInput
    user_tickets?: user_ticketsUncheckedCreateNestedManyWithoutOrdersInput
  }

  export type ordersCreateOrConnectWithoutUsersInput = {
    where: ordersWhereUniqueInput
    create: XOR<ordersCreateWithoutUsersInput, ordersUncheckedCreateWithoutUsersInput>
  }

  export type ordersCreateManyUsersInputEnvelope = {
    data: ordersCreateManyUsersInput | ordersCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type refundsCreateWithoutUsersInput = {
    email: string
    phone: string
    full_name: string
    account_number: string
    bank_name: string
    bik: string
    correspondent_account: string
    inn: string
    kpp?: string | null
    okpo?: string | null
    ogrn?: string | null
    refund_amount: Decimal | DecimalJsLike | number | string
    refund_reason: string
    created_at?: Date | string
    updated_at: Date | string
    deleted_at?: Date | string | null
    refund_tickets?: refund_ticketsCreateNestedManyWithoutRefundsInput
    user_tickets?: user_ticketsCreateNestedManyWithoutRefundsInput
  }

  export type refundsUncheckedCreateWithoutUsersInput = {
    id?: number
    email: string
    phone: string
    full_name: string
    account_number: string
    bank_name: string
    bik: string
    correspondent_account: string
    inn: string
    kpp?: string | null
    okpo?: string | null
    ogrn?: string | null
    refund_amount: Decimal | DecimalJsLike | number | string
    refund_reason: string
    created_at?: Date | string
    updated_at: Date | string
    deleted_at?: Date | string | null
    refund_tickets?: refund_ticketsUncheckedCreateNestedManyWithoutRefundsInput
    user_tickets?: user_ticketsUncheckedCreateNestedManyWithoutRefundsInput
  }

  export type refundsCreateOrConnectWithoutUsersInput = {
    where: refundsWhereUniqueInput
    create: XOR<refundsCreateWithoutUsersInput, refundsUncheckedCreateWithoutUsersInput>
  }

  export type refundsCreateManyUsersInputEnvelope = {
    data: refundsCreateManyUsersInput | refundsCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type ticketsCreateWithoutUsersInput = {
    title: string
    short_description?: string | null
    description?: string | null
    image_url?: string | null
    event_date: Date | string
    event_location: string
    price: Decimal | DecimalJsLike | number | string
    is_used?: boolean
    qr_code?: string | null
    ticket_number: string
    created_at?: Date | string
    updated_at: Date | string
    user_tickets?: user_ticketsCreateNestedManyWithoutTicketsInput
  }

  export type ticketsUncheckedCreateWithoutUsersInput = {
    id?: number
    title: string
    short_description?: string | null
    description?: string | null
    image_url?: string | null
    event_date: Date | string
    event_location: string
    price: Decimal | DecimalJsLike | number | string
    is_used?: boolean
    qr_code?: string | null
    ticket_number: string
    created_at?: Date | string
    updated_at: Date | string
    user_tickets?: user_ticketsUncheckedCreateNestedManyWithoutTicketsInput
  }

  export type ticketsCreateOrConnectWithoutUsersInput = {
    where: ticketsWhereUniqueInput
    create: XOR<ticketsCreateWithoutUsersInput, ticketsUncheckedCreateWithoutUsersInput>
  }

  export type ticketsCreateManyUsersInputEnvelope = {
    data: ticketsCreateManyUsersInput | ticketsCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type user_ticketsCreateWithoutUsersInput = {
    ticket_number: string
    qr_code?: string | null
    purchase_date?: Date | string
    is_used?: boolean
    used_at?: Date | string | null
    payment_status?: $Enums.PaymentStatus
    payment_id?: string | null
    expires_at?: Date | string | null
    created_at?: Date | string
    updated_at: Date | string
    email?: string | null
    first_name?: string | null
    last_name?: string | null
    phone?: string | null
    order_items?: order_itemsCreateNestedOneWithoutUser_ticketsInput
    refund_tickets?: refund_ticketsCreateNestedManyWithoutUser_ticketsInput
    tickets: ticketsCreateNestedOneWithoutUser_ticketsInput
    orders?: ordersCreateNestedManyWithoutUser_ticketsInput
    refunds?: refundsCreateNestedManyWithoutUser_ticketsInput
  }

  export type user_ticketsUncheckedCreateWithoutUsersInput = {
    id?: number
    ticket_id: number
    ticket_number: string
    qr_code?: string | null
    purchase_date?: Date | string
    is_used?: boolean
    used_at?: Date | string | null
    payment_status?: $Enums.PaymentStatus
    payment_id?: string | null
    expires_at?: Date | string | null
    created_at?: Date | string
    updated_at: Date | string
    email?: string | null
    first_name?: string | null
    last_name?: string | null
    phone?: string | null
    order_items?: order_itemsUncheckedCreateNestedOneWithoutUser_ticketsInput
    refund_tickets?: refund_ticketsUncheckedCreateNestedManyWithoutUser_ticketsInput
    orders?: ordersUncheckedCreateNestedManyWithoutUser_ticketsInput
    refunds?: refundsUncheckedCreateNestedManyWithoutUser_ticketsInput
  }

  export type user_ticketsCreateOrConnectWithoutUsersInput = {
    where: user_ticketsWhereUniqueInput
    create: XOR<user_ticketsCreateWithoutUsersInput, user_ticketsUncheckedCreateWithoutUsersInput>
  }

  export type user_ticketsCreateManyUsersInputEnvelope = {
    data: user_ticketsCreateManyUsersInput | user_ticketsCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type ordersUpsertWithWhereUniqueWithoutUsersInput = {
    where: ordersWhereUniqueInput
    update: XOR<ordersUpdateWithoutUsersInput, ordersUncheckedUpdateWithoutUsersInput>
    create: XOR<ordersCreateWithoutUsersInput, ordersUncheckedCreateWithoutUsersInput>
  }

  export type ordersUpdateWithWhereUniqueWithoutUsersInput = {
    where: ordersWhereUniqueInput
    data: XOR<ordersUpdateWithoutUsersInput, ordersUncheckedUpdateWithoutUsersInput>
  }

  export type ordersUpdateManyWithWhereWithoutUsersInput = {
    where: ordersScalarWhereInput
    data: XOR<ordersUpdateManyMutationInput, ordersUncheckedUpdateManyWithoutUsersInput>
  }

  export type refundsUpsertWithWhereUniqueWithoutUsersInput = {
    where: refundsWhereUniqueInput
    update: XOR<refundsUpdateWithoutUsersInput, refundsUncheckedUpdateWithoutUsersInput>
    create: XOR<refundsCreateWithoutUsersInput, refundsUncheckedCreateWithoutUsersInput>
  }

  export type refundsUpdateWithWhereUniqueWithoutUsersInput = {
    where: refundsWhereUniqueInput
    data: XOR<refundsUpdateWithoutUsersInput, refundsUncheckedUpdateWithoutUsersInput>
  }

  export type refundsUpdateManyWithWhereWithoutUsersInput = {
    where: refundsScalarWhereInput
    data: XOR<refundsUpdateManyMutationInput, refundsUncheckedUpdateManyWithoutUsersInput>
  }

  export type ticketsUpsertWithWhereUniqueWithoutUsersInput = {
    where: ticketsWhereUniqueInput
    update: XOR<ticketsUpdateWithoutUsersInput, ticketsUncheckedUpdateWithoutUsersInput>
    create: XOR<ticketsCreateWithoutUsersInput, ticketsUncheckedCreateWithoutUsersInput>
  }

  export type ticketsUpdateWithWhereUniqueWithoutUsersInput = {
    where: ticketsWhereUniqueInput
    data: XOR<ticketsUpdateWithoutUsersInput, ticketsUncheckedUpdateWithoutUsersInput>
  }

  export type ticketsUpdateManyWithWhereWithoutUsersInput = {
    where: ticketsScalarWhereInput
    data: XOR<ticketsUpdateManyMutationInput, ticketsUncheckedUpdateManyWithoutUsersInput>
  }

  export type ticketsScalarWhereInput = {
    AND?: ticketsScalarWhereInput | ticketsScalarWhereInput[]
    OR?: ticketsScalarWhereInput[]
    NOT?: ticketsScalarWhereInput | ticketsScalarWhereInput[]
    id?: IntFilter<"tickets"> | number
    title?: StringFilter<"tickets"> | string
    short_description?: StringNullableFilter<"tickets"> | string | null
    description?: StringNullableFilter<"tickets"> | string | null
    image_url?: StringNullableFilter<"tickets"> | string | null
    event_date?: DateTimeFilter<"tickets"> | Date | string
    event_location?: StringFilter<"tickets"> | string
    price?: DecimalFilter<"tickets"> | Decimal | DecimalJsLike | number | string
    is_used?: BoolFilter<"tickets"> | boolean
    qr_code?: StringNullableFilter<"tickets"> | string | null
    ticket_number?: StringFilter<"tickets"> | string
    user_id?: IntNullableFilter<"tickets"> | number | null
    created_at?: DateTimeFilter<"tickets"> | Date | string
    updated_at?: DateTimeFilter<"tickets"> | Date | string
  }

  export type user_ticketsUpsertWithWhereUniqueWithoutUsersInput = {
    where: user_ticketsWhereUniqueInput
    update: XOR<user_ticketsUpdateWithoutUsersInput, user_ticketsUncheckedUpdateWithoutUsersInput>
    create: XOR<user_ticketsCreateWithoutUsersInput, user_ticketsUncheckedCreateWithoutUsersInput>
  }

  export type user_ticketsUpdateWithWhereUniqueWithoutUsersInput = {
    where: user_ticketsWhereUniqueInput
    data: XOR<user_ticketsUpdateWithoutUsersInput, user_ticketsUncheckedUpdateWithoutUsersInput>
  }

  export type user_ticketsUpdateManyWithWhereWithoutUsersInput = {
    where: user_ticketsScalarWhereInput
    data: XOR<user_ticketsUpdateManyMutationInput, user_ticketsUncheckedUpdateManyWithoutUsersInput>
  }

  export type ZoneCreateManyHallInput = {
    id?: number
    name: string
    type?: $Enums.ZoneType
    openTime: string
    closeTime: string
    imageUrl?: string | null
    description?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ZoneUpdateWithoutHallInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumZoneTypeFieldUpdateOperationsInput | $Enums.ZoneType
    openTime?: StringFieldUpdateOperationsInput | string
    closeTime?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ZoneItemUpdateManyWithoutZoneNestedInput
  }

  export type ZoneUncheckedUpdateWithoutHallInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumZoneTypeFieldUpdateOperationsInput | $Enums.ZoneType
    openTime?: StringFieldUpdateOperationsInput | string
    closeTime?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ZoneItemUncheckedUpdateManyWithoutZoneNestedInput
  }

  export type ZoneUncheckedUpdateManyWithoutHallInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumZoneTypeFieldUpdateOperationsInput | $Enums.ZoneType
    openTime?: StringFieldUpdateOperationsInput | string
    closeTime?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ZoneItemCreateManyZoneInput = {
    id?: number
    floor?: number
    label: string
    type?: $Enums.ZoneItemType
    isBooking?: boolean
    isActive?: boolean
    x: number
    y: number
    width: number
    height: number
    seats?: number | null
    capacity?: number | null
    pricePerHour?: Decimal | DecimalJsLike | number | string | null
    pricePerSeat?: Decimal | DecimalJsLike | number | string | null
    pricePerSlot?: Decimal | DecimalJsLike | number | string | null
    minDuration?: number | null
    maxDuration?: number | null
    timeSlots?: ZoneItemCreatetimeSlotsInput | string[]
    description?: string | null
    features?: ZoneItemCreatefeaturesInput | string[]
  }

  export type ZoneItemUpdateWithoutZoneInput = {
    floor?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    type?: EnumZoneItemTypeFieldUpdateOperationsInput | $Enums.ZoneItemType
    isBooking?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    seats?: NullableIntFieldUpdateOperationsInput | number | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    pricePerHour?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerSeat?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerSlot?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    minDuration?: NullableIntFieldUpdateOperationsInput | number | null
    maxDuration?: NullableIntFieldUpdateOperationsInput | number | null
    timeSlots?: ZoneItemUpdatetimeSlotsInput | string[]
    description?: NullableStringFieldUpdateOperationsInput | string | null
    features?: ZoneItemUpdatefeaturesInput | string[]
    reservations?: ReservationUpdateManyWithoutZoneItemNestedInput
  }

  export type ZoneItemUncheckedUpdateWithoutZoneInput = {
    id?: IntFieldUpdateOperationsInput | number
    floor?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    type?: EnumZoneItemTypeFieldUpdateOperationsInput | $Enums.ZoneItemType
    isBooking?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    seats?: NullableIntFieldUpdateOperationsInput | number | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    pricePerHour?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerSeat?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerSlot?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    minDuration?: NullableIntFieldUpdateOperationsInput | number | null
    maxDuration?: NullableIntFieldUpdateOperationsInput | number | null
    timeSlots?: ZoneItemUpdatetimeSlotsInput | string[]
    description?: NullableStringFieldUpdateOperationsInput | string | null
    features?: ZoneItemUpdatefeaturesInput | string[]
    reservations?: ReservationUncheckedUpdateManyWithoutZoneItemNestedInput
  }

  export type ZoneItemUncheckedUpdateManyWithoutZoneInput = {
    id?: IntFieldUpdateOperationsInput | number
    floor?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    type?: EnumZoneItemTypeFieldUpdateOperationsInput | $Enums.ZoneItemType
    isBooking?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    x?: FloatFieldUpdateOperationsInput | number
    y?: FloatFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    seats?: NullableIntFieldUpdateOperationsInput | number | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    pricePerHour?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerSeat?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    pricePerSlot?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    minDuration?: NullableIntFieldUpdateOperationsInput | number | null
    maxDuration?: NullableIntFieldUpdateOperationsInput | number | null
    timeSlots?: ZoneItemUpdatetimeSlotsInput | string[]
    description?: NullableStringFieldUpdateOperationsInput | string | null
    features?: ZoneItemUpdatefeaturesInput | string[]
  }

  export type ReservationCreateManyZoneItemInput = {
    id?: number
    type?: $Enums.ReservationType
    userName: string
    phone: string
    startsAt: Date | string
    endsAt: Date | string
    deposit: Decimal | DecimalJsLike | number | string
    status?: $Enums.ReservationStatus
    seatsCount?: number | null
    guestsCount?: number | null
    duration?: number | null
    comment?: string | null
    specialRequests?: string | null
    totalPrice?: Decimal | DecimalJsLike | number | string | null
  }

  export type ReservationUpdateWithoutZoneItemInput = {
    type?: EnumReservationTypeFieldUpdateOperationsInput | $Enums.ReservationType
    userName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    startsAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endsAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deposit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumReservationStatusFieldUpdateOperationsInput | $Enums.ReservationStatus
    seatsCount?: NullableIntFieldUpdateOperationsInput | number | null
    guestsCount?: NullableIntFieldUpdateOperationsInput | number | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    specialRequests?: NullableStringFieldUpdateOperationsInput | string | null
    totalPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    payments?: PaymentUpdateManyWithoutReservationNestedInput
  }

  export type ReservationUncheckedUpdateWithoutZoneItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumReservationTypeFieldUpdateOperationsInput | $Enums.ReservationType
    userName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    startsAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endsAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deposit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumReservationStatusFieldUpdateOperationsInput | $Enums.ReservationStatus
    seatsCount?: NullableIntFieldUpdateOperationsInput | number | null
    guestsCount?: NullableIntFieldUpdateOperationsInput | number | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    specialRequests?: NullableStringFieldUpdateOperationsInput | string | null
    totalPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    payments?: PaymentUncheckedUpdateManyWithoutReservationNestedInput
  }

  export type ReservationUncheckedUpdateManyWithoutZoneItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumReservationTypeFieldUpdateOperationsInput | $Enums.ReservationType
    userName?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    startsAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endsAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deposit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumReservationStatusFieldUpdateOperationsInput | $Enums.ReservationStatus
    seatsCount?: NullableIntFieldUpdateOperationsInput | number | null
    guestsCount?: NullableIntFieldUpdateOperationsInput | number | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    specialRequests?: NullableStringFieldUpdateOperationsInput | string | null
    totalPrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type PaymentCreateManyReservationInput = {
    id?: number
    amount: Decimal | DecimalJsLike | number | string
    payDate?: Date | string
    refunded?: boolean
  }

  export type PaymentUpdateWithoutReservationInput = {
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    payDate?: DateTimeFieldUpdateOperationsInput | Date | string
    refunded?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PaymentUncheckedUpdateWithoutReservationInput = {
    id?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    payDate?: DateTimeFieldUpdateOperationsInput | Date | string
    refunded?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PaymentUncheckedUpdateManyWithoutReservationInput = {
    id?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    payDate?: DateTimeFieldUpdateOperationsInput | Date | string
    refunded?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MenuCategoryCreateManyMenuTypeInput = {
    id?: number
    name: string
    slug: string
    description?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MenuCategoryUpdateWithoutMenuTypeInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: MenuItemUpdateManyWithoutCategoryNestedInput
  }

  export type MenuCategoryUncheckedUpdateWithoutMenuTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: MenuItemUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type MenuCategoryUncheckedUpdateManyWithoutMenuTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MenuItemCreateManyCategoryInput = {
    id?: number
    name: string
    description?: string | null
    price: Decimal | DecimalJsLike | number | string
    imageUrl?: string | null
    isActive?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MenuItemUpdateWithoutCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MenuItemUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MenuItemUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type order_itemsCreateManyOrdersInput = {
    id?: number
    user_ticket_id: number
    price: Decimal | DecimalJsLike | number | string
    quantity?: number
  }

  export type order_itemsUpdateWithoutOrdersInput = {
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantity?: IntFieldUpdateOperationsInput | number
    user_tickets?: user_ticketsUpdateOneRequiredWithoutOrder_itemsNestedInput
  }

  export type order_itemsUncheckedUpdateWithoutOrdersInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_ticket_id?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type order_itemsUncheckedUpdateManyWithoutOrdersInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_ticket_id?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type user_ticketsUpdateWithoutOrdersInput = {
    ticket_number?: StringFieldUpdateOperationsInput | string
    qr_code?: NullableStringFieldUpdateOperationsInput | string | null
    purchase_date?: DateTimeFieldUpdateOperationsInput | Date | string
    is_used?: BoolFieldUpdateOperationsInput | boolean
    used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    payment_id?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    order_items?: order_itemsUpdateOneWithoutUser_ticketsNestedInput
    refund_tickets?: refund_ticketsUpdateManyWithoutUser_ticketsNestedInput
    tickets?: ticketsUpdateOneRequiredWithoutUser_ticketsNestedInput
    users?: usersUpdateOneWithoutUser_ticketsNestedInput
    refunds?: refundsUpdateManyWithoutUser_ticketsNestedInput
  }

  export type user_ticketsUncheckedUpdateWithoutOrdersInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    ticket_id?: IntFieldUpdateOperationsInput | number
    ticket_number?: StringFieldUpdateOperationsInput | string
    qr_code?: NullableStringFieldUpdateOperationsInput | string | null
    purchase_date?: DateTimeFieldUpdateOperationsInput | Date | string
    is_used?: BoolFieldUpdateOperationsInput | boolean
    used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    payment_id?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    order_items?: order_itemsUncheckedUpdateOneWithoutUser_ticketsNestedInput
    refund_tickets?: refund_ticketsUncheckedUpdateManyWithoutUser_ticketsNestedInput
    refunds?: refundsUncheckedUpdateManyWithoutUser_ticketsNestedInput
  }

  export type user_ticketsUncheckedUpdateManyWithoutOrdersInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    ticket_id?: IntFieldUpdateOperationsInput | number
    ticket_number?: StringFieldUpdateOperationsInput | string
    qr_code?: NullableStringFieldUpdateOperationsInput | string | null
    purchase_date?: DateTimeFieldUpdateOperationsInput | Date | string
    is_used?: BoolFieldUpdateOperationsInput | boolean
    used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    payment_id?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type refund_ticketsCreateManyRefundsInput = {
    user_ticket_id: number
    ticket_number: string
    refund_amount: Decimal | DecimalJsLike | number | string
  }

  export type refund_ticketsUpdateWithoutRefundsInput = {
    ticket_number?: StringFieldUpdateOperationsInput | string
    refund_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    user_tickets?: user_ticketsUpdateOneRequiredWithoutRefund_ticketsNestedInput
  }

  export type refund_ticketsUncheckedUpdateWithoutRefundsInput = {
    user_ticket_id?: IntFieldUpdateOperationsInput | number
    ticket_number?: StringFieldUpdateOperationsInput | string
    refund_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type refund_ticketsUncheckedUpdateManyWithoutRefundsInput = {
    user_ticket_id?: IntFieldUpdateOperationsInput | number
    ticket_number?: StringFieldUpdateOperationsInput | string
    refund_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type user_ticketsUpdateWithoutRefundsInput = {
    ticket_number?: StringFieldUpdateOperationsInput | string
    qr_code?: NullableStringFieldUpdateOperationsInput | string | null
    purchase_date?: DateTimeFieldUpdateOperationsInput | Date | string
    is_used?: BoolFieldUpdateOperationsInput | boolean
    used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    payment_id?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    order_items?: order_itemsUpdateOneWithoutUser_ticketsNestedInput
    refund_tickets?: refund_ticketsUpdateManyWithoutUser_ticketsNestedInput
    tickets?: ticketsUpdateOneRequiredWithoutUser_ticketsNestedInput
    users?: usersUpdateOneWithoutUser_ticketsNestedInput
    orders?: ordersUpdateManyWithoutUser_ticketsNestedInput
  }

  export type user_ticketsUncheckedUpdateWithoutRefundsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    ticket_id?: IntFieldUpdateOperationsInput | number
    ticket_number?: StringFieldUpdateOperationsInput | string
    qr_code?: NullableStringFieldUpdateOperationsInput | string | null
    purchase_date?: DateTimeFieldUpdateOperationsInput | Date | string
    is_used?: BoolFieldUpdateOperationsInput | boolean
    used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    payment_id?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    order_items?: order_itemsUncheckedUpdateOneWithoutUser_ticketsNestedInput
    refund_tickets?: refund_ticketsUncheckedUpdateManyWithoutUser_ticketsNestedInput
    orders?: ordersUncheckedUpdateManyWithoutUser_ticketsNestedInput
  }

  export type user_ticketsUncheckedUpdateManyWithoutRefundsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    ticket_id?: IntFieldUpdateOperationsInput | number
    ticket_number?: StringFieldUpdateOperationsInput | string
    qr_code?: NullableStringFieldUpdateOperationsInput | string | null
    purchase_date?: DateTimeFieldUpdateOperationsInput | Date | string
    is_used?: BoolFieldUpdateOperationsInput | boolean
    used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    payment_id?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type user_ticketsCreateManyTicketsInput = {
    id?: number
    user_id?: number | null
    ticket_number: string
    qr_code?: string | null
    purchase_date?: Date | string
    is_used?: boolean
    used_at?: Date | string | null
    payment_status?: $Enums.PaymentStatus
    payment_id?: string | null
    expires_at?: Date | string | null
    created_at?: Date | string
    updated_at: Date | string
    email?: string | null
    first_name?: string | null
    last_name?: string | null
    phone?: string | null
  }

  export type user_ticketsUpdateWithoutTicketsInput = {
    ticket_number?: StringFieldUpdateOperationsInput | string
    qr_code?: NullableStringFieldUpdateOperationsInput | string | null
    purchase_date?: DateTimeFieldUpdateOperationsInput | Date | string
    is_used?: BoolFieldUpdateOperationsInput | boolean
    used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    payment_id?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    order_items?: order_itemsUpdateOneWithoutUser_ticketsNestedInput
    refund_tickets?: refund_ticketsUpdateManyWithoutUser_ticketsNestedInput
    users?: usersUpdateOneWithoutUser_ticketsNestedInput
    orders?: ordersUpdateManyWithoutUser_ticketsNestedInput
    refunds?: refundsUpdateManyWithoutUser_ticketsNestedInput
  }

  export type user_ticketsUncheckedUpdateWithoutTicketsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    ticket_number?: StringFieldUpdateOperationsInput | string
    qr_code?: NullableStringFieldUpdateOperationsInput | string | null
    purchase_date?: DateTimeFieldUpdateOperationsInput | Date | string
    is_used?: BoolFieldUpdateOperationsInput | boolean
    used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    payment_id?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    order_items?: order_itemsUncheckedUpdateOneWithoutUser_ticketsNestedInput
    refund_tickets?: refund_ticketsUncheckedUpdateManyWithoutUser_ticketsNestedInput
    orders?: ordersUncheckedUpdateManyWithoutUser_ticketsNestedInput
    refunds?: refundsUncheckedUpdateManyWithoutUser_ticketsNestedInput
  }

  export type user_ticketsUncheckedUpdateManyWithoutTicketsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    ticket_number?: StringFieldUpdateOperationsInput | string
    qr_code?: NullableStringFieldUpdateOperationsInput | string | null
    purchase_date?: DateTimeFieldUpdateOperationsInput | Date | string
    is_used?: BoolFieldUpdateOperationsInput | boolean
    used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    payment_id?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type refund_ticketsCreateManyUser_ticketsInput = {
    refund_id: number
    ticket_number: string
    refund_amount: Decimal | DecimalJsLike | number | string
  }

  export type refund_ticketsUpdateWithoutUser_ticketsInput = {
    ticket_number?: StringFieldUpdateOperationsInput | string
    refund_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    refunds?: refundsUpdateOneRequiredWithoutRefund_ticketsNestedInput
  }

  export type refund_ticketsUncheckedUpdateWithoutUser_ticketsInput = {
    refund_id?: IntFieldUpdateOperationsInput | number
    ticket_number?: StringFieldUpdateOperationsInput | string
    refund_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type refund_ticketsUncheckedUpdateManyWithoutUser_ticketsInput = {
    refund_id?: IntFieldUpdateOperationsInput | number
    ticket_number?: StringFieldUpdateOperationsInput | string
    refund_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type ordersUpdateWithoutUser_ticketsInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    total_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    payment_id?: NullableStringFieldUpdateOperationsInput | string | null
    payment_method?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    order_items?: order_itemsUpdateManyWithoutOrdersNestedInput
    users?: usersUpdateOneWithoutOrdersNestedInput
  }

  export type ordersUncheckedUpdateWithoutUser_ticketsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    total_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    payment_id?: NullableStringFieldUpdateOperationsInput | string | null
    payment_method?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    order_items?: order_itemsUncheckedUpdateManyWithoutOrdersNestedInput
  }

  export type ordersUncheckedUpdateManyWithoutUser_ticketsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    total_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    payment_id?: NullableStringFieldUpdateOperationsInput | string | null
    payment_method?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type refundsUpdateWithoutUser_ticketsInput = {
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    account_number?: StringFieldUpdateOperationsInput | string
    bank_name?: StringFieldUpdateOperationsInput | string
    bik?: StringFieldUpdateOperationsInput | string
    correspondent_account?: StringFieldUpdateOperationsInput | string
    inn?: StringFieldUpdateOperationsInput | string
    kpp?: NullableStringFieldUpdateOperationsInput | string | null
    okpo?: NullableStringFieldUpdateOperationsInput | string | null
    ogrn?: NullableStringFieldUpdateOperationsInput | string | null
    refund_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    refund_reason?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refund_tickets?: refund_ticketsUpdateManyWithoutRefundsNestedInput
    users?: usersUpdateOneWithoutRefundsNestedInput
  }

  export type refundsUncheckedUpdateWithoutUser_ticketsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    account_number?: StringFieldUpdateOperationsInput | string
    bank_name?: StringFieldUpdateOperationsInput | string
    bik?: StringFieldUpdateOperationsInput | string
    correspondent_account?: StringFieldUpdateOperationsInput | string
    inn?: StringFieldUpdateOperationsInput | string
    kpp?: NullableStringFieldUpdateOperationsInput | string | null
    okpo?: NullableStringFieldUpdateOperationsInput | string | null
    ogrn?: NullableStringFieldUpdateOperationsInput | string | null
    refund_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    refund_reason?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refund_tickets?: refund_ticketsUncheckedUpdateManyWithoutRefundsNestedInput
  }

  export type refundsUncheckedUpdateManyWithoutUser_ticketsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    account_number?: StringFieldUpdateOperationsInput | string
    bank_name?: StringFieldUpdateOperationsInput | string
    bik?: StringFieldUpdateOperationsInput | string
    correspondent_account?: StringFieldUpdateOperationsInput | string
    inn?: StringFieldUpdateOperationsInput | string
    kpp?: NullableStringFieldUpdateOperationsInput | string | null
    okpo?: NullableStringFieldUpdateOperationsInput | string | null
    ogrn?: NullableStringFieldUpdateOperationsInput | string | null
    refund_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    refund_reason?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ordersCreateManyUsersInput = {
    id?: number
    first_name: string
    last_name: string
    email: string
    phone: string
    status?: $Enums.OrderStatus
    total_amount: Decimal | DecimalJsLike | number | string
    payment_id?: string | null
    payment_method?: string | null
    created_at?: Date | string
    updated_at: Date | string
  }

  export type refundsCreateManyUsersInput = {
    id?: number
    email: string
    phone: string
    full_name: string
    account_number: string
    bank_name: string
    bik: string
    correspondent_account: string
    inn: string
    kpp?: string | null
    okpo?: string | null
    ogrn?: string | null
    refund_amount: Decimal | DecimalJsLike | number | string
    refund_reason: string
    created_at?: Date | string
    updated_at: Date | string
    deleted_at?: Date | string | null
  }

  export type ticketsCreateManyUsersInput = {
    id?: number
    title: string
    short_description?: string | null
    description?: string | null
    image_url?: string | null
    event_date: Date | string
    event_location: string
    price: Decimal | DecimalJsLike | number | string
    is_used?: boolean
    qr_code?: string | null
    ticket_number: string
    created_at?: Date | string
    updated_at: Date | string
  }

  export type user_ticketsCreateManyUsersInput = {
    id?: number
    ticket_id: number
    ticket_number: string
    qr_code?: string | null
    purchase_date?: Date | string
    is_used?: boolean
    used_at?: Date | string | null
    payment_status?: $Enums.PaymentStatus
    payment_id?: string | null
    expires_at?: Date | string | null
    created_at?: Date | string
    updated_at: Date | string
    email?: string | null
    first_name?: string | null
    last_name?: string | null
    phone?: string | null
  }

  export type ordersUpdateWithoutUsersInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    total_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    payment_id?: NullableStringFieldUpdateOperationsInput | string | null
    payment_method?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    order_items?: order_itemsUpdateManyWithoutOrdersNestedInput
    user_tickets?: user_ticketsUpdateManyWithoutOrdersNestedInput
  }

  export type ordersUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    total_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    payment_id?: NullableStringFieldUpdateOperationsInput | string | null
    payment_method?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    order_items?: order_itemsUncheckedUpdateManyWithoutOrdersNestedInput
    user_tickets?: user_ticketsUncheckedUpdateManyWithoutOrdersNestedInput
  }

  export type ordersUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    total_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    payment_id?: NullableStringFieldUpdateOperationsInput | string | null
    payment_method?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type refundsUpdateWithoutUsersInput = {
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    account_number?: StringFieldUpdateOperationsInput | string
    bank_name?: StringFieldUpdateOperationsInput | string
    bik?: StringFieldUpdateOperationsInput | string
    correspondent_account?: StringFieldUpdateOperationsInput | string
    inn?: StringFieldUpdateOperationsInput | string
    kpp?: NullableStringFieldUpdateOperationsInput | string | null
    okpo?: NullableStringFieldUpdateOperationsInput | string | null
    ogrn?: NullableStringFieldUpdateOperationsInput | string | null
    refund_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    refund_reason?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refund_tickets?: refund_ticketsUpdateManyWithoutRefundsNestedInput
    user_tickets?: user_ticketsUpdateManyWithoutRefundsNestedInput
  }

  export type refundsUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    account_number?: StringFieldUpdateOperationsInput | string
    bank_name?: StringFieldUpdateOperationsInput | string
    bik?: StringFieldUpdateOperationsInput | string
    correspondent_account?: StringFieldUpdateOperationsInput | string
    inn?: StringFieldUpdateOperationsInput | string
    kpp?: NullableStringFieldUpdateOperationsInput | string | null
    okpo?: NullableStringFieldUpdateOperationsInput | string | null
    ogrn?: NullableStringFieldUpdateOperationsInput | string | null
    refund_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    refund_reason?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refund_tickets?: refund_ticketsUncheckedUpdateManyWithoutRefundsNestedInput
    user_tickets?: user_ticketsUncheckedUpdateManyWithoutRefundsNestedInput
  }

  export type refundsUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    full_name?: StringFieldUpdateOperationsInput | string
    account_number?: StringFieldUpdateOperationsInput | string
    bank_name?: StringFieldUpdateOperationsInput | string
    bik?: StringFieldUpdateOperationsInput | string
    correspondent_account?: StringFieldUpdateOperationsInput | string
    inn?: StringFieldUpdateOperationsInput | string
    kpp?: NullableStringFieldUpdateOperationsInput | string | null
    okpo?: NullableStringFieldUpdateOperationsInput | string | null
    ogrn?: NullableStringFieldUpdateOperationsInput | string | null
    refund_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    refund_reason?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ticketsUpdateWithoutUsersInput = {
    title?: StringFieldUpdateOperationsInput | string
    short_description?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    event_date?: DateTimeFieldUpdateOperationsInput | Date | string
    event_location?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    is_used?: BoolFieldUpdateOperationsInput | boolean
    qr_code?: NullableStringFieldUpdateOperationsInput | string | null
    ticket_number?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_tickets?: user_ticketsUpdateManyWithoutTicketsNestedInput
  }

  export type ticketsUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    short_description?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    event_date?: DateTimeFieldUpdateOperationsInput | Date | string
    event_location?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    is_used?: BoolFieldUpdateOperationsInput | boolean
    qr_code?: NullableStringFieldUpdateOperationsInput | string | null
    ticket_number?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_tickets?: user_ticketsUncheckedUpdateManyWithoutTicketsNestedInput
  }

  export type ticketsUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    short_description?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    event_date?: DateTimeFieldUpdateOperationsInput | Date | string
    event_location?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    is_used?: BoolFieldUpdateOperationsInput | boolean
    qr_code?: NullableStringFieldUpdateOperationsInput | string | null
    ticket_number?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type user_ticketsUpdateWithoutUsersInput = {
    ticket_number?: StringFieldUpdateOperationsInput | string
    qr_code?: NullableStringFieldUpdateOperationsInput | string | null
    purchase_date?: DateTimeFieldUpdateOperationsInput | Date | string
    is_used?: BoolFieldUpdateOperationsInput | boolean
    used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    payment_id?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    order_items?: order_itemsUpdateOneWithoutUser_ticketsNestedInput
    refund_tickets?: refund_ticketsUpdateManyWithoutUser_ticketsNestedInput
    tickets?: ticketsUpdateOneRequiredWithoutUser_ticketsNestedInput
    orders?: ordersUpdateManyWithoutUser_ticketsNestedInput
    refunds?: refundsUpdateManyWithoutUser_ticketsNestedInput
  }

  export type user_ticketsUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    ticket_id?: IntFieldUpdateOperationsInput | number
    ticket_number?: StringFieldUpdateOperationsInput | string
    qr_code?: NullableStringFieldUpdateOperationsInput | string | null
    purchase_date?: DateTimeFieldUpdateOperationsInput | Date | string
    is_used?: BoolFieldUpdateOperationsInput | boolean
    used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    payment_id?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    order_items?: order_itemsUncheckedUpdateOneWithoutUser_ticketsNestedInput
    refund_tickets?: refund_ticketsUncheckedUpdateManyWithoutUser_ticketsNestedInput
    orders?: ordersUncheckedUpdateManyWithoutUser_ticketsNestedInput
    refunds?: refundsUncheckedUpdateManyWithoutUser_ticketsNestedInput
  }

  export type user_ticketsUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    ticket_id?: IntFieldUpdateOperationsInput | number
    ticket_number?: StringFieldUpdateOperationsInput | string
    qr_code?: NullableStringFieldUpdateOperationsInput | string | null
    purchase_date?: DateTimeFieldUpdateOperationsInput | Date | string
    is_used?: BoolFieldUpdateOperationsInput | boolean
    used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    payment_id?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use HallCountOutputTypeDefaultArgs instead
     */
    export type HallCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HallCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ZoneCountOutputTypeDefaultArgs instead
     */
    export type ZoneCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ZoneCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ZoneItemCountOutputTypeDefaultArgs instead
     */
    export type ZoneItemCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ZoneItemCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReservationCountOutputTypeDefaultArgs instead
     */
    export type ReservationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReservationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MenuTypeCountOutputTypeDefaultArgs instead
     */
    export type MenuTypeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MenuTypeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MenuCategoryCountOutputTypeDefaultArgs instead
     */
    export type MenuCategoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MenuCategoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrdersCountOutputTypeDefaultArgs instead
     */
    export type OrdersCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrdersCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RefundsCountOutputTypeDefaultArgs instead
     */
    export type RefundsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RefundsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TicketsCountOutputTypeDefaultArgs instead
     */
    export type TicketsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TicketsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use User_ticketsCountOutputTypeDefaultArgs instead
     */
    export type User_ticketsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = User_ticketsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsersCountOutputTypeDefaultArgs instead
     */
    export type UsersCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HallDefaultArgs instead
     */
    export type HallArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HallDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ZoneDefaultArgs instead
     */
    export type ZoneArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ZoneDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ZoneItemDefaultArgs instead
     */
    export type ZoneItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ZoneItemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReservationDefaultArgs instead
     */
    export type ReservationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReservationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PaymentDefaultArgs instead
     */
    export type PaymentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PaymentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MenuTypeDefaultArgs instead
     */
    export type MenuTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MenuTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MenuCategoryDefaultArgs instead
     */
    export type MenuCategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MenuCategoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MenuItemDefaultArgs instead
     */
    export type MenuItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MenuItemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HookahDefaultArgs instead
     */
    export type HookahArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HookahDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BoardGameDefaultArgs instead
     */
    export type BoardGameArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BoardGameDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BilliardsServiceDefaultArgs instead
     */
    export type BilliardsServiceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BilliardsServiceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BilliardsSettingsDefaultArgs instead
     */
    export type BilliardsSettingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BilliardsSettingsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use KaraokeServiceDefaultArgs instead
     */
    export type KaraokeServiceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = KaraokeServiceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use KaraokeSettingsDefaultArgs instead
     */
    export type KaraokeSettingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = KaraokeSettingsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BanquetRequestDefaultArgs instead
     */
    export type BanquetRequestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BanquetRequestDefaultArgs<ExtArgs>
    /**
     * @deprecated Use order_itemsDefaultArgs instead
     */
    export type order_itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = order_itemsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ordersDefaultArgs instead
     */
    export type ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ordersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use refund_ticketsDefaultArgs instead
     */
    export type refund_ticketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = refund_ticketsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use refundsDefaultArgs instead
     */
    export type refundsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = refundsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ticketsDefaultArgs instead
     */
    export type ticketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ticketsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use user_ticketsDefaultArgs instead
     */
    export type user_ticketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = user_ticketsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use usersDefaultArgs instead
     */
    export type usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = usersDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}