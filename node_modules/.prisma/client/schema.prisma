generator client {
  provider = "prisma-client-js"
  output   = "../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Zone {
  id        Int        @id @default(autoincrement())
  name      String
  type      ZoneType   @default(restaurant)
  openTime  String
  closeTime String
  imageUrl  String
  items     ZoneItem[]
}

model ZoneItem {
  id           Int           @id @default(autoincrement())
  zoneId       Int
  floor        Int           @default(1)
  label        String
  type         ZoneItemType  @default(table)
  isBooking    Boolean       @default(false)
  isActive     Boolean       @default(true)
  x            Float
  y            Float
  width        Float
  height       Float
  seats        Int?
  capacity     Int?
  pricePerHour Decimal?      @db.Decimal(8, 2)
  pricePerSeat Decimal?      @db.Decimal(8, 2)
  pricePerSlot Decimal?      @db.Decimal(8, 2)
  minDuration  Int?
  maxDuration  Int?
  timeSlots    String[]
  description  String?
  features     String[]
  reservations Reservation[]
  zone         Zone          @relation(fields: [zoneId], references: [id])
}

model Reservation {
  id              Int               @id @default(autoincrement())
  zoneItemId      Int
  type            ReservationType   @default(seating)
  userName        String
  phone           String
  startsAt        DateTime
  endsAt          DateTime
  deposit         Decimal           @db.Decimal(5, 2)
  status          ReservationStatus @default(booked)
  seatsCount      Int?
  guestsCount     Int?
  duration        Int?
  comment         String?
  specialRequests String?
  totalPrice      Decimal?          @db.Decimal(8, 2)
  payments        Payment[]
  zoneItem        ZoneItem          @relation(fields: [zoneItemId], references: [id])
}

model Payment {
  id            Int         @id @default(autoincrement())
  reservationId Int
  amount        Decimal     @db.Decimal(5, 2)
  payDate       DateTime    @default(now())
  refunded      Boolean     @default(false)
  reservation   Reservation @relation(fields: [reservationId], references: [id])
}

model MenuType {
  id          Int            @id @default(autoincrement())
  name        String
  slug        String         @unique
  description String?
  isActive    Boolean        @default(true)
  sortOrder   Int            @default(0)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  categories  MenuCategory[]
}

model MenuCategory {
  id          Int        @id @default(autoincrement())
  menuTypeId  Int
  name        String
  slug        String     @unique
  description String?
  isActive    Boolean    @default(true)
  sortOrder   Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  menuType    MenuType   @relation(fields: [menuTypeId], references: [id])
  items       MenuItem[]
}

model MenuItem {
  id          Int          @id @default(autoincrement())
  categoryId  Int
  name        String
  description String?
  price       Decimal      @db.Decimal(8, 2)
  currency    String       @default("₽")
  imageUrl    String?
  isActive    Boolean      @default(true)
  isPopular   Boolean      @default(false)
  allergens   String[]
  weight      String?
  calories    Int?
  preparation String?
  sortOrder   Int          @default(0)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  category    MenuCategory @relation(fields: [categoryId], references: [id])
}

model BilliardsService {
  id           Int       @id @default(autoincrement())
  name         String    @db.VarChar(255)
  type         String    @unique @db.VarChar(50)
  weekdayPrice Decimal   @db.Decimal(8, 2)
  weekendPrice Decimal   @db.Decimal(8, 2)
  description  String?
  imageUrl     String?
  isActive     Boolean?  @default(true)
  sortOrder    Int?      @default(0)
  createdAt    DateTime? @default(now()) @db.Timestamp(6)
  updatedAt    DateTime? @default(now()) @updatedAt @db.Timestamp(6)
}

model BilliardsSettings {
  id                    Int       @id @default(autoincrement())
  bookingFee            Decimal?  @default(100) @db.Decimal(8, 2)
  bookingTimeoutMinutes Int?      @default(20)
  minBookingDuration    Int?      @default(60)
  maxBookingDuration    Int?      @default(480)
  isActive              Boolean?  @default(true)
  createdAt             DateTime? @default(now()) @db.Timestamp(6)
  updatedAt             DateTime? @default(now()) @updatedAt @db.Timestamp(6)
}

model KaraokeService {
  id           Int       @id @default(autoincrement())
  name         String    @db.VarChar(255)
  type         String    @unique @db.VarChar(50)
  weekdayPrice Decimal   @db.Decimal(8, 2)
  weekendPrice Decimal   @db.Decimal(8, 2)
  description  String?
  imageUrl     String?
  isActive     Boolean?  @default(true)
  sortOrder    Int?      @default(0)
  createdAt    DateTime? @default(now()) @db.Timestamp(6)
  updatedAt    DateTime? @default(now()) @updatedAt @db.Timestamp(6)
}

model KaraokeSettings {
  id                   Int       @id @default(autoincrement())
  maxVipGuests         Int?      @default(15)
  baseVipPrice         Decimal?  @default(21000) @db.Decimal(8, 2)
  additionalGuestPrice Decimal?  @default(3500) @db.Decimal(8, 2)
  depositPolicy        String?   @default("В случае неиспользования суммы депозита, денежные средства не возвращаются.")
  isActive             Boolean?  @default(true)
  createdAt            DateTime? @default(now()) @db.Timestamp(6)
  updatedAt            DateTime? @default(now()) @updatedAt @db.Timestamp(6)
}

model BanquetRequest {
  id               Int                  @id @default(autoincrement())
  eventDate        DateTime
  eventTime        String
  endTime          String?
  guestCount       Int
  eventType        String
  budget           String
  banquetType      String?
  specialMenu      String?
  music            String?
  decor            String?
  name             String
  phone            String
  email            String?
  additionalWishes String?
  status           BanquetRequestStatus @default(pending)
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(255)
  description String
  date        DateTime
  time        String   @db.VarChar(100)
  price       String?  @db.VarChar(100)
  category    String   @db.VarChar(100)
  isUpcoming  Boolean  @default(true)
  isActive    Boolean  @default(true)
  imageUrl    String?
  maxGuests   Int?
  location    String?  @db.VarChar(255)
  organizer   String?  @db.VarChar(255)
  contactInfo String?
  tags        String[]
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum ZoneType {
  karaoke
  billiards
  restaurant
  disco
  playstation
  bowling
  spa
  cinema
  custom
}

enum ZoneItemType {
  table
  booth
  stage
  bar
  danceFloor
  gameTable
  lounge
  spaRoom
  cinemaHall
  custom
}

enum ReservationType {
  seating
  fullItem
  event
  timeSlot
}

enum ReservationStatus {
  booked
  arrived
  no_show
  cancelled
}

enum BanquetRequestStatus {
  pending
  approved
  rejected
  completed
}
