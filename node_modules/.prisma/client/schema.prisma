// ---------- Генератор клиента и подключение к БД ----------
generator client {
  provider = "prisma-client-js"
  output   = "../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- Зона (зал) ----------
model Zone {
  id        Int        @id @default(autoincrement())
  name      String
  openTime  String
  closeTime String
  imageUrl  String
  items     ZoneItem[] // 1 ко многим: одна зона → много элементов
}

// ---------- Элемент зоны ----------
model ZoneItem {
  id        Int     @id @default(autoincrement())
  zoneId    Int
  floor     Int     @default(1)
  label     String
  type      String
  isBooking Boolean @default(false)
  isActive  Boolean @default(true)

  x      Float
  y      Float
  width  Float
  height Float

  seats        Int?
  zone         Zone          @relation(fields: [zoneId], references: [id])
  reservations Reservation[]
}

// ---------- Бронирование ----------
model Reservation {
  id         Int               @id @default(autoincrement())
  zoneItemId Int // связь с элементом зоны
  userName   String
  phone      String
  startsAt   DateTime
  endsAt     DateTime
  deposit    Decimal           @db.Decimal(5, 2)
  status     ReservationStatus @default(booked)

  zoneItem ZoneItem  @relation(fields: [zoneItemId], references: [id])
  payments Payment[]
}

// ---------- Платёж ----------
model Payment {
  id            Int      @id @default(autoincrement())
  reservationId Int
  amount        Decimal  @db.Decimal(5, 2)
  payDate       DateTime @default(now())
  refunded      Boolean  @default(false)

  reservation Reservation @relation(fields: [reservationId], references: [id])
}

// ---------- Статусы бронирования ----------
enum ReservationStatus {
  booked // забронировано
  arrived // клиент пришёл
  no_show // клиент не пришёл
  cancelled // отменено
}

// ---------- Тип меню ----------
model MenuType {
  id          Int            @id @default(autoincrement())
  name        String // "Основное", "Барная карта", "Банкетное меню"
  slug        String         @unique // "main", "bar", "banquet"
  description String?
  isActive    Boolean        @default(true)
  sortOrder   Int            @default(0)
  categories  MenuCategory[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

// ---------- Категория меню ----------
model MenuCategory {
  id          Int        @id @default(autoincrement())
  menuTypeId  Int
  name        String // "Холодные закуски", "Салаты", "Коктейли"
  slug        String     @unique // "cold-appetizers", "salads", "cocktails"
  description String?
  isActive    Boolean    @default(true)
  sortOrder   Int        @default(0)
  items       MenuItem[]
  menuType    MenuType   @relation(fields: [menuTypeId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

// ---------- Блюдо/напиток ----------
model MenuItem {
  id          Int          @id @default(autoincrement())
  categoryId  Int
  name        String // "Стейк Рибай", "Мохито"
  description String? // Описание блюда
  price       Decimal      @db.Decimal(8, 2)
  currency    String       @default("₽")
  imageUrl    String? // Ссылка на Cloudinary
  isActive    Boolean      @default(true)
  isPopular   Boolean      @default(false) // Популярное блюдо
  allergens   String[] // Аллергены: ["глютен", "лактоза"]
  weight      String? // "300г", "0.5л"
  calories    Int? // Калории
  preparation String? // Время приготовления
  sortOrder   Int          @default(0)
  category    MenuCategory @relation(fields: [categoryId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}
