generator client {
  provider = "prisma-client-js"
  output   = "../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Hall {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  description String?
  type        HallType @default(restaurant)
  imageUrl    String?
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  zones       Zone[]
}

model Zone {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(255)
  type        ZoneType   @default(restaurant)
  hallId      Int        @default(1)
  openTime    String
  closeTime   String
  imageUrl    String?
  description String?
  isActive    Boolean    @default(true)
  sortOrder   Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt
  hall        Hall       @relation(fields: [hallId], references: [id])
  items       ZoneItem[]
}

model ZoneItem {
  id           Int           @id @default(autoincrement())
  zoneId       Int
  floor        Int           @default(1)
  label        String
  type         ZoneItemType  @default(table)
  isBooking    Boolean       @default(false)
  isActive     Boolean       @default(true)
  x            Float
  y            Float
  width        Float
  height       Float
  seats        Int?
  capacity     Int?
  pricePerHour Decimal?      @db.Decimal(8, 2)
  pricePerSeat Decimal?      @db.Decimal(8, 2)
  pricePerSlot Decimal?      @db.Decimal(8, 2)
  minDuration  Int?
  maxDuration  Int?
  timeSlots    String[]
  description  String?
  features     String[]
  reservations Reservation[]
  zone         Zone          @relation(fields: [zoneId], references: [id])
}

model Reservation {
  id              Int               @id @default(autoincrement())
  zoneItemId      Int
  type            ReservationType   @default(seating)
  userName        String
  phone           String
  startsAt        DateTime
  endsAt          DateTime
  deposit         Decimal           @db.Decimal(5, 2)
  status          ReservationStatus @default(booked)
  seatsCount      Int?
  guestsCount     Int?
  duration        Int?
  comment         String?
  specialRequests String?
  totalPrice      Decimal?          @db.Decimal(8, 2)
  payments        Payment[]
  zoneItem        ZoneItem          @relation(fields: [zoneItemId], references: [id])
}

model Payment {
  id            Int         @id @default(autoincrement())
  reservationId Int
  amount        Decimal     @db.Decimal(5, 2)
  payDate       DateTime    @default(now())
  refunded      Boolean     @default(false)
  reservation   Reservation @relation(fields: [reservationId], references: [id])
}

model MenuType {
  id          Int            @id @default(autoincrement())
  name        String
  slug        String         @unique
  description String?
  isActive    Boolean        @default(true)
  sortOrder   Int            @default(0)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  categories  MenuCategory[]
}

model MenuCategory {
  id          Int        @id @default(autoincrement())
  menuTypeId  Int
  name        String
  slug        String     @unique
  description String?
  isActive    Boolean    @default(true)
  sortOrder   Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  menuType    MenuType   @relation(fields: [menuTypeId], references: [id])
  items       MenuItem[]
}

model MenuItem {
  id          Int          @id @default(autoincrement())
  categoryId  Int
  name        String
  description String?
  price       Decimal      @db.Decimal(8, 2)
  imageUrl    String?
  isActive    Boolean      @default(true)
  sortOrder   Int          @default(0)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  category    MenuCategory @relation(fields: [categoryId], references: [id])
}

model Hookah {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  description String?
  price       Decimal  @db.Decimal(8, 2)
  features    String[]
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model BoardGame {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  description String?
  price       Decimal  @db.Decimal(8, 2)
  duration    String?  @db.VarChar(100)
  players     String?  @db.VarChar(100)
  difficulty  String?  @db.VarChar(100)
  category    String?  @db.VarChar(100)
  imageUrl    String?
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model BilliardsService {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(255)
  type        String    @unique @db.VarChar(50)
  price       Decimal   @db.Decimal(8, 2)
  description String?
  imageUrl    String?
  isActive    Boolean?  @default(true)
  sortOrder   Int?      @default(0)
  createdAt   DateTime? @default(now()) @db.Timestamp(6)
  updatedAt   DateTime? @default(now()) @updatedAt @db.Timestamp(6)
}

model BilliardsSettings {
  id                    Int       @id @default(autoincrement())
  bookingFee            Decimal?  @default(100) @db.Decimal(8, 2)
  bookingTimeoutMinutes Int?      @default(20)
  minBookingDuration    Int?      @default(60)
  maxBookingDuration    Int?      @default(480)
  isActive              Boolean?  @default(true)
  createdAt             DateTime? @default(now()) @db.Timestamp(6)
  updatedAt             DateTime? @default(now()) @updatedAt @db.Timestamp(6)
}

model KaraokeService {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(255)
  type        String    @unique @db.VarChar(50)
  price       Decimal   @db.Decimal(8, 2)
  description String?
  imageUrl    String?
  isActive    Boolean?  @default(true)
  sortOrder   Int?      @default(0)
  createdAt   DateTime? @default(now()) @db.Timestamp(6)
  updatedAt   DateTime? @default(now()) @updatedAt @db.Timestamp(6)
}

model KaraokeSettings {
  id                   Int       @id @default(autoincrement())
  maxVipGuests         Int?      @default(15)
  baseVipPrice         Decimal?  @default(21000) @db.Decimal(8, 2)
  additionalGuestPrice Decimal?  @default(3500) @db.Decimal(8, 2)
  depositPolicy        String?   @default("В случае неиспользования суммы депозита, денежные средства не возвращаются.")
  isActive             Boolean?  @default(true)
  createdAt            DateTime? @default(now()) @db.Timestamp(6)
  updatedAt            DateTime? @default(now()) @updatedAt @db.Timestamp(6)
}

model BanquetRequest {
  id               Int                  @id @default(autoincrement())
  eventDate        DateTime
  eventTime        String
  endTime          String?
  guestCount       Int
  eventType        String
  budget           String
  banquetType      String?
  specialMenu      String?
  music            String?
  decor            String?
  name             String
  phone            String
  email            String?
  additionalWishes String?
  status           BanquetRequestStatus @default(pending)
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
}

model order_items {
  id             Int          @id @default(autoincrement())
  order_id       Int
  user_ticket_id Int          @unique
  price          Decimal      @db.Decimal(10, 2)
  quantity       Int          @default(1)
  orders         orders       @relation(fields: [order_id], references: [id], onDelete: Cascade)
  user_tickets   user_tickets @relation(fields: [user_ticket_id], references: [id], onDelete: Cascade)

  @@index([order_id])
  @@index([user_ticket_id])
}

model orders {
  id             Int            @id @default(autoincrement())
  user_id        Int?
  first_name     String         @db.VarChar(50)
  last_name      String         @db.VarChar(50)
  email          String         @db.VarChar(100)
  phone          String         @db.VarChar(20)
  status         OrderStatus    @default(pending)
  total_amount   Decimal        @db.Decimal(10, 2)
  payment_id     String?
  payment_method String?        @db.VarChar(50)
  created_at     DateTime       @default(now())
  updated_at     DateTime
  order_items    order_items[]
  users          users?         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_tickets   user_tickets[] @relation("OrderTickets")

  @@index([payment_id])
  @@index([status])
  @@index([user_id])
}

model refund_tickets {
  refund_id      Int
  user_ticket_id Int
  ticket_number  String       @db.VarChar(50)
  refund_amount  Decimal      @db.Decimal(10, 2)
  refunds        refunds      @relation(fields: [refund_id], references: [id], onDelete: Cascade)
  user_tickets   user_tickets @relation(fields: [user_ticket_id], references: [id], onDelete: Cascade)

  @@id([refund_id, user_ticket_id])
}

model refunds {
  id                    Int              @id @default(autoincrement())
  user_id               Int?
  email                 String           @db.VarChar(100)
  phone                 String           @db.VarChar(20)
  full_name             String           @db.VarChar(150)
  account_number        String           @db.VarChar(50)
  bank_name             String           @db.VarChar(100)
  bik                   String           @db.VarChar(20)
  correspondent_account String           @db.VarChar(50)
  inn                   String           @db.VarChar(20)
  kpp                   String?          @db.VarChar(20)
  okpo                  String?          @db.VarChar(20)
  ogrn                  String?          @db.VarChar(20)
  refund_amount         Decimal          @db.Decimal(10, 2)
  refund_reason         String
  created_at            DateTime         @default(now())
  updated_at            DateTime
  deleted_at            DateTime?
  refund_tickets        refund_tickets[]
  users                 users?           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_tickets          user_tickets[]   @relation("RefundTickets")

  @@index([created_at])
  @@index([user_id])
}

model tickets {
  id                Int            @id @default(autoincrement())
  title             String         @db.VarChar(100)
  short_description String?        @db.VarChar(255)
  description       String?
  image_url         String?
  event_date        DateTime
  event_location    String
  price             Decimal        @db.Decimal(10, 2)
  is_used           Boolean        @default(false)
  qr_code           String?
  ticket_number     String         @unique @db.VarChar(50)
  user_id           Int?
  created_at        DateTime       @default(now())
  updated_at        DateTime
  users             users?         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_tickets      user_tickets[]

  @@index([ticket_number], map: "tickets_ticket_number_unique")
  @@index([user_id])
}

model user_tickets {
  id             Int              @id @default(autoincrement())
  user_id        Int?
  ticket_id      Int
  ticket_number  String           @unique @db.VarChar(50)
  qr_code        String?
  purchase_date  DateTime         @default(now())
  is_used        Boolean          @default(false)
  used_at        DateTime?
  payment_status PaymentStatus    @default(pending)
  payment_id     String?
  expires_at     DateTime?
  created_at     DateTime         @default(now())
  updated_at     DateTime
  email          String?          @db.VarChar(255)
  first_name     String?          @db.VarChar(255)
  last_name      String?          @db.VarChar(255)
  phone          String?          @db.VarChar(20)
  order_items    order_items?
  refund_tickets refund_tickets[]
  tickets        tickets          @relation(fields: [ticket_id], references: [id], onDelete: Cascade)
  users          users?           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  orders         orders[]         @relation("OrderTickets")
  refunds        refunds[]        @relation("RefundTickets")

  @@index([email])
  @@index([expires_at])
  @@index([first_name, last_name], map: "user_tickets_name_idx")
  @@index([payment_id])
  @@index([phone])
  @@index([ticket_id])
  @@index([ticket_number])
  @@index([user_id])
}

model users {
  id            Int            @id @default(autoincrement())
  telegram_id   BigInt?        @unique
  username      String?        @db.VarChar(255)
  first_name    String         @default("Гость") @db.VarChar(255)
  last_name     String?        @db.VarChar(255)
  is_admin      Boolean        @default(false)
  language_code String?        @db.VarChar(10)
  is_bot        Boolean        @default(false)
  phone         String?        @db.VarChar(20)
  email         String?        @db.VarChar(255)
  created_at    DateTime       @default(now())
  updated_at    DateTime
  orders        orders[]
  refunds       refunds[]
  tickets       tickets[]
  user_tickets  user_tickets[]
}

enum HallType {
  restaurant
  karaoke
  billiards
  disco
  playstation
  bowling
  spa
  cinema
  banquet
  custom
}

enum ZoneType {
  karaoke
  billiards
  restaurant
  disco
  playstation
  bowling
  spa
  cinema
  custom
}

enum ZoneItemType {
  table
  booth
  stage
  bar
  danceFloor
  gameTable
  lounge
  spaRoom
  cinemaHall
  custom
}

enum ReservationType {
  seating
  fullItem
  event
  timeSlot
}

enum ReservationStatus {
  booked
  arrived
  no_show
  cancelled
}

enum BanquetRequestStatus {
  pending
  approved
  rejected
  completed
}

enum OrderStatus {
  pending
  paid
  completed
  canceled
}

enum PaymentStatus {
  pending
  paid
  failed
  canceled
}
