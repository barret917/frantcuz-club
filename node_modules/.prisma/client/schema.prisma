generator client {
  provider = "prisma-client-js"
  output   = "../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ZoneType {
  karaoke // Зона караоке
  billiards // Зона бильярда
  restaurant // Зона ресторана
  disco // Диско-бар
  playstation // Зона игровых приставок
  bowling // Боулинг
  spa // СПА зона
  cinema // Кинотеатр
  custom // Пользовательская зона
}

model Zone {
  id        Int        @id @default(autoincrement())
  name      String
  type      ZoneType   @default(restaurant)
  openTime  String
  closeTime String
  imageUrl  String
  items     ZoneItem[]
}

enum ZoneItemType {
  table // Стол с посадочными местами
  booth // Кабинка/бокс (PS, караоке, VIP)
  stage // Сцена
  bar // Барная стойка
  danceFloor // Танцпол
  gameTable // Игровой стол (бильярд, боулинг)
  lounge // Лаунж зона
  spaRoom // СПА комната
  cinemaHall // Кинозал
  custom // Пользовательский элемент
}

model ZoneItem {
  id        Int          @id @default(autoincrement())
  zoneId    Int
  floor     Int          @default(1)
  label     String
  type      ZoneItemType @default(table)
  isBooking Boolean      @default(false)
  isActive  Boolean      @default(true)
  x         Float
  y         Float
  width     Float
  height    Float

  // Гибкие поля для разных типов элементов
  seats        Int? // Количество мест (для table, booth)
  capacity     Int? // Вместимость (для booth, gameTable)
  pricePerHour Decimal? @db.Decimal(8, 2) // Цена за час
  pricePerSeat Decimal? @db.Decimal(8, 2) // Цена за место
  pricePerSlot Decimal? @db.Decimal(8, 2) // Цена за слот/сессию

  // Настройки бронирования
  minDuration Int? // Минимальная длительность (в минутах)
  maxDuration Int? // Максимальная длительность (в минутах)
  timeSlots   String[] // Доступные временные слоты (для timeSlot)

  // Дополнительные настройки
  description String? // Описание элемента
  features    String[] // Особенности (WiFi, кондиционер, и т.д.)

  reservations Reservation[]
  zone         Zone          @relation(fields: [zoneId], references: [id])
}

model Reservation {
  id         Int               @id @default(autoincrement())
  zoneItemId Int
  type       ReservationType   @default(seating)
  userName   String
  phone      String
  startsAt   DateTime
  endsAt     DateTime
  deposit    Decimal           @db.Decimal(5, 2)
  status     ReservationStatus @default(booked)

  // Гибкие поля для разных типов бронирования
  seatsCount  Int? // Количество забронированных мест (seating)
  guestsCount Int? // Количество гостей (fullItem)
  duration    Int? // Длительность в минутах

  // Дополнительная информация
  comment         String?
  specialRequests String? // Особые пожелания
  totalPrice      Decimal? @db.Decimal(8, 2) // Итоговая цена

  payments Payment[]
  zoneItem ZoneItem  @relation(fields: [zoneItemId], references: [id])
}

model Payment {
  id            Int         @id @default(autoincrement())
  reservationId Int
  amount        Decimal     @db.Decimal(5, 2)
  payDate       DateTime    @default(now())
  refunded      Boolean     @default(false)
  reservation   Reservation @relation(fields: [reservationId], references: [id])
}

model MenuType {
  id          Int            @id @default(autoincrement())
  name        String
  slug        String         @unique
  description String?
  isActive    Boolean        @default(true)
  sortOrder   Int            @default(0)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  categories  MenuCategory[]
}

model MenuCategory {
  id          Int        @id @default(autoincrement())
  menuTypeId  Int
  name        String
  slug        String     @unique
  description String?
  isActive    Boolean    @default(true)
  sortOrder   Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  menuType    MenuType   @relation(fields: [menuTypeId], references: [id])
  items       MenuItem[]
}

model MenuItem {
  id          Int          @id @default(autoincrement())
  categoryId  Int
  name        String
  description String?
  price       Decimal      @db.Decimal(8, 2)
  currency    String       @default("₽")
  imageUrl    String?
  isActive    Boolean      @default(true)
  isPopular   Boolean      @default(false)
  allergens   String[]
  weight      String?
  calories    Int?
  preparation String?
  sortOrder   Int          @default(0)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  category    MenuCategory @relation(fields: [categoryId], references: [id])
}

model BilliardsService {
  id           Int       @id @default(autoincrement())
  name         String    @db.VarChar(255)
  type         String    @unique @db.VarChar(50)
  weekdayPrice Decimal   @db.Decimal(8, 2)
  weekendPrice Decimal   @db.Decimal(8, 2)
  description  String?
  imageUrl     String?
  isActive     Boolean?  @default(true)
  sortOrder    Int?      @default(0)
  createdAt    DateTime? @default(now()) @db.Timestamp(6)
  updatedAt    DateTime? @default(now()) @updatedAt @db.Timestamp(6)
}

model BilliardsSettings {
  id                    Int       @id @default(autoincrement())
  bookingFee            Decimal?  @default(100) @db.Decimal(8, 2)
  bookingTimeoutMinutes Int?      @default(20)
  minBookingDuration    Int?      @default(60)
  maxBookingDuration    Int?      @default(480)
  isActive              Boolean?  @default(true)
  createdAt             DateTime? @default(now()) @db.Timestamp(6)
  updatedAt             DateTime? @default(now()) @updatedAt @db.Timestamp(6)
}

// ---------- Караоке ----------
model KaraokeService {
  id           Int       @id @default(autoincrement())
  name         String    @db.VarChar(255)
  type         String    @unique @db.VarChar(50)
  weekdayPrice Decimal   @db.Decimal(8, 2)
  weekendPrice Decimal   @db.Decimal(8, 2)
  description  String?
  imageUrl     String?
  isActive     Boolean?  @default(true)
  sortOrder    Int?      @default(0)
  createdAt    DateTime? @default(now()) @db.Timestamp(6)
  updatedAt    DateTime? @default(now()) @updatedAt @db.Timestamp(6)
}

model KaraokeSettings {
  id                   Int       @id @default(autoincrement())
  maxVipGuests         Int?      @default(15)
  baseVipPrice         Decimal?  @default(21000) @db.Decimal(8, 2)
  additionalGuestPrice Decimal?  @default(3500) @db.Decimal(8, 2)
  depositPolicy        String?   @default("В случае неиспользования суммы депозита, денежные средства не возвращаются.")
  isActive             Boolean?  @default(true)
  createdAt            DateTime? @default(now()) @db.Timestamp(6)
  updatedAt            DateTime? @default(now()) @updatedAt @db.Timestamp(6)
}

enum ReservationType {
  seating // Бронь места за столом (караоке, ресторан)
  fullItem // Бронь всего элемента (PS кабинка, бильярдный стол)
  event // Бронь мероприятия (сцена, танцпол)
  timeSlot // Бронь временного слота (SPA, кино)
}

enum ReservationStatus {
  booked
  arrived
  no_show
  cancelled
}

// ---------- Заявки на банкеты ----------
model BanquetRequest {
  id               Int                  @id @default(autoincrement())
  eventDate        DateTime
  eventTime        String
  endTime          String?
  guestCount       Int
  eventType        String
  budget           String
  banquetType      String?
  specialMenu      String?
  music            String?
  decor            String?
  name             String
  phone            String
  email            String?
  additionalWishes String?
  status           BanquetRequestStatus @default(pending)
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
}

enum BanquetRequestStatus {
  pending
  approved
  rejected
  completed
}
