import React, { useEffect, useRef, useState } from 'react';
import "pannellum/build/pannellum.css";

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç pannellum
let pannellum: any = null;

const loadPannellum = async () => {
  if (!pannellum) {
    try {
      // –ü—Ä–æ–±—É–µ–º CDN –≤–µ—Ä—Å–∏—é –Ω–∞–ø—Ä—è–º—É—é
      return new Promise((resolve) => {
        if (typeof window !== 'undefined' && (window as any).pannellum) {
          pannellum = (window as any).pannellum;
          console.log('‚úÖ Pannellum —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ window');
          resolve(pannellum);
        } else {
          // –ó–∞–≥—Ä—É–∂–∞–µ–º CDN –≤–µ—Ä—Å–∏—é
          console.log('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º pannellum —á–µ—Ä–µ–∑ CDN...');
          
          // –ó–∞–≥—Ä—É–∂–∞–µ–º CSS
          const cssLink = document.createElement('link');
          cssLink.rel = 'stylesheet';
          cssLink.href = 'https://cdn.jsdelivr.net/npm/pannellum@2.5.6/build/pannellum.css';
          document.head.appendChild(cssLink);
          
          // –ó–∞–≥—Ä—É–∂–∞–µ–º JS
          const script = document.createElement('script');
          script.src = 'https://cdn.jsdelivr.net/npm/pannellum@2.5.6/build/pannellum.js';
          script.onload = () => {
            pannellum = (window as any).pannellum;
            console.log('‚úÖ Pannellum –∑–∞–≥—Ä—É–∂–µ–Ω —á–µ—Ä–µ–∑ CDN —Å–∫—Ä–∏–ø—Ç');
            resolve(pannellum);
          };
          script.onerror = () => {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å pannellum —á–µ—Ä–µ–∑ CDN');
            resolve(null);
          };
          document.head.appendChild(script);
        }
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ pannellum:', error);
      return null;
    }
  }
  return pannellum;
};

interface Hotspot {
  pitch: number;
  yaw: number;
  text: string;
  zone: string;
}

interface Zone {
  name: string;
  description: string;
  panorama: string;
  hotspots: Hotspot[];
}

type ZoneKey = 'main-hall' | 'bar' | 'dance-floor' | 'vip';

export default function PanoramViewer() { 
  const mountRef = useRef<HTMLDivElement>(null);
  const [currentZone, setCurrentZone] = useState<ZoneKey>('main-hall');
  const [isLoading, setIsLoading] = useState(true);

  // –ó–æ–Ω—ã –∫–ª—É–±–∞ —Å –ø–∞–Ω–æ—Ä–∞–º–∞–º–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
  const zones: Record<ZoneKey, Zone> = {
    'main-hall': {
      name: '–ì–ª–∞–≤–Ω—ã–π –∑–∞–ª',
      description: '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞ –∫–ª—É–±–∞ —Å –±–∞—Ä–æ–º –∏ —Ç–∞–Ω—Ü–ø–æ–ª–æ–º',
      panorama: 'data:image/svg+xml;base64,' + btoa(`
        <svg width="2048" height="1024" xmlns="http://www.w3.org/2000/svg">
          <rect width="100%" height="100%" fill="#667eea"/>
        </svg>
      `),
      hotspots: [
        { pitch: 0, yaw: 90, text: '–ë–∞—Ä', zone: 'bar' },
        { pitch: 0, yaw: -90, text: '–¢–∞–Ω—Ü–ø–æ–ª', zone: 'dance-floor' },
        { pitch: 0, yaw: 180, text: 'VIP –∑–æ–Ω–∞', zone: 'vip' }
      ]
    },
    'bar': {
      name: '–ë–∞—Ä',
      description: '–°—Ç–∏–ª—å–Ω—ã–π –±–∞—Ä —Å —à–∏—Ä–æ–∫–∏–º –≤—ã–±–æ—Ä–æ–º –Ω–∞–ø–∏—Ç–∫–æ–≤',
      panorama: 'data:image/svg+xml;base64,' + btoa(`
        <svg width="2048" height="1024" xmlns="http://www.w3.org/2000/svg">
          <rect width="100%" height="100%" fill="#f59e0b"/>
        </svg>
      `),
      hotspots: [
        { pitch: 0, yaw: 0, text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω—ã–π –∑–∞–ª', zone: 'main-hall' }
      ]
    },
    'dance-floor': {
      name: '–¢–∞–Ω—Ü–ø–æ–ª',
      description: '–ü—Ä–æ—Å—Ç–æ—Ä–Ω–∞—è —Ç–∞–Ω—Ü–µ–≤–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞ —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –∑–≤—É–∫–æ–º',
      panorama: 'data:image/svg+xml;base64,' + btoa(`
        <svg width="2048" height="1024" xmlns="http://www.w3.org/2000/svg">
          <rect width="100%" height="100%" fill="#ec4899"/>
        </svg>
      `),
      hotspots: [
        { pitch: 0, yaw: 0, text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω—ã–π –∑–∞–ª', zone: 'main-hall' }
      ]
    },
    'vip': {
      name: 'VIP –∑–æ–Ω–∞',
      description: '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è –∑–æ–Ω–∞ –¥–ª—è –æ—Å–æ–±—ã—Ö –≥–æ—Å—Ç–µ–π',
      panorama: 'data:image/svg+xml;base64,' + btoa(`
        <svg width="2048" height="1024" xmlns="http://www.w3.org/2000/svg">
          <rect width="100%" height="100%" fill="#10b981"/>
        </svg>
      `),
      hotspots: [
        { pitch: 0, yaw: 0, text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω—ã–π –∑–∞–ª', zone: 'main-hall' }
      ]
    }
  };

  useEffect(() => {
    if (!mountRef.current) return;

    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è pannellum –¥–ª—è –∑–æ–Ω—ã:', currentZone);
    console.log('üì∏ URL –ø–∞–Ω–æ—Ä–∞–º—ã:', zones[currentZone].panorama);

    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π viewer
    if (mountRef.current.children.length > 0) {
      mountRef.current.innerHTML = '';
    }

    const initializeViewer = async () => {
      try {
        const pannellumModule = await loadPannellum();
        if (!pannellumModule) {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å pannellum');
        }

        console.log('üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ pannellum –º–æ–¥—É–ª—è:', pannellumModule);
        console.log('üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã:', Object.keys(pannellumModule));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–∑–æ–≤–∞
        let viewer;
        if (typeof pannellumModule.viewer === 'function') {
          console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º pannellumModule.viewer');
          viewer = pannellumModule.viewer(mountRef.current, {
            type: 'equirectangular',
            panorama: zones[currentZone].panorama,
            autoLoad: true,
            showControls: true,
            hotSpots: zones[currentZone].hotspots.map(hotspot => ({
              pitch: hotspot.pitch,
              yaw: hotspot.yaw,
              text: hotspot.text,
              cssClass: 'custom-hotspot',
              clickHandlerFunc: () => {
                console.log('üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –≤ –∑–æ–Ω—É:', hotspot.zone);
                setCurrentZone(hotspot.zone as ZoneKey);
              }
            })),
            onLoad: () => {
              console.log('‚úÖ –ü–∞–Ω–æ—Ä–∞–º–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
              setIsLoading(false);
            },
            onError: (error: any) => {
              console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–Ω–æ—Ä–∞–º—ã:', error);
              setIsLoading(false);
            }
          });
        } else if (typeof pannellumModule.default?.viewer === 'function') {
          console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º pannellumModule.default.viewer');
          viewer = pannellumModule.default.viewer(mountRef.current, {
            type: 'equirectangular',
            panorama: zones[currentZone].panorama,
            autoLoad: true,
            showControls: true,
            hotSpots: zones[currentZone].hotspots.map(hotspot => ({
              pitch: hotspot.pitch,
              yaw: hotspot.yaw,
              text: hotspot.text,
              cssClass: 'custom-hotspot',
              clickHandlerFunc: () => {
                console.log('üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –≤ –∑–æ–Ω—É:', hotspot.zone);
                setCurrentZone(hotspot.zone as ZoneKey);
              }
            })),
            onLoad: () => {
              console.log('‚úÖ –ü–∞–Ω–æ—Ä–∞–º–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
              setIsLoading(false);
            },
            onError: (error: any) => {
              console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–Ω–æ—Ä–∞–º—ã:', error);
              setIsLoading(false);
            }
          });
        } else {
          console.log('‚ùå –ú–µ—Ç–æ–¥ viewer –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã:', Object.keys(pannellumModule));
          throw new Error('–ú–µ—Ç–æ–¥ viewer –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ pannellum –º–æ–¥—É–ª–µ');
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –≥–æ—Ä—è—á–∏—Ö —Ç–æ—á–µ–∫
        const style = document.createElement('style');
        style.textContent = `
          .custom-hotspot {
            background: rgba(255, 255, 255, 0.9);
            color: #333;
            padding: 8px 12px;
            border-radius: 20px;
            font-size: 14px;
            font-weight: 600;
            border: 2px solid #667eea;
            cursor: pointer;
            transition: all 0.3s ease;
          }
          .custom-hotspot:hover {
            background: #667eea;
            color: white;
            transform: scale(1.1);
          }
        `;
        document.head.appendChild(style);

        // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        return () => {
          if (viewer && typeof viewer.destroy === 'function') {
            viewer.destroy();
          }
          if (document.head.contains(style)) {
            document.head.removeChild(style);
          }
        };
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è pannellum viewer:', error);
        setIsLoading(false);
      }
    };

    initializeViewer();
  }, [currentZone]);

  return (
    <div 
      ref={mountRef}
      style={{ 
        width: '100%', 
        height: '500px',
        borderRadius: '15px',
        overflow: 'hidden',
        marginTop: '2rem',
        background: 'rgba(255, 255, 255, 0.05)',
        border: '1px solid rgba(255, 255, 255, 0.1)',
        position: 'relative'
      }}
    >
      {isLoading && (
        <div style={{
          position: 'absolute',
          top: '50%',
          left: '50%',
          transform: 'translate(-50%, -50%)',
          background: 'rgba(0, 0, 0, 0.8)',
          color: 'white',
          padding: '1rem 2rem',
          borderRadius: '10px',
          zIndex: 10
        }}>
          –ó–∞–≥—Ä—É–∑–∫–∞ 3D —Ç—É—Ä–∞...
        </div>
      )}
      
      <div style={{
        position: 'absolute',
        top: '1rem',
        left: '1rem',
        background: 'rgba(0, 0, 0, 0.7)',
        color: 'white',
        padding: '0.5rem 1rem',
        borderRadius: '8px',
        fontSize: '0.9rem',
        zIndex: 10
      }}>
        üè† {zones[currentZone].name} | üñ±Ô∏è –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –¥–ª—è –æ—Å–º–æ—Ç—Ä–∞ | üëÜ –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —Ç–æ—á–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
      </div>
      
      <div style={{
        position: 'absolute',
        bottom: '1rem',
        left: '1rem',
        background: 'rgba(0, 0, 0, 0.7)',
        color: 'white',
        padding: '0.5rem 1rem',
        borderRadius: '8px',
        fontSize: '0.8rem',
        zIndex: 10,
        maxWidth: '300px'
      }}>
        {zones[currentZone].description}
      </div>
    </div>
  );
}

