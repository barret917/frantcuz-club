// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Cloudinary
export const cloudinary = {
  cloudName: import.meta.env.VITE_CLOUDINARY_CLOUD_NAME || 'your-cloud-name'
}

// Function for uploading image with retry logic
export const uploadImage = async (
  file: File, 
  maxRetries: number = 3,
  onAttempt?: (attempt: number) => void
): Promise<string> => {
  let lastError: Error | null = null;
  
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    // Notify about current attempt
    if (onAttempt) {
      onAttempt(attempt);
    }
    
    try {
      return await new Promise((resolve, reject) => {
        const cloudName = import.meta.env.VITE_CLOUDINARY_CLOUD_NAME
        const uploadPreset = import.meta.env.VITE_CLOUDINARY_UPLOAD_PRESET
        
        console.log(`üöÄ –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries} –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Cloudinary:`, {
          cloudName,
          uploadPreset,
          fileName: file.name,
          fileSize: file.size,
          fileType: file.type
        })
        
        if (!cloudName || !uploadPreset) {
          const error = '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Cloudinary'
          console.error('‚ùå', error)
          reject(new Error(error))
          return
        }

        // Check that the file actually exists and is not empty
        if (!file || file.size === 0) {
          const error = '–§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω'
          console.error('‚ùå', error)
          reject(new Error(error))
          return
        }

        const formData = new FormData()
        formData.append('file', file)
        formData.append('upload_preset', uploadPreset)
        formData.append('folder', 'menu-items')
        // –£–±–∏—Ä–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        // formData.append('transformation', 'f_auto,q_auto,fl_progressive')
        // formData.append('format', 'auto')

        const uploadUrl = `https://api.cloudinary.com/v1_1/${cloudName}/image/upload`
        console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞:`, uploadUrl)

        // Add timeout to the fetch request
        const controller = new AbortController()
        const timeoutId = setTimeout(() => controller.abort(), 30000) // 30 second timeout

        fetch(uploadUrl, {
          method: 'POST',
          body: formData,
          signal: controller.signal
        })
        .then(response => {
          clearTimeout(timeoutId)
          console.log('üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Cloudinary:', response.status, response.statusText)
          if (!response.ok) {
            return response.text().then(text => {
              console.error('‚ùå –û—Ç–≤–µ—Ç Cloudinary:', text)
              reject(new Error(`–û—à–∏–±–∫–∞ Cloudinary: ${response.status} ${response.statusText}`))
            })
          }
          return response.json()
        })
        .then(data => {
          console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞:', data)
          if (data.secure_url) {
            resolve(data.secure_url)
          } else {
            const error = '–ù–µ –ø–æ–ª—É—á–µ–Ω URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç Cloudinary'
            console.error('‚ùå', error, data)
            reject(new Error(error))
          }
        })
        .catch(error => {
          clearTimeout(timeoutId)
          console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Cloudinary (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}):`, error)
          
          // Check if it's a network error that we should retry
          if (error.name === 'AbortError') {
            reject(new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏'))
          } else if (error.message && (
            error.message.includes('Failed to fetch') ||
            error.message.includes('ERR_PROXY_CONNECTION_FAILED') ||
            error.message.includes('ERR_NETWORK') ||
            error.message.includes('ERR_INTERNET_DISCONNECTED')
          )) {
            lastError = error
            // Don't reject here, let the retry loop continue
            throw error
          } else {
            reject(error)
          }
        })
      })
    } catch (error) {
      lastError = error as Error
      
      // If this is the last attempt, throw the error
      if (attempt === maxRetries) {
        console.error(`‚ùå –í—Å–µ ${maxRetries} –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞:`, error)
        
        // Provide user-friendly error message
        if (error instanceof Error) {
          if (error.message.includes('Failed to fetch') || error.message.includes('ERR_PROXY_CONNECTION_FAILED')) {
            throw new Error('–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç–µ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
          } else if (error.message.includes('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è')) {
            throw new Error('–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
          } else {
            throw error
          }
        } else {
          throw new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')
        }
      }
      
      // Wait before retrying (exponential backoff)
      const delay = Math.min(1000 * Math.pow(2, attempt - 1), 5000)
      console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${delay}ms –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...`)
      await new Promise(resolve => setTimeout(resolve, delay))
    }
  }
  
  // This should never be reached, but just in case
  throw lastError || new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ URL
export const getOptimizedImageUrl = (url: string, width: number = 800, height: number = 600): string => {
  if (!url.includes('cloudinary.com')) return url
  
  // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –±–µ–∑ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  return url.replace('/upload/', `/upload/c_fill,w_${width},h_${height},q_auto/`)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL –±–µ–∑ –±–µ–ª—ã—Ö —Ç–æ—á–µ–∫
export const getCleanImageUrl = (url: string): string => {
  if (!url.includes('cloudinary.com')) return url
  
  // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è
  return url.replace('/upload/', `/upload/q_auto/`)
} 