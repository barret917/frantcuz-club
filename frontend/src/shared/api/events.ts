import { apiClient } from './client'

export interface Event {
  id: number;
  title: string;
  short_description: string | null;
  description: string | null;
  image_url: string | null;
  event_date: string;
  event_location: string;
  price: string;
  is_used: boolean;
  qr_code: string | null;
  ticket_number: string;
  user_id: number | null;
  created_at: string;
  updated_at: string;
}

export interface CreateEventData {
  title: string;
  short_description: string | null;
  description: string | null;
  image_url: string | null;
  event_date: string;
  event_location: string;
  price: string;
}

export interface UpdateEventData extends Partial<CreateEventData> {}

export interface EventsResponse {
  success: boolean
  data: Event[]
  error?: string
  message?: string
}

export interface EventResponse {
  success: boolean
  data: Event
  error?: string
  message?: string
}

export interface CreateEventResponse {
  success: boolean
  data: Event
  message: string
  error?: string
}

export interface EventsStats {
  total: number
  upcoming: number
  past: number
  active: number
}

export interface StatsResponse {
  success: boolean
  data: EventsStats
  error?: string
}

// –¢–∏–ø—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
export type EventFilter = 'all' | 'upcoming' | 'past' | 'current'
export type EventStatus = 'upcoming' | 'active' | 'past'

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏
export const eventUtils = {
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
  getMoscowTime: (): Date => {
    return new Date() // –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
  },

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–∞—Ç—ã –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
  toMoscowTime: (date: Date | string): Date => {
    const dateObj = new Date(date)
    // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –≤—Ä–µ–º—è —É–∂–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º
    return new Date(dateObj)
  },

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
  getEventStatus: (event: Event): EventStatus => {
    const now = new Date()
    const eventDate = new Date(event.event_date)
    const oneHour = 60 * 60 * 1000 // 1 —á–∞—Å –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    
    // –ï—Å–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–¥–µ—Ç —Å–µ–π—á–∞—Å (–≤ —Ç–µ—á–µ–Ω–∏–µ 3 —á–∞—Å–æ–≤ –¥–æ –∏ –ø–æ—Å–ª–µ)
    const threeHoursBefore = new Date(eventDate.getTime() - 1 * oneHour)
    const threeHoursAfter = new Date(eventDate.getTime() + 3 * oneHour)
    
    if (now >= threeHoursBefore && now <= threeHoursAfter) {
      return 'active'
    }
    
    return now > eventDate ? 'past' : 'upcoming'
  },

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
  formatEventDateTime: (dateString: string): string => {
    const date = new Date(dateString)
    return date.toLocaleDateString('ru-RU', {
      day: 'numeric',
      month: 'long',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      timeZone: 'Europe/Moscow' // –£–∫–∞–∑—ã–≤–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
    })
  },

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–∞—Ç—ã
  formatEventDate: (dateString: string): string => {
    const date = new Date(dateString)
    return date.toLocaleDateString('ru-RU', {
      day: 'numeric',
      month: 'long',
      year: 'numeric',
      timeZone: 'Europe/Moscow'
    })
  },

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏
  formatEventTime: (dateString: string): string => {
    const date = new Date(dateString)
    return date.toLocaleTimeString('ru-RU', {
      hour: '2-digit',
      minute: '2-digit',
      timeZone: 'Europe/Moscow'
    })
  },

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
  filterEvents: (events: Event[], filter: EventFilter): Event[] => {
    switch (filter) {
      case 'upcoming':
        return events.filter(event => eventUtils.getEventStatus(event) === 'upcoming')
      
      case 'past':
        return events.filter(event => eventUtils.getEventStatus(event) === 'past')
      
      case 'current':
        return events.filter(event => eventUtils.getEventStatus(event) === 'active')
      
      case 'all':
      default:
        return events
    }
  },

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ –¥–∞—Ç–µ
  sortEvents: (events: Event[], sortBy: 'date-asc' | 'date-desc' = 'date-asc'): Event[] => {
    return [...events].sort((a, b) => {
      const dateA = eventUtils.toMoscowTime(a.event_date).getTime()
      const dateB = eventUtils.toMoscowTime(b.event_date).getTime()
      
      return sortBy === 'date-asc' ? dateA - dateB : dateB - dateA
    })
  },

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
  getEventsStats: (events: Event[]): EventsStats => {
    const stats = {
      total: events.length,
      upcoming: 0,
      past: 0,
      active: 0  // –º–µ–Ω—è–µ–º current –Ω–∞ active
    }
    
    events.forEach(event => {
      const status = eventUtils.getEventStatus(event)
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º 'current' –≤ 'active'
      const statKey = status === 'active' ? 'active' : status
      stats[statKey]++
    })
    
    return stats
  },

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ –¥–∞—Ç–∞–º
  groupEventsByDate: (events: Event[]): Map<string, Event[]> => {
    const grouped = new Map<string, Event[]>()
    
    events.forEach(event => {
      const dateKey = eventUtils.toMoscowTime(event.event_date).toISOString().split('T')[0]
      
      if (!grouped.has(dateKey)) {
        grouped.set(dateKey, [])
      }
      
      grouped.get(dateKey)!.push(event)
    })
    
    return grouped
  },

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∞—Ç–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º –¥–Ω–µ–º –≤ –ú–æ—Å–∫–≤–µ
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∞—Ç–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º –¥–Ω–µ–º
  isTodayInMoscow: (date: string | Date): boolean => {
    const today = new Date()
    const eventDate = new Date(date)
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–æ—Å–∫–æ–≤—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const todayMoscow = today.toLocaleDateString('ru-RU', { timeZone: 'Europe/Moscow' })
    const eventDateMoscow = eventDate.toLocaleDateString('ru-RU', { timeZone: 'Europe/Moscow' })
    
    return todayMoscow === eventDateMoscow
  },

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)
  generateEventImage: (title: string): string => {
    const colors = ['667eea', '8b5cf6', 'a855f7', 'ec4899', 'f59e0b', '10b981'];
    const pattern = ['abstract', 'nature', 'tech', 'music', 'art', 'party'];
    
    const color = colors[Math.floor(Math.random() * colors.length)];
    const patternType = pattern[Math.floor(Math.random() * pattern.length)];
    
    return `https://via.placeholder.com/400x200/${color}/ffffff?text=${encodeURIComponent(title)}&pattern=${patternType}`;
  }
}

export const eventsApi = {
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
  async getEvents(filter?: 'upcoming' | 'past'): Promise<EventsResponse> {
    try {
      const params = filter ? `?filter=${filter}` : ''
      const response = await apiClient.get(`/events${params}`)
      return response.data
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:', error)
      throw error
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–æ ID
  async getEvent(id: number): Promise<EventResponse> {
    try {
      const response = await apiClient.get(`/events/${id}`)
      return response.data
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', error)
      throw error
    }
  },

  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
  async createEvent(eventData: CreateEventData): Promise<CreateEventResponse> {
    console.log('üöÄ API: –°–æ–∑–¥–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:', eventData)
    console.log('üñºÔ∏è API: URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', eventData.image_url)
    
    try {
      const response = await apiClient.post('/events', eventData)
      console.log('‚úÖ API: –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ:', response.data)
      return response.data
    } catch (error) {
      console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', error)
      throw error
    }
  },

  // –û–±–Ω–æ–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
  async updateEvent(id: number, eventData: UpdateEventData): Promise<EventResponse> {
    try {
      const response = await apiClient.put(`/events/${id}`, eventData)
      return response.data
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', error)
      throw error
    }
  },

  // –£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
  async deleteEvent(id: number): Promise<{
    error: string; success: boolean; message: string 
}> {
    try {
      const response = await apiClient.delete(`/events/${id}`)
      return response.data
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', error)
      throw error
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
  async getStats(): Promise<StatsResponse> {
    try {
      const response = await apiClient.get('/events/stats/overview')
      return response.data
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:', error)
      throw error
    }
  },

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
  
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
  async getEventsWithClientFilter(filter?: EventFilter): Promise<EventsResponse> {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
      const response = await apiClient.get('/events')
      
      if (!response.data.success) {
        return response.data
      }
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
      let filteredData = response.data.data
      
      if (filter && filter !== 'all') {
        filteredData = eventUtils.filterEvents(response.data.data, filter)
      }
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
      filteredData = eventUtils.sortEvents(filteredData, 'date-asc')
      
      return {
        ...response.data,
        data: filteredData
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:', error)
      throw error
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É (–∫–ª–∏–µ–Ω—Ç—Å–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è)
  async getEventsByStatus(status: EventStatus): Promise<EventsResponse> {
    try {
      const response = await apiClient.get('/events')
      
      if (!response.data.success) {
        return response.data
      }
      
      const filteredData = response.data.data.filter((event: Event) => 
        eventUtils.getEventStatus(event) === status
      )
      
      return {
        ...response.data,
        data: eventUtils.sortEvents(filteredData, 'date-asc')
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ —Å—Ç–∞—Ç—É—Å—É:', error)
      throw error
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–∏–¥—É—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å)
  async getCurrentEvents(): Promise<EventsResponse> {
    return this.getEventsByStatus('active')
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  async getClientStats(): Promise<StatsResponse> {
    try {
      const response = await apiClient.get('/events')
      
      if (!response.data.success) {
        return {
          success: false,
          data: { total: 0, upcoming: 0, past: 0, active: 0 },
          error: response.data.error
        }
      }
      
      const stats = eventUtils.getEventsStats(response.data.data)
      
      return {
        success: true,
        data: stats
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error)
      return {
        success: false,
        data: { total: 0, upcoming: 0, past: 0, active: 0 },
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
      }
    }
  }
}