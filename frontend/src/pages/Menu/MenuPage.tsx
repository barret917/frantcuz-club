import React, { useState, useCallback, useMemo, useEffect } from 'react'

import { MenuType, MenuCategory, type MenuItem, menuApi } from '@/shared/api/menu'
// import { MenuSearch } from '@/features/menu-management'
import styled, { keyframes, css } from 'styled-components'

const fadeIn = keyframes`
  from { opacity: 0; transform: translateY(20px); }
  to { opacity: 1; transform: translateY(0); }
`;

const slideIn = keyframes`
  from { transform: translateX(-30px); opacity: 0; }
  to { transform: translateX(0); opacity: 1; }
`;

const pulse = keyframes`
  0%, 100% { transform: scale(1); }
  50% { transform: scale(1.05); }
`;

const float = keyframes`
  0%, 100% { transform: translateY(0px); }
  50% { transform: translateY(-5px); }
`;

const glow = keyframes`
  0%, 100% { box-shadow: 0 0 20px rgba(123, 97, 255, 0.3); }
  50% { box-shadow: 0 0 30px rgba(123, 97, 255, 0.6); }
`;

const shimmer = keyframes`
  0% { background-position: -200% 0; }
  100% { background-position: 200% 0; }
`;

const MenuPageContainer = styled.div`
  min-height: 100vh;
  background: linear-gradient(135deg, #0f0f23 0%, #1a1a2e 25%, #16213e 50%, #0f3460 75%, #533483 100%);
  padding: 2rem 0;
  position: relative;
  overflow: hidden;
  
  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: 
      radial-gradient(circle at 20% 80%, rgba(123, 97, 255, 0.1) 0%, transparent 50%),
      radial-gradient(circle at 80% 20%, rgba(88, 28, 135, 0.1) 0%, transparent 50%),
      radial-gradient(circle at 40% 40%, rgba(147, 51, 234, 0.05) 0%, transparent 50%);
    pointer-events: none;
  }
`;

const PageContainer = styled.div`
  max-width: 1400px;
  margin: 0 auto;
  padding: 0 2rem;
  position: relative;
  z-index: 1;
  
  @media (max-width: 768px) {
    padding: 0 1rem;
  }
`;

const PageTitle = styled.h1`
  font-size: 3.5rem;
  font-weight: 800;
  text-align: center;
  margin-bottom: 1rem;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  animation: ${fadeIn} 1s ease-out;
  
  @media (max-width: 768px) {
    font-size: 2.5rem;
  }
  
  @media (max-width: 480px) {
    font-size: 2rem;
  }
`;

const PageSubtitle = styled.p`
  font-size: 1.2rem;
  text-align: center;
  color: #e2e8f0;
  margin-bottom: 3rem;
  max-width: 800px;
  margin-left: auto;
  margin-right: auto;
  line-height: 1.6;
  animation: ${fadeIn} 1s ease-out 0.2s both;
  
  @media (max-width: 768px) {
    font-size: 1rem;
    margin-bottom: 2rem;
  }
`;

const MenuLayout = styled.div`
  display: flex;
  gap: 2rem;
  width: 100%;
  margin: 0;
  padding: 2rem 0 0 0;
  min-height: 0;
  
  @media (max-width: 1024px) {
    flex-direction: column;
    gap: 1.5rem;
  }
`;

const LeftPanel = styled.div`
  width: 280px;
  flex-shrink: 0;
  
  @media (max-width: 1024px) {
    width: 100%;
  }
`;

const PanelTitle = styled.h3`
  font-size: 1.3rem;
  font-weight: 700;
  color: #ffffff;
  margin-bottom: 1.5rem;
  text-align: center;
  padding: 1rem;
  background: rgba(255, 255, 255, 0.05);
  backdrop-filter: blur(20px);
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 15px;
  
  @media (max-width: 1024px) {
    margin-bottom: 1rem;
  }
`;

const MenuTypeButton = styled.button<{ $active: boolean }>`
  width: 100%;
  padding: 1rem 1.5rem;
  background: ${props => props.$active 
    ? 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)' 
    : 'rgba(255, 255, 255, 0.05)'
  };
  color: ${props => props.$active ? '#ffffff' : '#e2e8f0'};
  border: 1px solid ${props => props.$active 
    ? 'rgba(123, 97, 255, 0.5)' 
    : 'rgba(255, 255, 255, 0.1)'
  };
  border-radius: 12px;
  cursor: pointer;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  font-size: 1rem;
  font-weight: 500;
  margin-bottom: 1rem;
  text-align: left;
  backdrop-filter: blur(20px);
  
  &:hover {
    background: ${props => props.$active 
      ? 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)' 
      : 'rgba(255, 255, 255, 0.1)'
    };
    border-color: rgba(123, 97, 255, 0.3);
    /* transform: translateY(-2px); */
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
  }
  
  @media (max-width: 1024px) {
    margin-bottom: 0.5rem;
    padding: 0.8rem 1rem;
    font-size: 0.9rem;
  }
`;

const RightPanel = styled.div`
  flex: 1;
  min-width: 0;
  overflow: hidden;
`;

const CategoriesContainer = styled.div`
  padding: 1.5rem;
  background: rgba(255, 255, 255, 0.03);
  backdrop-filter: blur(20px);
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 20px;
  margin-bottom: 2rem;
  position: sticky;
  top: 0;
  z-index: 10;
  width: 100%;
  
  &::after {
    content: '‚Üí';
    position: absolute;
    right: 1.5rem;
    top: 50%;
    transform: translateY(-50%);
    color: rgba(123, 97, 255, 0.8);
    font-size: 1.5rem;
    font-weight: bold;
    pointer-events: none;
    animation: ${pulse} 2s ease-in-out infinite;
    
    @media (max-width: 768px) {
      right: 1rem;
      font-size: 1.2rem;
    }
  }
`;

const CategoriesScroll = styled.div`
  display: flex;
  gap: 1rem;
  overflow-x: auto;
  padding-bottom: 0.5rem;
  
  &::-webkit-scrollbar {
    display: none;
  }
  
  scrollbar-width: none;
  -ms-overflow-style: none;
`;

const CategoryButton = styled.button<{ $active: boolean }>`
  padding: 0.8rem 1.5rem;
  background: ${props => props.$active 
    ? 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)' 
    : 'rgba(255, 255, 255, 0.05)'
  };
  color: ${props => props.$active ? '#ffffff' : '#e2e8f0'};
  border: 1px solid ${props => props.$active 
    ? 'rgba(123, 97, 255, 0.5)' 
    : 'rgba(255, 255, 255, 0.1)'
  };
  border-radius: 25px;
  cursor: pointer;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  font-size: 0.95rem;
  white-space: nowrap;
  flex-shrink: 0;
  backdrop-filter: blur(20px);
  font-weight: 500;
  
  &:hover {
    background: ${props => props.$active 
      ? 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)' 
      : 'rgba(255, 255, 255, 0.1)'
    };
    border-color: rgba(123, 97, 255, 0.3);
    /* transform: translateY(-2px); */
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
  }
  
  @media (max-width: 768px) {
    font-size: 0.85rem;
    padding: 0.6rem 1.2rem;
  }
`;

const MenuContent = styled.div`
  padding: 1rem 0;
`;

const MenuSection = styled.div`
  h2 {
    color: #ffffff;
    font-size: 2.2rem;
    margin-bottom: 2rem;
    text-align: center;
    font-weight: 700;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    
    @media (max-width: 768px) {
      font-size: 1.8rem;
      margin-bottom: 1.5rem;
    }
  }
`;

const MenuGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
  gap: 2rem;
  
  @media (max-width: 768px) {
    grid-template-columns: 1fr;
    gap: 1.5rem;
  }
`;

const MenuItemCard = styled.div`
  background: rgba(255, 255, 255, 0.05);
  backdrop-filter: blur(20px);
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 20px;
  overflow: hidden;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  animation: ${slideIn} 0.8s ease-out both;
  
  &:nth-child(1) { animation-delay: 0.1s; }
  &:nth-child(2) { animation-delay: 0.2s; }
  &:nth-child(3) { animation-delay: 0.3s; }
  &:nth-child(4) { animation-delay: 0.4s; }
  &:nth-child(5) { animation-delay: 0.5s; }
  &:nth-child(6) { animation-delay: 0.6s; }
  
  &:hover {
    /* transform: translateY(-8px); */
    background: rgba(255, 255, 255, 0.08);
    border-color: rgba(123, 97, 255, 0.3);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
  }
`;

const MenuImage = styled.img`
  width: 100%;
  height: 220px;
  object-fit: cover;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  image-rendering: -webkit-optimize-contrast;
  image-rendering: crisp-edges;
  backface-visibility: hidden;
  transform: translateZ(0);
  transition: all 0.3s ease;
  border-radius: 20px 20px 0 0;
  
  ${MenuItemCard}:hover & {
    transform: scale(1.05);
  }
  
  /* Fallback –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ src */
  &:not([src]), &[src=""], &[src*="undefined"], &[src*="null"] {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 3rem;
    content: "üçΩÔ∏è";
  }
`;

const MenuItemContent = styled.div`
  padding: 1.5rem;
`;

const MenuItemTitle = styled.h3`
  color: #ffffff;
  font-size: 1.3rem;
  margin-bottom: 0.8rem;
  font-weight: 600;
  line-height: 1.3;
`;

const MenuItemDescription = styled.p`
  color: #cbd5e1;
  font-size: 0.95rem;
  line-height: 1.6;
  margin-bottom: 1rem;
  opacity: 0.9;
`;

const MenuItemPrice = styled.div`
  color: #10b981;
  font-size: 1.4rem;
  font-weight: 700;
  text-align: right;
  margin-top: 1rem;
  background: linear-gradient(135deg, #10b981 0%, #059669 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
`;

const EmptyState = styled.div`
  text-align: center;
  padding: 4rem 2rem;
  color: #94a3b8;
  
  h3 {
    font-size: 1.5rem;
    margin-bottom: 1rem;
    color: #e2e8f0;
  }
  
  p {
    font-size: 1rem;
    line-height: 1.6;
  }
`;

const LoadingState = styled.div`
  text-align: center;
  padding: 4rem 2rem;
  color: #94a3b8;
  
  .spinner {
    width: 40px;
    height: 40px;
    border: 3px solid rgba(123, 97, 255, 0.3);
    border-top: 3px solid #667eea;
    border-radius: 50%;
    animation: ${pulse} 1s linear infinite;
    margin: 0 auto 1rem;
  }
`;



const ErrorState = styled.div`
  background: rgba(239, 68, 68, 0.1);
  border: 1px solid rgba(239, 68, 68, 0.3);
  border-radius: 12px;
  padding: 1.5rem;
  margin-bottom: 2rem;
  text-align: center;
  
  p {
    color: #ef4444;
    margin-bottom: 1rem;
    font-size: 1.1rem;
  }
  
  button {
    background: #ef4444;
    color: white;
    border: none;
    border-radius: 8px;
    padding: 0.75rem 1.5rem;
    cursor: pointer;
    font-weight: 600;
    transition: all 0.2s ease;
    
    &:hover {
      background: #dc2626;
      transform: translateY(-2px);
    }
  }
`;



const MenuPage: React.FC = () => {
  // –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ API
  const mockMenuTypes: MenuType[] = [
    { id: 1, name: '–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', slug: 'main-menu', description: '–û—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞', sortOrder: 1, isActive: true, createdAt: '2024-01-01T00:00:00Z', updatedAt: '2024-01-01T00:00:00Z' },
    { id: 2, name: '–ë–∞—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞', slug: 'bar-menu', description: '–ù–∞–ø–∏—Ç–∫–∏ –∏ –∫–æ–∫—Ç–µ–π–ª–∏', sortOrder: 2, isActive: true, createdAt: '2024-01-01T00:00:00Z', updatedAt: '2024-01-01T00:00:00Z' },
    { id: 3, name: '–î–µ—Å–µ—Ä—Ç—ã', slug: 'desserts', description: '–°–ª–∞–¥–∫–∏–µ –±–ª—é–¥–∞', sortOrder: 3, isActive: true, createdAt: '2024-01-01T00:00:00Z', updatedAt: '2024-01-01T00:00:00Z' },
    { id: 4, name: '–ó–∞–∫—É—Å–∫–∏', slug: 'snacks', description: '–õ–µ–≥–∫–∏–µ –∑–∞–∫—É—Å–∫–∏', sortOrder: 4, isActive: true, createdAt: '2024-01-01T00:00:00Z', updatedAt: '2024-01-01T00:00:00Z' }
  ]

  const mockCategories: MenuCategory[] = [
    { id: 1, name: '–ì–æ—Ä—è—á–∏–µ –±–ª—é–¥–∞', slug: 'hot-dishes', description: '–û—Å–Ω–æ–≤–Ω—ã–µ –≥–æ—Ä—è—á–∏–µ –±–ª—é–¥–∞', menuTypeId: 1, sortOrder: 1, isActive: true, createdAt: '2024-01-01T00:00:00Z', updatedAt: '2024-01-01T00:00:00Z' },
    { id: 2, name: '–°–∞–ª–∞—Ç—ã', slug: 'salads', description: '–°–≤–µ–∂–∏–µ —Å–∞–ª–∞—Ç—ã', menuTypeId: 1, sortOrder: 2, isActive: true, createdAt: '2024-01-01T00:00:00Z', updatedAt: '2024-01-01T00:00:00Z' },
    { id: 3, name: '–°—É–ø—ã', slug: 'soups', description: '–ì–æ—Ä—è—á–∏–µ —Å—É–ø—ã', menuTypeId: 1, sortOrder: 3, isActive: true, createdAt: '2024-01-01T00:00:00Z', updatedAt: '2024-01-01T00:00:00Z' },
    { id: 4, name: '–ö–æ–∫—Ç–µ–π–ª–∏', slug: 'cocktails', description: '–ê–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ –∫–æ–∫—Ç–µ–π–ª–∏', menuTypeId: 2, sortOrder: 1, isActive: true, createdAt: '2024-01-01T00:00:00Z', updatedAt: '2024-01-01T00:00:00Z' },
    { id: 5, name: '–í–∏–Ω–æ', slug: 'wine', description: '–í–∏–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞', menuTypeId: 2, sortOrder: 2, isActive: true, createdAt: '2024-01-01T00:00:00Z', updatedAt: '2024-01-01T00:00:00Z' },
    { id: 6, name: '–ü–∏–≤–æ', slug: 'beer', description: '–ü–∏–≤–æ –∏ –∫—Ä–∞—Ñ—Ç', menuTypeId: 2, sortOrder: 3, isActive: true, createdAt: '2024-01-01T00:00:00Z', updatedAt: '2024-01-01T00:00:00Z' },
    { id: 7, name: '–¢–æ—Ä—Ç—ã', slug: 'cakes', description: '–î–æ–º–∞—à–Ω–∏–µ —Ç–æ—Ä—Ç—ã', menuTypeId: 3, sortOrder: 1, isActive: true, createdAt: '2024-01-01T00:00:00Z', updatedAt: '2024-01-01T00:00:00Z' },
    { id: 8, name: '–ú–æ—Ä–æ–∂–µ–Ω–æ–µ', slug: 'ice-cream', description: '–ú–æ—Ä–æ–∂–µ–Ω–æ–µ –∏ —Å–æ—Ä–±–µ—Ç—ã', menuTypeId: 3, sortOrder: 2, isActive: true, createdAt: '2024-01-01T00:00:00Z', updatedAt: '2024-01-01T00:00:00Z' },
    { id: 9, name: '–•–æ–ª–æ–¥–Ω—ã–µ –∑–∞–∫—É—Å–∫–∏', slug: 'cold-snacks', description: '–•–æ–ª–æ–¥–Ω—ã–µ –∑–∞–∫—É—Å–∫–∏', menuTypeId: 4, sortOrder: 1, isActive: true, createdAt: '2024-01-01T00:00:00Z', updatedAt: '2024-01-01T00:00:00Z' },
    { id: 10, name: '–ì–æ—Ä—è—á–∏–µ –∑–∞–∫—É—Å–∫–∏', slug: 'hot-snacks', description: '–ì–æ—Ä—è—á–∏–µ –∑–∞–∫—É—Å–∫–∏', menuTypeId: 4, sortOrder: 2, isActive: true, createdAt: '2024-01-01T00:00:00Z', updatedAt: '2024-01-01T00:00:00Z' }
  ]

  const mockMenuItems: MenuItem[] = [
    // –ì–æ—Ä—è—á–∏–µ –±–ª—é–¥–∞
    { id: 1, name: '–°—Ç–µ–π–∫ –†–∏–±–∞–π', description: '–°–æ—á–Ω—ã–π —Å—Ç–µ–π–∫ –∏–∑ –º—Ä–∞–º–æ—Ä–Ω–æ–π –≥–æ–≤—è–¥–∏–Ω—ã', price: 1200, currency: 'RUB', categoryId: 1, allergens: [], weight: '300–≥', calories: 450, preparation: '–°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–∂–∞—Ä–∫–∞', isPopular: true, isActive: true, sortOrder: 1, imageUrl: '/images/default-food.svg', createdAt: '2024-01-01T00:00:00Z', updatedAt: '2024-01-01T00:00:00Z' },
    { id: 2, name: '–õ–æ—Å–æ—Å—å –Ω–∞ –≥—Ä–∏–ª–µ', description: '–§–∏–ª–µ –ª–æ—Å–æ—Å—è —Å –æ–≤–æ—â–∞–º–∏', price: 800, currency: 'RUB', categoryId: 1, allergens: ['—Ä—ã–±–∞'], weight: '250–≥', calories: 320, preparation: '–ù–∞ –≥—Ä–∏–ª–µ', isPopular: false, isActive: true, sortOrder: 2, imageUrl: '/images/default-food.svg', createdAt: '2024-01-01T00:00:00Z', updatedAt: '2024-01-01T00:00:00Z' },
    { id: 3, name: '–ü–∞—Å—Ç–∞ –ö–∞—Ä–±–æ–Ω–∞—Ä–∞', description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∏—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –ø–∞—Å—Ç–∞', price: 450, currency: 'RUB', categoryId: 1, allergens: ['–≥–ª—é—Ç–µ–Ω', '–º–æ–ª–æ—á–Ω—ã–µ'], weight: '350–≥', calories: 520, preparation: '–ê–ª—å –¥–µ–Ω—Ç–µ', isPopular: true, isActive: true, sortOrder: 3, imageUrl: '/images/default-food.svg', createdAt: '2024-01-01T00:00:00Z', updatedAt: '2024-01-01T00:00:00Z' },
    
    // –°–∞–ª–∞—Ç—ã
    { id: 4, name: '–¶–µ–∑–∞—Ä—å', description: '–°–∞–ª–∞—Ç —Å –∫—É—Ä–∏—Ü–µ–π –∏ –ø–∞—Ä–º–µ–∑–∞–Ω–æ–º', price: 350, currency: 'RUB', categoryId: 2, allergens: ['–≥–ª—é—Ç–µ–Ω', '–º–æ–ª–æ—á–Ω—ã–µ'], weight: '200–≥', calories: 280, preparation: '–°–≤–µ–∂–∏–π', isPopular: true, isActive: true, sortOrder: 1, imageUrl: '/images/default-food.svg', createdAt: '2024-01-01T00:00:00Z', updatedAt: '2024-01-01T00:00:00Z' },
    { id: 5, name: '–ì—Ä–µ—á–µ—Å–∫–∏–π', description: '–°–∞–ª–∞—Ç —Å —Ñ–µ—Ç–æ–π –∏ –æ–ª–∏–≤–∫–∞–º–∏', price: 280, currency: 'RUB', categoryId: 2, allergens: ['–º–æ–ª–æ—á–Ω—ã–µ'], weight: '180–≥', calories: 220, preparation: '–°–≤–µ–∂–∏–π', isPopular: false, isActive: true, sortOrder: 2, imageUrl: '/images/default-food.svg', createdAt: '2024-01-01T00:00:00Z', updatedAt: '2024-01-01T00:00:00Z' },
    
    // –°—É–ø—ã
    { id: 6, name: '–ë–æ—Ä—â', description: '–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π –±–æ—Ä—â', price: 250, currency: 'RUB', categoryId: 3, allergens: [], weight: '400–≥', calories: 180, preparation: '–ì–æ—Ä—è—á–∏–π', isPopular: true, isActive: true, sortOrder: 1, imageUrl: '/images/default-food.svg', createdAt: '2024-01-01T00:00:00Z', updatedAt: '2024-01-01T00:00:00Z' },
    { id: 7, name: '–°—É–ø-–ø—é—Ä–µ', description: '–°—É–ø-–ø—é—Ä–µ –∏–∑ –≥—Ä–∏–±–æ–≤', price: 200, currency: 'RUB', categoryId: 3, allergens: ['–≥–ª—é—Ç–µ–Ω', '–º–æ–ª–æ—á–Ω—ã–µ'], weight: '350–≥', calories: 150, preparation: '–ì–æ—Ä—è—á–∏–π', isPopular: false, isActive: true, sortOrder: 2, imageUrl: '/images/default-food.svg', createdAt: '2024-01-01T00:00:00Z', updatedAt: '2024-01-01T00:00:00Z' },
    
    // –ö–æ–∫—Ç–µ–π–ª–∏
    { id: 8, name: '–ú–æ—Ö–∏—Ç–æ', description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∫–æ–∫—Ç–µ–π–ª—å —Å –º—è—Ç–æ–π', price: 350, currency: 'RUB', categoryId: 4, allergens: [], weight: '300–º–ª', calories: 120, preparation: '–°–æ –ª—å–¥–æ–º', isPopular: true, isActive: true, sortOrder: 1, imageUrl: '/images/default-food.svg', createdAt: '2024-01-01T00:00:00Z', updatedAt: '2024-01-01T00:00:00Z' },
    { id: 9, name: '–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞', description: '–ö–æ–∫—Ç–µ–π–ª—å —Å —Ç–µ–∫–∏–ª–æ–π –∏ –ª–∞–π–º–æ–º', price: 400, currency: 'RUB', categoryId: 4, allergens: [], weight: '200–º–ª', calories: 180, preparation: '–°–æ –ª—å–¥–æ–º', isPopular: true, isActive: true, sortOrder: 2, imageUrl: '/images/default-food.svg', createdAt: '2024-01-01T00:00:00Z', updatedAt: '2024-01-01T00:00:00Z' },
    { id: 10, name: '–ü–∏–Ω–∞ –ö–æ–ª–∞–¥–∞', description: '–¢—Ä–æ–ø–∏—á–µ—Å–∫–∏–π –∫–æ–∫—Ç–µ–π–ª—å', price: 380, currency: 'RUB', categoryId: 4, allergens: ['–º–æ–ª–æ—á–Ω—ã–µ'], weight: '250–º–ª', calories: 250, preparation: '–°–æ –ª—å–¥–æ–º', isPopular: false, isActive: true, sortOrder: 3, imageUrl: '/images/default-food.svg', createdAt: '2024-01-01T00:00:00Z', updatedAt: '2024-01-01T00:00:00Z' },
    
    // –í–∏–Ω–æ
    { id: 11, name: '–ö—Ä–∞—Å–Ω–æ–µ –≤–∏–Ω–æ', description: '–ë–æ—Ä–¥–æ, –§—Ä–∞–Ω—Ü–∏—è', price: 120, currency: 'RUB', categoryId: 5, allergens: [], weight: '150–º–ª', calories: 85, preparation: '–ö–æ–º–Ω–∞—Ç–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', isPopular: true, isActive: true, sortOrder: 1, imageUrl: '/images/default-food.svg', createdAt: '2024-01-01T00:00:00Z', updatedAt: '2024-01-01T00:00:00Z' },
    { id: 12, name: '–ë–µ–ª–æ–µ –≤–∏–Ω–æ', description: '–®–∞—Ä–¥–æ–Ω–µ, –ò—Ç–∞–ª–∏—è', price: 110, currency: 'RUB', categoryId: 5, allergens: [], weight: '150–º–ª', calories: 80, preparation: '–û—Ö–ª–∞–∂–¥–µ–Ω–Ω–æ–µ', isPopular: false, isActive: true, sortOrder: 2, imageUrl: '/images/default-food.svg', createdAt: '2024-01-01T00:00:00Z', updatedAt: '2024-01-01T00:00:00Z' },
    
    // –ü–∏–≤–æ
    { id: 13, name: '–°–≤–µ—Ç–ª–æ–µ –ø–∏–≤–æ', description: '–ü–∏–≤–æ –º–µ—Å—Ç–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞', price: 150, currency: 'RUB', categoryId: 6, allergens: ['–≥–ª—é—Ç–µ–Ω'], weight: '500–º–ª', calories: 200, preparation: '–û—Ö–ª–∞–∂–¥–µ–Ω–Ω–æ–µ', isPopular: true, isActive: true, sortOrder: 1, imageUrl: '/images/default-food.svg', createdAt: '2024-01-01T00:00:00Z', updatedAt: '2024-01-01T00:00:00Z' },
    { id: 14, name: '–¢–µ–º–Ω–æ–µ –ø–∏–≤–æ', description: '–ü–æ—Ä—Ç–µ—Ä, 0.5–ª', price: 180, currency: 'RUB', categoryId: 6, allergens: ['–≥–ª—é—Ç–µ–Ω'], weight: '500–º–ª', calories: 220, preparation: '–û—Ö–ª–∞–∂–¥–µ–Ω–Ω–æ–µ', isPopular: false, isActive: true, sortOrder: 2, imageUrl: '/images/default-food.svg', createdAt: '2024-01-01T00:00:00Z', updatedAt: '2024-01-01T00:00:00Z' },
    
    // –¢–æ—Ä—Ç—ã
    { id: 15, name: '–¢–∏—Ä–∞–º–∏—Å—É', description: '–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π –¥–µ—Å–µ—Ä—Ç', price: 280, currency: 'RUB', categoryId: 7, allergens: ['–≥–ª—é—Ç–µ–Ω', '–º–æ–ª–æ—á–Ω—ã–µ', '—è–π—Ü–∞'], weight: '150–≥', calories: 380, preparation: '–û—Ö–ª–∞–∂–¥–µ–Ω–Ω—ã–π', isPopular: true, isActive: true, sortOrder: 1, imageUrl: '/images/default-food.svg', createdAt: '2024-01-01T00:00:00Z', updatedAt: '2024-01-01T00:00:00Z' },
    { id: 16, name: '–ß–∏–∑–∫–µ–π–∫', description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —á–∏–∑–∫–µ–π–∫', price: 250, currency: 'RUB', categoryId: 7, allergens: ['–≥–ª—é—Ç–µ–Ω', '–º–æ–ª–æ—á–Ω—ã–µ', '—è–π—Ü–∞'], weight: '120–≥', calories: 320, preparation: '–û—Ö–ª–∞–∂–¥–µ–Ω–Ω—ã–π', isPopular: true, isActive: true, sortOrder: 2, imageUrl: '/images/default-food.svg', createdAt: '2024-01-01T00:00:00Z', updatedAt: '2024-01-01T00:00:00Z' },
    
    // –ú–æ—Ä–æ–∂–µ–Ω–æ–µ
    { id: 17, name: '–í–∞–Ω–∏–ª—å–Ω–æ–µ –º–æ—Ä–æ–∂–µ–Ω–æ–µ', description: '–î–æ–º–∞—à–Ω–µ–µ –º–æ—Ä–æ–∂–µ–Ω–æ–µ', price: 120, currency: 'RUB', categoryId: 8, allergens: ['–º–æ–ª–æ—á–Ω—ã–µ'], weight: '100–≥', calories: 180, preparation: '–ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–æ–µ', isPopular: false, isActive: true, sortOrder: 1, imageUrl: '/images/default-food.svg', createdAt: '2024-01-01T00:00:00Z', updatedAt: '2024-01-01T00:00:00Z' },
    { id: 18, name: '–®–æ–∫–æ–ª–∞–¥–Ω–æ–µ –º–æ—Ä–æ–∂–µ–Ω–æ–µ', description: '–ú–æ—Ä–æ–∂–µ–Ω–æ–µ —Å —à–æ–∫–æ–ª–∞–¥–æ–º', price: 140, currency: 'RUB', categoryId: 8, allergens: ['–º–æ–ª–æ—á–Ω—ã–µ'], weight: '100–≥', calories: 220, preparation: '–ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–æ–µ', isPopular: true, isActive: true, sortOrder: 2, imageUrl: '/images/default-food.svg', createdAt: '2024-01-01T00:00:00Z', updatedAt: '2024-01-01T00:00:00Z' },
    
    // –•–æ–ª–æ–¥–Ω—ã–µ –∑–∞–∫—É—Å–∫–∏
    { id: 19, name: '–ö–∞—Ä–ø–∞—á—á–æ', description: '–¢–æ–Ω–∫–æ –Ω–∞—Ä–µ–∑–∞–Ω–Ω–∞—è –≥–æ–≤—è–¥–∏–Ω–∞', price: 450, currency: 'RUB', categoryId: 9, allergens: [], weight: '120–≥', calories: 180, preparation: '–•–æ–ª–æ–¥–Ω–æ–µ', isPopular: true, isActive: true, sortOrder: 1, imageUrl: '/images/default-food.svg', createdAt: '2024-01-01T00:00:00Z', updatedAt: '2024-01-01T00:00:00Z' },
    { id: 20, name: '–ë—Ä—É—Å–∫–µ—Ç—Ç–∞', description: '–¢–æ—Å—Ç—ã —Å —Ç–æ–º–∞—Ç–∞–º–∏', price: 180, currency: 'RUB', categoryId: 9, allergens: ['–≥–ª—é—Ç–µ–Ω'], weight: '100–≥', calories: 120, preparation: '–°–≤–µ–∂–∞—è', isPopular: false, isActive: true, sortOrder: 2, imageUrl: '/images/default-food.svg', createdAt: '2024-01-01T00:00:00Z', updatedAt: '2024-01-01T00:00:00Z' },
    
    // –ì–æ—Ä—è—á–∏–µ –∑–∞–∫—É—Å–∫–∏
    { id: 21, name: '–ö–∞–ª—å–º–∞—Ä—ã –≤ –∫–ª—è—Ä–µ', description: '–ñ–∞—Ä–µ–Ω—ã–µ –∫–∞–ª—å–º–∞—Ä—ã', price: 320, currency: 'RUB', categoryId: 10, allergens: ['–≥–ª—é—Ç–µ–Ω', '–º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã'], weight: '150–≥', calories: 280, preparation: '–ì–æ—Ä—è—á–∏–µ', isPopular: true, isActive: true, sortOrder: 1, imageUrl: '/images/default-food.svg', createdAt: '2024-01-01T00:00:00Z', updatedAt: '2024-01-01T00:00:00Z' },
    { id: 22, name: '–ö—Ä—ã–ª—ã—à–∫–∏ –ë—É—Ñ—Ñ–∞–ª–æ', description: '–û—Å—Ç—Ä—ã–µ –∫—É—Ä–∏–Ω—ã–µ –∫—Ä—ã–ª—ã—à–∫–∏', price: 280, currency: 'RUB', categoryId: 10, allergens: [], weight: '200–≥', calories: 350, preparation: '–ì–æ—Ä—è—á–∏–µ', isPopular: true, isActive: true, sortOrder: 2, imageUrl: '/images/default-food.svg', createdAt: '2024-01-01T00:00:00Z', updatedAt: '2024-01-01T00:00:00Z' }
  ]

  const [menuTypes, setMenuTypes] = useState<MenuType[]>([])
  const [categories, setCategories] = useState<MenuCategory[]>([])
  const [menuItems, setMenuItems] = useState<MenuItem[]>([])
  const [selectedType, setSelectedType] = useState<number | null>(null)
  const [selectedCategory, setSelectedCategory] = useState<number | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω—é –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    const loadMenuData = async () => {
      try {
        setLoading(true)
        setError(null)
        
        console.log('üìã –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ–Ω—é –∏–∑ API...')
        const [types, categoriesData, items] = await Promise.all([
          menuApi.getMenuTypes(),
          menuApi.getMenuCategories(),
          menuApi.getMenuItems()
        ])
        
        console.log('‚úÖ –ú–µ–Ω—é –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', {
          types: types.length,
          categories: categoriesData.length,
          items: items.length
        })
        
        setMenuTypes(types)
        setCategories(categoriesData)
        setMenuItems(items)
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç–∏–ø –º–µ–Ω—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if (types.length > 0 && !selectedType) {
          setSelectedType(types[0].id)
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é:', error)
        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ.')
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        setMenuTypes(mockMenuTypes)
        setCategories(mockCategories)
        setMenuItems(mockMenuItems)
        setSelectedType(1)
      } finally {
        setLoading(false)
      }
    }
    
    loadMenuData()
  }, [])

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –±–ª—é–¥ —Ç–æ–ª—å–∫–æ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const filteredItems = useMemo(() => {
    return menuItems
      .filter(item => selectedCategory ? item.categoryId === selectedCategory : true)
      .sort((a, b) => a.sortOrder - b.sortOrder)
  }, [menuItems, selectedCategory])

  return (
    <MenuPageContainer>
      <PageContainer>
        <PageTitle>–ú–µ–Ω—é –∫–ª—É–±–∞</PageTitle>
        <PageSubtitle>
          –û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –∏–∑—ã—Å–∫–∞–Ω–Ω—ã–µ –±–ª—é–¥–∞ –∏ –Ω–∞–ø–∏—Ç–∫–∏ –≤ –∞—Ç–º–æ—Å—Ñ–µ—Ä–µ –∫–ª—É–±–∞ Frantsuz
        </PageSubtitle>
        
        {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ */}
        {error && (
          <ErrorState>
            <p>{error}</p>
            <button onClick={() => window.location.reload()}>
              –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
            </button>
          </ErrorState>
        )}
        

        
        <MenuLayout>
          <LeftPanel>
            <PanelTitle>–¢–∏–ø—ã –º–µ–Ω—é</PanelTitle>
            {menuTypes.map((type) => (
              <MenuTypeButton
                key={type.id}
                $active={selectedType === type.id}
                onClick={() => {
                  setSelectedType(type.id)
                  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞
                  const typeCategories = categories.filter(cat => cat.menuTypeId === type.id)
                  if (typeCategories.length > 0) {
                    setSelectedCategory(typeCategories[0].id)
                  }
                }}
              >
                {type.name}
              </MenuTypeButton>
            ))}
          </LeftPanel>

          <RightPanel>
            <CategoriesContainer>
              <CategoriesScroll>
                {categories
                  .filter(category => category.menuTypeId === selectedType)
                  .map((category) => (
                    <CategoryButton
                      key={category.id}
                      $active={selectedCategory === category.id}
                      onClick={() => setSelectedCategory(category.id)}
                    >
                      {category.name}
                    </CategoryButton>
                  ))}
              </CategoriesScroll>
            </CategoriesContainer>

            <MenuContent>
              {filteredItems.length > 0 ? (
                <MenuSection>
                  <h2>
                    {categories.find(c => c.id === selectedCategory)?.name}
                    <span style={{ fontSize: '0.9em', color: '#94a3b8', marginLeft: '1rem' }}>
                      ({filteredItems.length} –±–ª—é–¥)
                    </span>
                  </h2>
                  <MenuGrid>
                    {filteredItems.map((item, index) => {
                      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ç–æ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –º–æ–∫–æ–≤—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
                      const imageSrc = (item.imageUrl && item.imageUrl.trim() !== '') 
                        ? item.imageUrl 
                        : '/images/default-food.svg'
                      
                      return (
                        <MenuItemCard key={item.id} style={{ animationDelay: `${index * 0.1}s` }}>
                          <MenuImage 
                            src={imageSrc} 
                            alt={item.name}
                            onError={(e) => {
                              const target = e.target as HTMLImageElement;
                              target.src = '/images/default-food.svg';
                            }}
                          />
                          <MenuItemContent>
                            <MenuItemTitle>{item.name}</MenuItemTitle>
                            {item.description && (
                              <MenuItemDescription>{item.description}</MenuItemDescription>
                            )}
                            <MenuItemPrice>{item.price} ‚ÇΩ</MenuItemPrice>
                          </MenuItemContent>
                        </MenuItemCard>
                      );
                    })}
                  </MenuGrid>
                </MenuSection>
              ) : (
                <EmptyState>
                  <h3>–ë–ª—é–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                  <p>–í –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –±–ª—é–¥</p>
                </EmptyState>
              )}
            </MenuContent>
          </RightPanel>
        </MenuLayout>
      </PageContainer>
    </MenuPageContainer>
  )
}

export default MenuPage