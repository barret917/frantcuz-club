import React, { useState, useEffect } from 'react'
import styled from 'styled-components'
import { Event } from '@/shared/api/events'
import { eventZonesApi, EventZone, CreateEventZoneData } from '@/shared/api/event-zones'
import { eventTablesApi, EventTable, CreateEventTableData } from '@/shared/api/event-tables'
import { Button, Modal, ModalContent, ModalHeader, ModalTitle, CloseButton, Form, FormGroup, Label, Input, TextArea, Container, LoadingSpinner, EmptyState, EmptyStateIcon, EmptyStateTitle, EmptyStateText } from '@/components/common'
import { useCrudOperations, useForm } from '@/hooks'
import { EventZoneCanvas } from './EventZoneCanvas'

const Header = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
  padding-bottom: 1rem;
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
`

// –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –∫–∞–Ω–≤–∞—Å
const NonBlockingModal = styled.div<{ $isOpen: boolean }>`
  display: ${props => props.$isOpen ? 'flex' : 'none'};
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.3); // –ë–æ–ª–µ–µ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
  z-index: 1000;
  align-items: flex-start;
  justify-content: center;
  padding: 2rem;
  pointer-events: none; // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –∫–ª–∏–∫–∏
  
  & > * {
    pointer-events: auto; // –ö–æ–Ω—Ç–µ–Ω—Ç –º–æ–¥–∞–ª–∫–∏ –∫–ª–∏–∫–∞–±–µ–ª–µ–Ω
  }
`

const Title = styled.h2`
  color: #ffffff;
  font-size: 1.8rem;
  font-weight: 700;
  margin: 0;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
`

const EventInfo = styled.div`
  background: rgba(255, 255, 255, 0.05);
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 12px;
  padding: 1.5rem;
  margin-bottom: 2rem;
`

const EventTitle = styled.h3`
  color: #ffffff;
  font-size: 1.3rem;
  font-weight: 600;
  margin: 0 0 0.5rem 0;
`

const EventDetails = styled.div`
  color: #a0a0a0;
  font-size: 0.9rem;
  line-height: 1.5;
`

const ZonesGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));
  gap: 1.5rem;
  margin-bottom: 2rem;
`

const ZoneCard = styled.div`
  background: rgba(255, 255, 255, 0.05);
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 12px;
  padding: 1.5rem;
  transition: all 0.3s ease;
  
  &:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.3);
    border-color: rgba(102, 126, 234, 0.5);
  }
`

const ZoneTitle = styled.h4`
  color: #ffffff;
  font-size: 1.1rem;
  font-weight: 600;
  margin: 0 0 0.5rem 0;
`

const ZoneInfo = styled.div`
  color: #a0a0a0;
  font-size: 0.9rem;
  margin-bottom: 1rem;
  line-height: 1.5;
`

const ZoneActions = styled.div`
  display: flex;
  flex-wrap: wrap;
  gap: 0.5rem;
  margin-top: 1rem;
  
  @media (max-width: 768px) {
    flex-direction: column;
  }
`

// EventZone interface is now imported from API

interface EventZonesManagementProps {
  event: Event
  onBack: () => void
  onManageTables?: (zoneId: number, zoneName: string) => void
}

export const EventZonesManagement: React.FC<EventZonesManagementProps> = ({ event, onBack, onManageTables }) => {
  const [isModalOpen, setIsModalOpen] = useState(false)
  const [editingZone, setEditingZone] = useState<EventZone | null>(null)
  const [selectedZoneId, setSelectedZoneId] = useState<number | undefined>(undefined)
  const [viewMode, setViewMode] = useState<'list' | 'canvas'>('canvas')
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å—Ç–æ–ª–æ–≤
  const [zoneTables, setZoneTables] = useState<{ [zoneId: number]: EventTable[] }>({})
  const [selectedTableId, setSelectedTableId] = useState<number | undefined>(undefined)
  const [isEditModeZones, setIsEditModeZones] = useState(false) // –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–æ–Ω
  const [isEditModeTables, setIsEditModeTables] = useState(false) // –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–æ–≤
  const [isSaving, setIsSaving] = useState(false) // –°—Ç–∞—Ç—É—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  const [lastSaved, setLastSaved] = useState<string | null>(null) // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  
  console.log('ü™ë EventZonesManagement: render, isEditModeZones:', isEditModeZones, 'isEditModeTables:', isEditModeTables, 'viewMode:', viewMode)
  const [isTableModalOpen, setIsTableModalOpen] = useState(false)
  const [editingTable, setEditingTable] = useState<EventTable | null>(null)

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π —Ö—É–∫ –¥–ª—è CRUD –æ–ø–µ—Ä–∞—Ü–∏–π
  const crudOperations = useCrudOperations<EventZone>({
    onCreate: async (data) => {
      const response = await eventZonesApi.createEventZone(event.id, data)
      if (!response.success) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–æ–Ω—ã')
      return response.data
    },
    onUpdate: async (id, data) => {
      const response = await eventZonesApi.updateEventZone(event.id, id, data)
      if (!response.success) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–æ–Ω—ã')
      return response.data
    },
    onDelete: async (id) => {
      const response = await eventZonesApi.deleteEventZone(event.id, id)
      if (!response.success) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–æ–Ω—ã')
    },
    onFetch: async () => {
      const response = await eventZonesApi.getEventZones(event.id)
      if (!response.success) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–æ–Ω')
      return response.data
    },
    onSuccess: (operation) => {
      if (operation === 'create' || operation === 'update' || operation === 'delete') {
        setIsModalOpen(false)
      }
    },
    onError: (operation, error) => {
      alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ ${operation === 'create' ? '—Å–æ–∑–¥–∞–Ω–∏–∏' : operation === 'update' ? '–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏' : '—É–¥–∞–ª–µ–Ω–∏–∏'} –∑–æ–Ω—ã: ${error}`)
    }
  })

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π —Ö—É–∫ –¥–ª—è —Ñ–æ—Ä–º—ã
  const form = useForm({
    initialValues: {
      name: '',
      description: '',
      price: 0,
      maxSeats: 10,
      isActive: true,
      sortOrder: 1
    },
    validate: (values) => {
      const errors: Partial<Record<keyof typeof values, string>> = {}
      if (!values.name.trim()) errors.name = '–ù–∞–∑–≤–∞–Ω–∏–µ –∑–æ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
      if (values.price <= 0) errors.price = '–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0'
      if (values.maxSeats <= 0) errors.maxSeats = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0'
      return errors
    },
    onSubmit: async (values) => {
      if (editingZone) {
        await crudOperations.update(editingZone.id, values)
      } else {
        await crudOperations.create({ ...values, eventId: event.id, x: 0, y: 0, width: 200, height: 150 })
      }
    }
  })

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–æ–Ω—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ event.id
  useEffect(() => {
    crudOperations.refresh()
  }, [event.id])

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–æ–ª—ã –¥–ª—è –≤—Å–µ—Ö –∑–æ–Ω
  useEffect(() => {
    const loadTables = async () => {
      const tablesData: { [zoneId: number]: EventTable[] } = {}
      for (const zone of crudOperations.items) {
        try {
          const response = await eventTablesApi.getTablesByZone(zone.id)
          if (response.success) {
            tablesData[zone.id] = response.data
          }
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–æ–ª–æ–≤ –¥–ª—è –∑–æ–Ω—ã ${zone.id}:`, error)
        }
      }
      setZoneTables(tablesData)
    }
    
    if (crudOperations.items.length > 0) {
      loadTables()
    }
  }, [crudOperations.items])

  const handleCreateZone = () => {
    setEditingZone(null)
    form.actions.reset()
    form.actions.setValue('sortOrder', crudOperations.items.length + 1)
    setIsModalOpen(true)
  }

  const handleEditZone = (zone: EventZone) => {
    setEditingZone(zone)
    form.actions.setValue('name', zone.name)
    form.actions.setValue('description', zone.description)
    form.actions.setValue('price', zone.price)
    form.actions.setValue('maxSeats', zone.maxSeats)
    form.actions.setValue('isActive', zone.isActive)
    form.actions.setValue('sortOrder', zone.sortOrder)
    setIsEditModeZones(true) // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–æ–Ω
    setIsEditModeTables(false) // –û—Ç–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–æ–≤
    setIsModalOpen(true)
  }

  const handleToggleZonesEdit = () => {
    setIsEditModeZones(!isEditModeZones)
    if (!isEditModeZones) {
      setIsEditModeTables(false) // –û—Ç–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–æ–≤
    }
  }

  const handleToggleTablesEdit = () => {
    setIsEditModeTables(!isEditModeTables)
    if (!isEditModeTables) {
      setIsEditModeZones(false) // –û—Ç–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–æ–Ω
    }
  }

  const handleSaveChanges = async () => {
    try {
      setIsSaving(true)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–æ–Ω–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏)
      // –ó–¥–µ—Å—å –º—ã –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–æ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      await crudOperations.refresh()
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–ª—ã –¥–ª—è –≤—Å–µ—Ö –∑–æ–Ω
      for (const zone of crudOperations.items) {
        try {
          const response = await eventTablesApi.getTablesByZone(zone.id)
          if (response.success) {
            setZoneTables(prev => ({
              ...prev,
              [zone.id]: response.data
            }))
          }
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–æ–ª–æ–≤ –¥–ª—è –∑–æ–Ω—ã ${zone.id}:`, error)
        }
      }
      
      // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ —Ä–µ–∂–∏–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      setIsEditModeZones(false)
      setIsEditModeTables(false)
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      setLastSaved(new Date().toLocaleTimeString('ru-RU'))
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      setTimeout(() => {
        setIsSaving(false)
      }, 500)
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π:', error)
      setIsSaving(false)
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π')
    }
  }

  const handleDeleteZone = async (zoneId: number) => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–æ–Ω—É?')) {
      await crudOperations.delete(zoneId)
    }
  }

  const handleManageTables = (zoneId: number) => {
    // –ù–∞—Ö–æ–¥–∏–º –∑–æ–Ω—É –ø–æ ID
    const zone = crudOperations.items.find(z => z.id === zoneId)
    if (zone) {
      if (onManageTables) {
        // –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å—Ç–æ–ª–∞–º–∏
        onManageTables(zoneId, zone.name)
      } else {
        // Fallback: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–æ–Ω–µ
        console.log('–ü–µ—Ä–µ—Ö–æ–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å—Ç–æ–ª–∞–º–∏ –¥–ª—è –∑–æ–Ω—ã:', zone.name)
        alert(`–ü–µ—Ä–µ—Ö–æ–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å—Ç–æ–ª–∞–º–∏ –¥–ª—è –∑–æ–Ω—ã: ${zone.name}\nID: ${zoneId}`)
      }
    }
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    await form.actions.submit()
  }

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target
    
    if (type === 'checkbox') {
      const checked = (e.target as HTMLInputElement).checked
      form.actions.setFieldValue(name as keyof typeof form.values, checked)
    } else if (type === 'number') {
      form.actions.setFieldValue(name as keyof typeof form.values, Number(value))
    } else {
      form.actions.setFieldValue(name as keyof typeof form.values, value)
    }
  }

  const handleZoneSelect = (zoneId: number) => {
    setSelectedZoneId(zoneId)
  }

  const handleZoneUpdate = async (zoneId: number, updates: Partial<EventZone>) => {
    try {
      await crudOperations.update(zoneId, updates)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–æ–Ω—ã:', error)
    }
  }

  const handleZoneDoubleClick = (zoneId: number) => {
    const zone = crudOperations.items.find(z => z.id === zoneId)
    if (zone) {
      setEditingZone(zone)
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–æ–ª–æ–≤
  const handleTableSelect = (tableId: number) => {
    setSelectedTableId(tableId)
  }

  const handleTableUpdate = async (tableId: number, updates: Partial<EventTable>) => {
    try {
      const response = await eventTablesApi.updateTable(tableId, updates)
      if (response.success) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        setZoneTables(prev => {
          const newTables = { ...prev }
          Object.keys(newTables).forEach(zoneId => {
            const zoneIdNum = parseInt(zoneId)
            const tableIndex = newTables[zoneIdNum].findIndex(t => t.id === tableId)
            if (tableIndex !== -1) {
              newTables[zoneIdNum] = [...newTables[zoneIdNum]]
              newTables[zoneIdNum][tableIndex] = { ...newTables[zoneIdNum][tableIndex], ...updates }
            }
          })
          return newTables
        })
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–ª–∞:', error)
    }
  }

  const handleTableDoubleClick = (tableId: number) => {
    // –ù–∞—Ö–æ–¥–∏–º —Å—Ç–æ–ª –≤–æ –≤—Å–µ—Ö –∑–æ–Ω–∞—Ö
    let foundTable: EventTable | null = null
    Object.values(zoneTables).forEach(tables => {
      const table = tables.find(t => t.id === tableId)
      if (table) foundTable = table
    })
    
    if (foundTable) {
      setEditingTable(foundTable)
      setIsTableModalOpen(true)
    }
  }

  const handleAddTable = (zoneId: number) => {
    console.log('ü™ë Frontend: handleAddTable –≤—ã–∑–≤–∞–Ω –¥–ª—è –∑–æ–Ω—ã:', zoneId)
    setEditingTable(null)
    setIsTableModalOpen(true)
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º zoneId –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å—Ç–æ–ª–∞
    setSelectedZoneId(zoneId)
    console.log('ü™ë Frontend: –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ, selectedZoneId:', zoneId)
  }

  if (crudOperations.loading) {
    return (
      <Container>
        <LoadingSpinner>–ó–∞–≥—Ä—É–∑–∫–∞ –∑–æ–Ω...</LoadingSpinner>
      </Container>
    )
  }

  return (
    <Container>
      <Header>
        <div>
          <Button onClick={onBack} style={{ marginRight: '1rem' }}>
            ‚Üê –ù–∞–∑–∞–¥ –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º
          </Button>
          <Title>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–æ–Ω–∞–º–∏</Title>
        </div>
        <div style={{ display: 'flex', gap: '1rem', alignItems: 'center' }}>
          <div style={{ display: 'flex', gap: '0.5rem' }}>
            <Button 
              $variant={viewMode === 'canvas' ? 'primary' : 'secondary'}
              onClick={() => setViewMode('canvas')}
            >
              üéØ –ö–∞–Ω–≤–∞—Å
            </Button>
            <Button 
              $variant={viewMode === 'list' ? 'primary' : 'secondary'}
              onClick={() => setViewMode('list')}
            >
              üìã –°–ø–∏—Å–æ–∫
            </Button>
          </div>
          <Button $variant="primary" onClick={handleCreateZone}>
            + –°–æ–∑–¥–∞—Ç—å –∑–æ–Ω—É
          </Button>
        </div>
      </Header>

      <EventInfo>
        <EventTitle>{event.title}</EventTitle>
        <EventDetails>
          <div><strong>–î–∞—Ç–∞:</strong> {new Date(event.date).toLocaleDateString('ru-RU')}</div>
          <div><strong>–í—Ä–µ–º—è:</strong> {event.time}</div>
          <div><strong>–ú–µ—Å—Ç–æ:</strong> {event.location || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</div>
        </EventDetails>
      </EventInfo>

      {viewMode === 'canvas' ? (
        <div>
          <div style={{ marginBottom: '1rem', display: 'flex', gap: '1rem', alignItems: 'center', flexWrap: 'wrap' }}>
            <Button 
              $variant={isEditModeZones ? 'primary' : 'secondary'}
              onClick={handleToggleZonesEdit}
              style={{ flex: '1', minWidth: '180px' }}
              disabled={isSaving}
            >
              {isEditModeZones ? '‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–æ–Ω—ã' : '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–æ–Ω—ã'}
            </Button>
            <Button 
              $variant={isEditModeTables ? 'primary' : 'secondary'}
              onClick={handleToggleTablesEdit}
              style={{ flex: '1', minWidth: '180px' }}
              disabled={isSaving}
            >
              {isEditModeTables ? '‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª—ã' : 'ü™ë –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª—ã'}
            </Button>
            <Button 
              $variant={isEditModeZones || isEditModeTables ? 'success' : 'secondary'}
              onClick={handleSaveChanges}
              style={{ flex: '1', minWidth: '180px' }}
              disabled={!isEditModeZones && !isEditModeTables || isSaving}
            >
              {isSaving ? 'üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : isEditModeZones || isEditModeTables ? 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' : 'üíæ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã'}
            </Button>
            {lastSaved && (
              <span style={{ 
                color: '#4caf50', 
                fontSize: '0.85rem', 
                width: '100%', 
                textAlign: 'center',
                marginTop: '0.5rem',
                fontWeight: 600
              }}>
                ‚úì –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {lastSaved}
              </span>
            )}
            {(isEditModeZones || isEditModeTables) && (
              <span style={{ color: '#a0a0a0', fontSize: '0.9rem', width: '100%', marginTop: '0.5rem' }}>
                {isEditModeZones && 'üí° –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞—Ç—å –∏ –∏–∑–º–µ–Ω—è—Ç—å —Ä–∞–∑–º–µ—Ä –∑–æ–Ω'}
                {isEditModeTables && 'üí° –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞—Ç—å –∏ –¥–æ–±–∞–≤–ª—è—Ç—å —Å—Ç–æ–ª—ã –≤–Ω—É—Ç—Ä–∏ –∑–æ–Ω'}
              </span>
            )}
          </div>
          <EventZoneCanvas
            zones={crudOperations.items}
            selectedZoneId={selectedZoneId}
            onZoneSelect={handleZoneSelect}
            onZoneUpdate={handleZoneUpdate}
            onZoneDoubleClick={handleZoneDoubleClick}
            zoneTables={zoneTables}
            selectedTableId={selectedTableId}
            onTableSelect={handleTableSelect}
            onTableUpdate={handleTableUpdate}
            onTableDoubleClick={handleTableDoubleClick}
            onAddTable={handleAddTable}
            isEditMode={isEditModeZones}
            isTableEditMode={isEditModeTables}
          />
        </div>
      ) : crudOperations.items.length === 0 ? (
        <EmptyState>
          <EmptyStateIcon>üè¢</EmptyStateIcon>
          <EmptyStateTitle>–ó–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</EmptyStateTitle>
          <EmptyStateText>–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∑–æ–Ω—É –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</EmptyStateText>
        </EmptyState>
      ) : (
        <ZonesGrid>
          {crudOperations.items.map((zone) => (
            <ZoneCard key={zone.id}>
              <ZoneTitle>{zone.name}</ZoneTitle>
              <ZoneInfo>
                <div><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> {zone.description}</div>
                <div><strong>–¶–µ–Ω–∞:</strong> {zone.price} ‚ÇΩ</div>
                <div><strong>–ú–∞–∫—Å. –º–µ—Å—Ç:</strong> {zone.maxSeats}</div>
                <div><strong>–°—Ç–∞—Ç—É—Å:</strong> {zone.isActive ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}</div>
                <div><strong>–ü–æ—Ä—è–¥–æ–∫:</strong> {zone.sortOrder}</div>
              </ZoneInfo>
              <ZoneActions>
                <Button 
                  onClick={() => handleEditZone(zone)}
                  style={{ flex: '1', minWidth: '120px' }}
                >
                  ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                </Button>
                <Button 
                  $variant="danger" 
                  onClick={() => handleDeleteZone(zone.id)}
                  style={{ flex: '1', minWidth: '100px' }}
                >
                  üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                </Button>
                <Button 
                  $variant="primary" 
                  onClick={() => handleManageTables(zone.id)}
                  style={{ flex: '1', minWidth: '140px' }}
                >
                  ü™ë –£–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç–æ–ª–∞–º–∏
                </Button>
              </ZoneActions>
            </ZoneCard>
          ))}
        </ZonesGrid>
      )}

      <NonBlockingModal $isOpen={isModalOpen}>
        <ModalContent>
          <ModalHeader>
            <ModalTitle>
              {editingZone ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–æ–Ω—É' : '–°–æ–∑–¥–∞—Ç—å –∑–æ–Ω—É'}
            </ModalTitle>
            <CloseButton onClick={() => setIsModalOpen(false)}>√ó</CloseButton>
          </ModalHeader>
          {editingZone && isEditModeZones && (
            <div style={{ 
              marginBottom: '1rem', 
              padding: '0.75rem', 
              background: 'rgba(33, 150, 243, 0.1)', 
              border: '1px solid rgba(33, 150, 243, 0.3)',
              borderRadius: '8px',
              fontSize: '0.9rem',
              color: '#90caf9'
            }}>
              üí° –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞—Ç—å –∏ –∏–∑–º–µ–Ω—è—Ç—å —Ä–∞–∑–º–µ—Ä –∑–æ–Ω—ã –Ω–∞ –∫–∞–Ω–≤–∞—Å–µ –≤–Ω–∏–∑—É
            </div>
          )}
          
          <Form onSubmit={handleSubmit}>
            <FormGroup>
              <Label>–ù–∞–∑–≤–∞–Ω–∏–µ –∑–æ–Ω—ã *</Label>
              <Input
                type="text"
                name="name"
                value={form.values.name}
                onChange={handleInputChange}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–æ–Ω—ã"
                required
              />
              {form.errors.name && <div style={{ color: '#ff6b6b', fontSize: '0.8rem', marginTop: '0.25rem' }}>{form.errors.name}</div>}
            </FormGroup>

            <FormGroup>
              <Label>–û–ø–∏—Å–∞–Ω–∏–µ</Label>
              <TextArea
                name="description"
                value={form.values.description}
                onChange={handleInputChange}
                placeholder="–û–ø–∏—à–∏—Ç–µ –∑–æ–Ω—É"
              />
            </FormGroup>

            <FormGroup>
              <Label>–¶–µ–Ω–∞ –∑–∞ –º–µ—Å—Ç–æ (‚ÇΩ) *</Label>
              <Input
                type="number"
                name="price"
                value={form.values.price}
                onChange={handleInputChange}
                min="0"
                step="100"
                required
              />
              {form.errors.price && <div style={{ color: '#ff6b6b', fontSize: '0.8rem', marginTop: '0.25rem' }}>{form.errors.price}</div>}
            </FormGroup>

            <FormGroup>
              <Label>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç *</Label>
              <Input
                type="number"
                name="maxSeats"
                value={form.values.maxSeats}
                onChange={handleInputChange}
                min="1"
                max="1000"
                required
              />
              {form.errors.maxSeats && <div style={{ color: '#ff6b6b', fontSize: '0.8rem', marginTop: '0.25rem' }}>{form.errors.maxSeats}</div>}
            </FormGroup>

            <FormGroup>
              <Label>–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏</Label>
              <Input
                type="number"
                name="sortOrder"
                value={form.values.sortOrder}
                onChange={handleInputChange}
                min="1"
              />
            </FormGroup>

            <div style={{ display: 'flex', gap: '1rem', marginTop: '1.5rem' }}>
              <Button type="submit" $variant="primary" disabled={form.isSubmitting}>
                {form.isSubmitting ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : editingZone ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' : '–°–æ–∑–¥–∞—Ç—å –∑–æ–Ω—É'}
              </Button>
              <Button type="button" onClick={() => setIsModalOpen(false)}>
                –û—Ç–º–µ–Ω–∞
              </Button>
            </div>
          </Form>
        </ModalContent>
      </NonBlockingModal>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–æ–≤ */}
      <Modal $isOpen={isTableModalOpen}>
        <ModalContent>
          <ModalHeader>
            <ModalTitle>
              {editingTable ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª' : '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ç–æ–ª'}
            </ModalTitle>
            <CloseButton onClick={() => setIsTableModalOpen(false)}>√ó</CloseButton>
          </ModalHeader>
          
          <Form onSubmit={async (e) => {
            e.preventDefault()
            console.log('ü™ë Frontend: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã —Å—Ç–æ–ª–∞')
            
            if (!selectedZoneId) {
              console.error('ü™ë Frontend: –ù–µ—Ç selectedZoneId')
              return
            }

            const formData = new FormData(e.target as HTMLFormElement)
            const tableData = {
              zoneId: selectedZoneId,
              name: formData.get('name') as string,
              x: 50,
              y: 50,
              width: 80,
              height: 60,
              seats: parseInt(formData.get('seats') as string) || 4
            }

            console.log('ü™ë Frontend: –î–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–∞:', tableData)

            try {
              if (editingTable) {
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å—Ç–æ–ª–∞
                const response = await eventTablesApi.updateTable(editingTable.id, tableData)
                if (response.success) {
                  console.log('ü™ë Frontend: –°—Ç–æ–ª –æ–±–Ω–æ–≤–ª–µ–Ω:', response.data)
                  // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                  setZoneTables(prev => {
                    const newTables = { ...prev }
                    Object.keys(newTables).forEach(zoneId => {
                      const zoneIdNum = parseInt(zoneId)
                      const tableIndex = newTables[zoneIdNum].findIndex(t => t.id === editingTable.id)
                      if (tableIndex !== -1) {
                        newTables[zoneIdNum] = [...newTables[zoneIdNum]]
                        newTables[zoneIdNum][tableIndex] = response.data
                      }
                    })
                    return newTables
                  })
                }
              } else {
                // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–æ–ª–∞
                const response = await eventTablesApi.createTable(tableData)
                if (response.success) {
                  console.log('ü™ë Frontend: –°—Ç–æ–ª —Å–æ–∑–¥–∞–Ω:', response.data)
                  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                  setZoneTables(prev => ({
                    ...prev,
                    [selectedZoneId]: [...(prev[selectedZoneId] || []), response.data]
                  }))
                }
              }
              setIsTableModalOpen(false)
              setEditingTable(null)
            } catch (error) {
              console.error('ü™ë Frontend: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–æ–ª–∞:', error)
              alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–æ–ª–∞')
            }
          }}>
            <FormGroup>
              <Label htmlFor="tableName">–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–∞</Label>
              <Input
                id="tableName"
                name="name"
                type="text"
                defaultValue={editingTable?.name || ''}
                required
              />
            </FormGroup>

            <FormGroup>
              <Label htmlFor="tableSeats">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç</Label>
              <Input
                id="tableSeats"
                name="seats"
                type="number"
                defaultValue={editingTable?.seats || 4}
                min="1"
                max="20"
                required
              />
            </FormGroup>

            <div style={{ display: 'flex', gap: '1rem', marginTop: '1.5rem' }}>
              <Button type="submit" $variant="primary">
                {editingTable ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' : '–°–æ–∑–¥–∞—Ç—å —Å—Ç–æ–ª'}
              </Button>
              <Button type="button" onClick={() => setIsTableModalOpen(false)}>
                –û—Ç–º–µ–Ω–∞
              </Button>
            </div>
          </Form>
        </ModalContent>
      </Modal>
    </Container>
  )
}
